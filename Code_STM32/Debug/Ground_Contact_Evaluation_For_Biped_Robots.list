
Ground_Contact_Evaluation_For_Biped_Robots.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001699c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08016b80  08016b80  00026b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801719c  0801719c  00030370  2**0
                  CONTENTS
  4 .ARM          00000000  0801719c  0801719c  00030370  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801719c  0801719c  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801719c  0801719c  0002719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080171a4  080171a4  000271a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  080171ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b7c  20000370  0801751c  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eec  0801751c  00033eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d811  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bf6  00000000  00000000  0007dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f28  00000000  00000000  000847a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d10  00000000  00000000  000876d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029684  00000000  00000000  0008a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a6c  00000000  00000000  000b3a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee652  00000000  00000000  000dc4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cab22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e940  00000000  00000000  001cab78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016b64 	.word	0x08016b64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08016b64 	.word	0x08016b64

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <_ZN6bmp388C1Ev>:
 */
#include "main.h"
#include "bmp388.h"


bmp388::bmp388()
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2283      	movs	r2, #131	; 0x83
 8000d58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	227e      	movs	r2, #126	; 0x7e
 8000d60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	22b6      	movs	r2, #182	; 0xb6
 8000d68:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	22b1      	movs	r2, #177	; 0xb1
 8000d70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	229b      	movs	r2, #155	; 0x9b
 8000d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	221b      	movs	r2, #27
 8000d80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2233      	movs	r2, #51	; 0x33
 8000d88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2284      	movs	r2, #132	; 0x84
 8000d90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{

}
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_ZN6bmp388D1Ev>:


bmp388::~bmp388()
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
{

}
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_ZN6bmp38811chip_selectEt>:


void bmp388::chip_select(uint16_t pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
	pin_ = pin;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	831a      	strh	r2, [r3, #24]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_ZN6bmp3883spiEP19__SPI_HandleTypeDefS1_S1_>:

void bmp388::spi(SPI_HandleTypeDef* spi1, SPI_HandleTypeDef* spi2, SPI_HandleTypeDef* spi3)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
	spi1_ = spi1;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	61da      	str	r2, [r3, #28]
	spi2_ = spi2;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	621a      	str	r2, [r3, #32]
	spi3_ = spi3;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_ZN6bmp3884initEv>:


void bmp388::init(){
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]


	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_RESET);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	8b1b      	ldrh	r3, [r3, #24]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e16:	f007 fe35 	bl	8008a84 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&chip_id_, 2);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69d8      	ldr	r0, [r3, #28]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	332b      	adds	r3, #43	; 0x2b
 8000e22:	2202      	movs	r2, #2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f00b f8f3 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  SPI_2_3_enable();
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fd36 	bl	800189c <_ZN6bmp38814SPI_2_3_enableEv>
	  HAL_SPI_Receive_DMA(spi1_, (uint8_t *)&chip_id_r_1, 1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69d8      	ldr	r0, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3328      	adds	r3, #40	; 0x28
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f00b f9dc 	bl	800c1f8 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(spi2_, (uint8_t *)&chip_id_r_2, 1);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a18      	ldr	r0, [r3, #32]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3329      	adds	r3, #41	; 0x29
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f00b f9d4 	bl	800c1f8 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(spi3_, (uint8_t *)&chip_id_r_3, 1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	332a      	adds	r3, #42	; 0x2a
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f00b f9cc 	bl	800c1f8 <HAL_SPI_Receive_DMA>
	  SPI_2_3_disable();
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fd41 	bl	80018e8 <_ZN6bmp38815SPI_2_3_disableEv>
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_SET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	8b1b      	ldrh	r3, [r3, #24]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f007 fe07 	bl	8008a84 <HAL_GPIO_WritePin>

	  HAL_Delay(2);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f007 f8de 	bl	8008038 <HAL_Delay>

	  //Soft Reset
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_RESET);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8b1b      	ldrh	r3, [r3, #24]
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f007 fdfc 	bl	8008a84 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&send_cmd_, 1);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69d8      	ldr	r0, [r3, #28]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	332d      	adds	r3, #45	; 0x2d
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	f00b f8ba 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&soft_rst_, 1);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69d8      	ldr	r0, [r3, #28]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	332e      	adds	r3, #46	; 0x2e
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f00b f8b2 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_SET);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	8b1b      	ldrh	r3, [r3, #24]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f007 fde4 	bl	8008a84 <HAL_GPIO_WritePin>

	  HAL_Delay(2);
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f007 f8bb 	bl	8008038 <HAL_Delay>

	  //Write to Power Control
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_RESET);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	8b1b      	ldrh	r3, [r3, #24]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f007 fdd9 	bl	8008a84 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&pwr_ctrl_w_, 1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69d8      	ldr	r0, [r3, #28]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3331      	adds	r3, #49	; 0x31
 8000eda:	2201      	movs	r2, #1
 8000edc:	4619      	mov	r1, r3
 8000ede:	f00b f897 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&pwr_config_, 1);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69d8      	ldr	r0, [r3, #28]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3332      	adds	r3, #50	; 0x32
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	f00b f88f 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_SET);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8b1b      	ldrh	r3, [r3, #24]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f007 fdc1 	bl	8008a84 <HAL_GPIO_WritePin>

	  HAL_Delay(2);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f007 f898 	bl	8008038 <HAL_Delay>

	  //Read Compensation Coeff of three sensors and store in 2D array
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_RESET);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	8b1b      	ldrh	r3, [r3, #24]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f007 fdb6 	bl	8008a84 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&comp_coeff_r_, 2);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69d8      	ldr	r0, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	332f      	adds	r3, #47	; 0x2f
 8000f20:	2202      	movs	r2, #2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f00b f874 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  SPI_2_3_enable();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fcb7 	bl	800189c <_ZN6bmp38814SPI_2_3_enableEv>
	  for (int i = 0; i < 22; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b15      	cmp	r3, #21
 8000f36:	dc2a      	bgt.n	8000f8e <_ZN6bmp3884initEv+0x18c>
	  {
		  HAL_SPI_Receive_DMA(spi1_, (uint8_t*)&comp_coeff_store_[i][0], 1);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69d8      	ldr	r0, [r3, #28]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	3348      	adds	r3, #72	; 0x48
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f00b f953 	bl	800c1f8 <HAL_SPI_Receive_DMA>
		  HAL_SPI_Receive_DMA(spi2_, (uint8_t*)&comp_coeff_store_[i][1], 1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a18      	ldr	r0, [r3, #32]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3349      	adds	r3, #73	; 0x49
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	f00b f946 	bl	800c1f8 <HAL_SPI_Receive_DMA>
		  HAL_SPI_Receive_DMA(spi3_, (uint8_t*)&comp_coeff_store_[i][2], 1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	334a      	adds	r3, #74	; 0x4a
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f00b f939 	bl	800c1f8 <HAL_SPI_Receive_DMA>
	  for (int i = 0; i < 22; i++)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e7d1      	b.n	8000f32 <_ZN6bmp3884initEv+0x130>
	  }
	  SPI_2_3_disable();
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fcaa 	bl	80018e8 <_ZN6bmp38815SPI_2_3_disableEv>
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_SET);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	8b1b      	ldrh	r3, [r3, #24]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f007 fd70 	bl	8008a84 <HAL_GPIO_WritePin>

	  HAL_Delay(2);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f007 f847 	bl	8008038 <HAL_Delay>
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <_ZN6bmp38815calculate_coeffEv>:


void bmp388::calculate_coeff()
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	 for (int i = 0; i<3; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	f300 8177 	bgt.w	80012b6 <_ZN6bmp38815calculate_coeffEv+0x302>
	 {
	  nvm_par_t1_[i] = (uint16_t)(comp_coeff_store_[1][i] << 8 | comp_coeff_store_[0][i]) / 0.00390625f;
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4413      	add	r3, r2
 8000fce:	334b      	adds	r3, #75	; 0x4b
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	440b      	add	r3, r1
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff0:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80012c4 <_ZN6bmp38815calculate_coeffEv+0x310>
 8000ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3322      	adds	r3, #34	; 0x22
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	3304      	adds	r3, #4
 8001004:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_t2_[i] = (uint16_t)(comp_coeff_store_[3][i] << 8 | comp_coeff_store_[2][i]) / 1073741824.0f;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	3351      	adds	r3, #81	; 0x51
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	440b      	add	r3, r1
 800101c:	334e      	adds	r3, #78	; 0x4e
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001030:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80012c8 <_ZN6bmp38815calculate_coeffEv+0x314>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3326      	adds	r3, #38	; 0x26
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_t3_[i] = (int8_t) comp_coeff_store_[4][i] / 281474976710656.0f;
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3354      	adds	r3, #84	; 0x54
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80012cc <_ZN6bmp38815calculate_coeffEv+0x318>
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3328      	adds	r3, #40	; 0x28
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	3304      	adds	r3, #4
 800106e:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p1_[i] = ((int16_t)(comp_coeff_store_[6][i] << 8 | comp_coeff_store_[5][i]) - 16384) / 1048576.0f;
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	335a      	adds	r3, #90	; 0x5a
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	440b      	add	r3, r1
 8001086:	3357      	adds	r3, #87	; 0x57
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80012d0 <_ZN6bmp38815calculate_coeffEv+0x31c>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	332c      	adds	r3, #44	; 0x2c
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p2_[i] = ((int16_t) (comp_coeff_store_[8][i] << 8 | comp_coeff_store_[7][i]) - 16384) / 536870912.0f;
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	3360      	adds	r3, #96	; 0x60
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	440b      	add	r3, r1
 80010c6:	335d      	adds	r3, #93	; 0x5d
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010dc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80012d4 <_ZN6bmp38815calculate_coeffEv+0x320>
 80010e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	332e      	adds	r3, #46	; 0x2e
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	3304      	adds	r3, #4
 80010f0:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p3_[i] = (int16_t) comp_coeff_store_[9][i] / 4294967296.0f;
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	3363      	adds	r3, #99	; 0x63
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	eddf 6a74 	vldr	s13, [pc, #464]	; 80012d8 <_ZN6bmp38815calculate_coeffEv+0x324>
 800110a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3332      	adds	r3, #50	; 0x32
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p4_[i] = (int8_t) comp_coeff_store_[10][i] / 137438953472.0f;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	3366      	adds	r3, #102	; 0x66
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80012dc <_ZN6bmp38815calculate_coeffEv+0x328>
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3334      	adds	r3, #52	; 0x34
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p5_[i] = (uint16_t)(comp_coeff_store_[12][i] << 8 | comp_coeff_store_[11][i]) / 0.125f;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4413      	add	r3, r2
 800114e:	336c      	adds	r3, #108	; 0x6c
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	440b      	add	r3, r1
 800115c:	3369      	adds	r3, #105	; 0x69
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21b      	sxth	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
 8001174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3338      	adds	r3, #56	; 0x38
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p6_[i] = (uint16_t)(comp_coeff_store_[14][i] << 8 | comp_coeff_store_[13][i]) / 64.0f;
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	3372      	adds	r3, #114	; 0x72
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	440b      	add	r3, r1
 800119a:	336f      	adds	r3, #111	; 0x6f
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80012e0 <_ZN6bmp38815calculate_coeffEv+0x32c>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	333a      	adds	r3, #58	; 0x3a
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p7_[i] = (int8_t) comp_coeff_store_[15][i] / 256.0f;
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	3375      	adds	r3, #117	; 0x75
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011da:	eddf 6a42 	vldr	s13, [pc, #264]	; 80012e4 <_ZN6bmp38815calculate_coeffEv+0x330>
 80011de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	333e      	adds	r3, #62	; 0x3e
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p8_[i] = (int8_t)comp_coeff_store_[16][i] / 32768.0f;;
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	3378      	adds	r3, #120	; 0x78
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eddf 6a38 	vldr	s13, [pc, #224]	; 80012e8 <_ZN6bmp38815calculate_coeffEv+0x334>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3340      	adds	r3, #64	; 0x40
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3304      	adds	r3, #4
 8001218:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p9_[i] = (int16_t)(comp_coeff_store_[18][i] << 8 | comp_coeff_store_[17][i]) / 281474976710656.0f;
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4413      	add	r3, r2
 8001222:	337e      	adds	r3, #126	; 0x7e
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	440b      	add	r3, r1
 8001230:	337b      	adds	r3, #123	; 0x7b
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001242:	eddf 6a22 	vldr	s13, [pc, #136]	; 80012cc <_ZN6bmp38815calculate_coeffEv+0x318>
 8001246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3344      	adds	r3, #68	; 0x44
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p10_[i] = (int8_t) comp_coeff_store_[19][i] / 281474976710656.0f;
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	3381      	adds	r3, #129	; 0x81
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80012cc <_ZN6bmp38815calculate_coeffEv+0x318>
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3346      	adds	r3, #70	; 0x46
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	3304      	adds	r3, #4
 8001280:	edc3 7a00 	vstr	s15, [r3]
	  nvm_par_p11_[i] = (int8_t) comp_coeff_store_[20][i] / 36893488147419103232.0f;
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4413      	add	r3, r2
 800128a:	3384      	adds	r3, #132	; 0x84
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	eddf 6a14 	vldr	s13, [pc, #80]	; 80012ec <_ZN6bmp38815calculate_coeffEv+0x338>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	334a      	adds	r3, #74	; 0x4a
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = 0; i<3; i++)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e684      	b.n	8000fc0 <_ZN6bmp38815calculate_coeffEv+0xc>
	 }
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	3b800000 	.word	0x3b800000
 80012c8:	4e800000 	.word	0x4e800000
 80012cc:	57800000 	.word	0x57800000
 80012d0:	49800000 	.word	0x49800000
 80012d4:	4e000000 	.word	0x4e000000
 80012d8:	4f800000 	.word	0x4f800000
 80012dc:	52000000 	.word	0x52000000
 80012e0:	42800000 	.word	0x42800000
 80012e4:	43800000 	.word	0x43800000
 80012e8:	47000000 	.word	0x47000000
 80012ec:	60000000 	.word	0x60000000

080012f0 <_ZN6bmp3887readoutEv>:

//read raw values (6 bytes) of 3 sensors and store in a 2d array
void bmp388::readout()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_RESET);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	8b1b      	ldrh	r3, [r3, #24]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f007 fbbe 	bl	8008a84 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit_DMA(spi1_, (uint8_t *)&read_temp_, 2);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69d8      	ldr	r0, [r3, #28]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3333      	adds	r3, #51	; 0x33
 8001310:	2202      	movs	r2, #2
 8001312:	4619      	mov	r1, r3
 8001314:	f00a fe7c 	bl	800c010 <HAL_SPI_Transmit_DMA>
	  SPI_2_3_enable();
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fabf 	bl	800189c <_ZN6bmp38814SPI_2_3_enableEv>
	  for (int i = 0; i < 6; i++)
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b05      	cmp	r3, #5
 8001326:	dc2d      	bgt.n	8001384 <_ZN6bmp3887readoutEv+0x94>
	  {
		  HAL_SPI_Receive_DMA(spi1_, (uint8_t*)&spi_buf_1_[i][0], 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69d8      	ldr	r0, [r3, #28]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	3330      	adds	r3, #48	; 0x30
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	2201      	movs	r2, #1
 800133e:	4619      	mov	r1, r3
 8001340:	f00a ff5a 	bl	800c1f8 <HAL_SPI_Receive_DMA>
		  HAL_SPI_Receive_DMA(spi2_, (uint8_t*)&spi_buf_1_[i][1], 1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a18      	ldr	r0, [r3, #32]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	3331      	adds	r3, #49	; 0x31
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f00a ff4c 	bl	800c1f8 <HAL_SPI_Receive_DMA>
		  HAL_SPI_Receive_DMA(spi3_, (uint8_t*)&spi_buf_1_[i][2], 1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	3332      	adds	r3, #50	; 0x32
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	2201      	movs	r2, #1
 8001376:	4619      	mov	r1, r3
 8001378:	f00a ff3e 	bl	800c1f8 <HAL_SPI_Receive_DMA>
	  for (int i = 0; i < 6; i++)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e7ce      	b.n	8001322 <_ZN6bmp3887readoutEv+0x32>
	  }
	  SPI_2_3_disable();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 faaf 	bl	80018e8 <_ZN6bmp38815SPI_2_3_disableEv>
	  HAL_GPIO_WritePin(GPIOA, pin_, GPIO_PIN_SET);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8b1b      	ldrh	r3, [r3, #24]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001396:	f007 fb75 	bl	8008a84 <HAL_GPIO_WritePin>


	  for (int i = 0; i < 3; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dc35      	bgt.n	8001410 <_ZN6bmp3887readoutEv+0x120>
	  {
		  pressure_read_out_[i] = (uint32_t) spi_buf_1_[2][i] << 16 | (uint32_t)spi_buf_1_[1][i] << 8 | (uint32_t)spi_buf_1_[0][i];
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	333a      	adds	r3, #58	; 0x3a
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	440b      	add	r3, r1
 80013b6:	3337      	adds	r3, #55	; 0x37
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4313      	orrs	r3, r2
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	440a      	add	r2, r1
 80013c4:	3234      	adds	r2, #52	; 0x34
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	ea43 0102 	orr.w	r1, r3, r2
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	3250      	adds	r2, #80	; 0x50
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  temperature_read_out_[i] = (uint32_t) spi_buf_1_[5][i] << 16 | (uint32_t)spi_buf_1_[4][i] << 8  | (uint32_t)spi_buf_1_[3][i];
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4413      	add	r3, r2
 80013dc:	3343      	adds	r3, #67	; 0x43
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	440b      	add	r3, r1
 80013e8:	3340      	adds	r3, #64	; 0x40
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4313      	orrs	r3, r2
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	440a      	add	r2, r1
 80013f6:	323d      	adds	r2, #61	; 0x3d
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	334c      	adds	r3, #76	; 0x4c
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	605a      	str	r2, [r3, #4]
	  for (int i = 0; i < 3; i++)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3301      	adds	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	e7c6      	b.n	800139e <_ZN6bmp3887readoutEv+0xae>
	  }
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZN6bmp38810compensateEv>:


void bmp388::compensate()
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	  for (int i = 0; i < 3; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b02      	cmp	r3, #2
 8001428:	f300 8231 	bgt.w	800188e <_ZN6bmp38810compensateEv+0x476>
	  {
		  partial_data1_[i] = (float)(temperature_read_out_[i] - nvm_par_t1_[i]);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	334c      	adds	r3, #76	; 0x4c
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3322      	adds	r3, #34	; 0x22
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3304      	adds	r3, #4
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3352      	adds	r3, #82	; 0x52
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	3304      	adds	r3, #4
 8001460:	edc3 7a00 	vstr	s15, [r3]
		  partial_data2_[i] = (float)(partial_data1_[i] * nvm_par_t2_[i]);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3352      	adds	r3, #82	; 0x52
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3326      	adds	r3, #38	; 0x26
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3356      	adds	r3, #86	; 0x56
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	edc3 7a00 	vstr	s15, [r3]
		  temperature_[i] = partial_data2_[i]+ (partial_data1_[i] * partial_data1_[i]) * nvm_par_t3_[i];
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3356      	adds	r3, #86	; 0x56
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3352      	adds	r3, #82	; 0x52
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3304      	adds	r3, #4
 80014ae:	edd3 6a00 	vldr	s13, [r3]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3352      	adds	r3, #82	; 0x52
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3304      	adds	r3, #4
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3328      	adds	r3, #40	; 0x28
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	3304      	adds	r3, #4
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edc3 7a00 	vstr	s15, [r3]

		  partial_data1_[i] = nvm_par_p6_[i] * temperature_[i];
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	333a      	adds	r3, #58	; 0x3a
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3304      	adds	r3, #4
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3352      	adds	r3, #82	; 0x52
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	edc3 7a00 	vstr	s15, [r3]
		  partial_data2_[i] = nvm_par_p7_[i] * temperature_[i] * temperature_[i];
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	333e      	adds	r3, #62	; 0x3e
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3356      	adds	r3, #86	; 0x56
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	edc3 7a00 	vstr	s15, [r3]
		  partial_data3_[i] = nvm_par_p8_[i] * temperature_[i] * temperature_[i] * temperature_[i];
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3340      	adds	r3, #64	; 0x40
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3304      	adds	r3, #4
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3358      	adds	r3, #88	; 0x58
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3304      	adds	r3, #4
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		  partial_out1_[i] = nvm_par_p5_[i] + partial_data1_[i] + partial_data2_[i] + partial_data3_[i];
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3338      	adds	r3, #56	; 0x38
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3352      	adds	r3, #82	; 0x52
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3356      	adds	r3, #86	; 0x56
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3358      	adds	r3, #88	; 0x58
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	335e      	adds	r3, #94	; 0x5e
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	3304      	adds	r3, #4
 80015fa:	edc3 7a00 	vstr	s15, [r3]

		  partial_data1_[i] = nvm_par_p2_[i] * temperature_[i];
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	332e      	adds	r3, #46	; 0x2e
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3352      	adds	r3, #82	; 0x52
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	3304      	adds	r3, #4
 800162a:	edc3 7a00 	vstr	s15, [r3]
		  partial_data2_[i] = nvm_par_p3_[i] * temperature_[i] * temperature_[i];
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3332      	adds	r3, #50	; 0x32
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3356      	adds	r3, #86	; 0x56
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	edc3 7a00 	vstr	s15, [r3]
		  partial_data3_[i] = nvm_par_p4_[i] * temperature_[i] * temperature_[i] * temperature_[i];
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3334      	adds	r3, #52	; 0x34
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3358      	adds	r3, #88	; 0x58
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	3304      	adds	r3, #4
 80016b6:	edc3 7a00 	vstr	s15, [r3]
		  partial_out2_[i] = (float)pressure_read_out_[i] * (nvm_par_p1_[i] +  partial_data1_[i] +  partial_data2_[i] +  partial_data3_[i]);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	3250      	adds	r2, #80	; 0x50
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	332c      	adds	r3, #44	; 0x2c
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	edd3 6a00 	vldr	s13, [r3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3352      	adds	r3, #82	; 0x52
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3304      	adds	r3, #4
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3356      	adds	r3, #86	; 0x56
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3358      	adds	r3, #88	; 0x58
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3304      	adds	r3, #4
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3362      	adds	r3, #98	; 0x62
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	edc3 7a00 	vstr	s15, [r3]

		  partial_data1_[i] = (float)pressure_read_out_[i] * (float)pressure_read_out_[i];
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	3250      	adds	r2, #80	; 0x50
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	3250      	adds	r2, #80	; 0x50
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3352      	adds	r3, #82	; 0x52
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	3304      	adds	r3, #4
 800175a:	edc3 7a00 	vstr	s15, [r3]
	  	  partial_data2_[i] = nvm_par_p9_[i] + nvm_par_p10_[i] * temperature_[i];
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3344      	adds	r3, #68	; 0x44
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3346      	adds	r3, #70	; 0x46
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	edd3 6a00 	vldr	s13, [r3]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3356      	adds	r3, #86	; 0x56
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	edc3 7a00 	vstr	s15, [r3]
	  	  partial_data3_[i] =  partial_data1_[i] *  partial_data2_[i];
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3352      	adds	r3, #82	; 0x52
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3356      	adds	r3, #86	; 0x56
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	edd3 7a00 	vldr	s15, [r3]
 80017bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3358      	adds	r3, #88	; 0x58
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	edc3 7a00 	vstr	s15, [r3]
	  	  partial_data4_[i] =  partial_data3_[i] + ((float)pressure_read_out_[i] * (float)pressure_read_out_[i] * (float)pressure_read_out_[i])*nvm_par_p11_[i];
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3358      	adds	r3, #88	; 0x58
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3304      	adds	r3, #4
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	3250      	adds	r2, #80	; 0x50
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	3250      	adds	r2, #80	; 0x50
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	3250      	adds	r2, #80	; 0x50
 800180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	334a      	adds	r3, #74	; 0x4a
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	335c      	adds	r3, #92	; 0x5c
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	edc3 7a00 	vstr	s15, [r3]
	  	  pressure_[i] = partial_out1_[i] + partial_out2_[i] + partial_data4_[i];
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	335e      	adds	r3, #94	; 0x5e
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3362      	adds	r3, #98	; 0x62
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	335c      	adds	r3, #92	; 0x5c
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3302      	adds	r3, #2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3304      	adds	r3, #4
 8001882:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 3; i++)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e5ca      	b.n	8001424 <_ZN6bmp38810compensateEv+0xc>
	  	 }
};
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <_ZN6bmp38814SPI_2_3_enableEv>:

void bmp388::SPI_2_3_enable()
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	  SPI2->CR1 &= ~SPI_CR1_SSI; //SPI2, software CS low
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_ZN6bmp38814SPI_2_3_enableEv+0x44>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <_ZN6bmp38814SPI_2_3_enableEv+0x44>)
 80018aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
	  SPI2->CR1 |= SPI_CR1_SPE;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <_ZN6bmp38814SPI_2_3_enableEv+0x44>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <_ZN6bmp38814SPI_2_3_enableEv+0x44>)
 80018b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ba:	6013      	str	r3, [r2, #0]
	  SPI3->CR1 &= ~SPI_CR1_SSI; //SPI3, software CS low
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <_ZN6bmp38814SPI_2_3_enableEv+0x48>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <_ZN6bmp38814SPI_2_3_enableEv+0x48>)
 80018c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
	  SPI3->CR1 |= SPI_CR1_SPE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <_ZN6bmp38814SPI_2_3_enableEv+0x48>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_ZN6bmp38814SPI_2_3_enableEv+0x48>)
 80018ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40003800 	.word	0x40003800
 80018e4:	40003c00 	.word	0x40003c00

080018e8 <_ZN6bmp38815SPI_2_3_disableEv>:

void bmp388::SPI_2_3_disable()
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	  SPI2->CR1 &= ~SPI_CR1_SPE; //Disable SPI2
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <_ZN6bmp38815SPI_2_3_disableEv+0x44>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <_ZN6bmp38815SPI_2_3_disableEv+0x44>)
 80018f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018fa:	6013      	str	r3, [r2, #0]
	  SPI2->CR1 |= SPI_CR1_SSI;
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <_ZN6bmp38815SPI_2_3_disableEv+0x44>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <_ZN6bmp38815SPI_2_3_disableEv+0x44>)
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	6013      	str	r3, [r2, #0]
	  SPI3->CR1 &= ~SPI_CR1_SPE; //Disable SPI3
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <_ZN6bmp38815SPI_2_3_disableEv+0x48>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <_ZN6bmp38815SPI_2_3_disableEv+0x48>)
 800190e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001912:	6013      	str	r3, [r2, #0]
	  SPI3->CR1 |= SPI_CR1_SSI;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <_ZN6bmp38815SPI_2_3_disableEv+0x48>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_ZN6bmp38815SPI_2_3_disableEv+0x48>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	40003800 	.word	0x40003800
 8001930:	40003c00 	.word	0x40003c00

08001934 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	ed87 0a01 	vstr	s0, [r7, #4]
 8001956:	ed97 0a01 	vldr	s0, [r7, #4]
 800195a:	f010 facf 	bl	8011efc <asinf>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fb63 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fb46 	bl	8002020 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1Ev>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ffeb 	bl	8001984 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1Ev>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fb92 	bl	80020ea <_ZNSaIfED1Ev>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb75 	bl	80020ca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ffeb 	bl	80019d0 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fbbc 	bl	800218a <_ZNSaIsED1Ev>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZNSt12_Vector_baseIsSaIsEEC1Ev>:
      _Vector_base() = default;
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fb9f 	bl	800216a <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_ZNSt6vectorIsSaIsEEC1Ev>:
      vector() = default;
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffeb 	bl	8001a1c <_ZNSt12_Vector_baseIsSaIsEEC1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN8ICM42605C1Ev>:
#include <icm42605.h>
#include "main.h"
#include <math.h>
extern I2C_HandleTypeDef hi2c1;

ICM42605::ICM42605()
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff9f 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330c      	adds	r3, #12
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff9a 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	331c      	adds	r3, #28
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ffbb 	bl	80019ea <_ZNSt6vectorIfSaIfEEC1Ev>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3328      	adds	r3, #40	; 0x28
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffdc 	bl	8001a36 <_ZNSt6vectorIsSaIsEEC1Ev>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3334      	adds	r3, #52	; 0x34
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ffd7 	bl	8001a36 <_ZNSt6vectorIsSaIsEEC1Ev>
{
	gyro_cal = {0, 0};
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 001c 	add.w	r0, r3, #28
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001aac:	f000 fbad 	bl	800220a <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>
}
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZN8ICM42605D1Ev>:

ICM42605::~ICM42605()
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3334      	adds	r3, #52	; 0x34
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fb84 	bl	80021d4 <_ZNSt6vectorIsSaIsEED1Ev>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3328      	adds	r3, #40	; 0x28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fb7f 	bl	80021d4 <_ZNSt6vectorIsSaIsEED1Ev>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	331c      	adds	r3, #28
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fb2a 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	330c      	adds	r3, #12
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fad5 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fad1 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
{

}
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZN8ICM426054InitEv>:


void ICM42605::Init()
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	6078      	str	r0, [r7, #4]

	  uint8_t data;

	  data = 0x2F;	//Sensor wake-up. Power-management register
 8001b04:	232f      	movs	r3, #47	; 0x2f
 8001b06:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x4E, 1, &data, 1, 1000);
 8001b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	f107 030f 	add.w	r3, r7, #15
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	224e      	movs	r2, #78	; 0x4e
 8001b1c:	21d2      	movs	r1, #210	; 0xd2
 8001b1e:	4818      	ldr	r0, [pc, #96]	; (8001b80 <_ZN8ICM426054InitEv+0x84>)
 8001b20:	f007 f858 	bl	8008bd4 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f006 fa87 	bl	8008038 <HAL_Delay>

	  data = 0x46;	//Configure Gyro Range, +/- 500dps
 8001b2a:	2346      	movs	r3, #70	; 0x46
 8001b2c:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x4F, 1, &data, 1, 1000);
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	9302      	str	r3, [sp, #8]
 8001b34:	2301      	movs	r3, #1
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	f107 030f 	add.w	r3, r7, #15
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	224f      	movs	r2, #79	; 0x4f
 8001b42:	21d2      	movs	r1, #210	; 0xd2
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <_ZN8ICM426054InitEv+0x84>)
 8001b46:	f007 f845 	bl	8008bd4 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f006 fa74 	bl	8008038 <HAL_Delay>

	  data = 0x26;	//Configure Acc Range, +/- 8g
 8001b50:	2326      	movs	r3, #38	; 0x26
 8001b52:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Mem_Write (&hi2c1, ICM_ADDR, 0x50, 1, &data, 1, 1000);
 8001b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f107 030f 	add.w	r3, r7, #15
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	2250      	movs	r2, #80	; 0x50
 8001b68:	21d2      	movs	r1, #210	; 0xd2
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <_ZN8ICM426054InitEv+0x84>)
 8001b6c:	f007 f832 	bl	8008bd4 <HAL_I2C_Mem_Write>
	  HAL_Delay(2);
 8001b70:	2002      	movs	r0, #2
 8001b72:	f006 fa61 	bl	8008038 <HAL_Delay>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000038c 	.word	0x2000038c

08001b84 <_ZN8ICM426057ReadAccEv>:

void  ICM42605::ReadAcc()
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b0a0      	sub	sp, #128	; 0x80
 8001b88:	af04      	add	r7, sp, #16
 8001b8a:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6];

	HAL_I2C_Mem_Read(&hi2c1, ICM_ADDR, 0x1F, 1, acc_data, 6, 1000);
 8001b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2306      	movs	r3, #6
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	221f      	movs	r2, #31
 8001ba0:	21d2      	movs	r1, #210	; 0xd2
 8001ba2:	4880      	ldr	r0, [pc, #512]	; (8001da4 <_ZN8ICM426057ReadAccEv+0x220>)
 8001ba4:	f007 f92a 	bl	8008dfc <HAL_I2C_Mem_Read>

	acc_raw_data_ = {
						(int16_t)(acc_data[0] << 8 | acc_data[1]),
						(int16_t)(acc_data[2] << 8 | acc_data[3]),
						(int16_t)(acc_data[4] << 8 | acc_data[5])
					};
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f103 0028 	add.w	r0, r3, #40	; 0x28
						(int16_t)(acc_data[0] << 8 | acc_data[1]),
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8001bbc:	83bb      	strh	r3, [r7, #28]
						(int16_t)(acc_data[2] << 8 | acc_data[3]),
 8001bbe:	7bbb      	ldrb	r3, [r7, #14]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8001bcc:	83fb      	strh	r3, [r7, #30]
						(int16_t)(acc_data[4] << 8 | acc_data[5])
 8001bce:	7c3b      	ldrb	r3, [r7, #16]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	7c7b      	ldrb	r3, [r7, #17]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
	acc_raw_data_ = {
 8001bdc:	843b      	strh	r3, [r7, #32]
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	2303      	movs	r3, #3
 8001be6:	61bb      	str	r3, [r7, #24]
					};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001bf0:	f000 fb26 	bl	8002240 <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>

	float acc_total_vector = sqrt((acc_raw_data_[0] * acc_raw_data_[0]) + (acc_raw_data_[1] * acc_raw_data_[1]) + (acc_raw_data_[2] * acc_raw_data_[2]));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3328      	adds	r3, #40	; 0x28
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fb3b 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c06:	461c      	mov	r4, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3328      	adds	r3, #40	; 0x28
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fb31 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	fb03 f404 	mul.w	r4, r3, r4
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3328      	adds	r3, #40	; 0x28
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fb26 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	461d      	mov	r5, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	2101      	movs	r1, #1
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fb1c 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	fb03 f305 	mul.w	r3, r3, r5
 8001c48:	441c      	add	r4, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3328      	adds	r3, #40	; 0x28
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fb10 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3328      	adds	r3, #40	; 0x28
 8001c62:	2102      	movs	r1, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fb06 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	fb03 f305 	mul.w	r3, r3, r5
 8001c74:	4423      	add	r3, r4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fb0d 	bl	8002296 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001c7c:	ec53 2b10 	vmov	r2, r3, d0
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7fe ffd8 	bl	8000c38 <__aeabi_d2f>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	66fb      	str	r3, [r7, #108]	; 0x6c

	acc_ = 	{
				{-asin((float)acc_raw_data_[0] / acc_total_vector), 0},
				{ 0, asin((float)acc_raw_data_[1] / acc_total_vector)}
			};
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 040c 	add.w	r4, r3, #12
				{-asin((float)acc_raw_data_[0] / acc_total_vector), 0},
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3328      	adds	r3, #40	; 0x28
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 faec 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cb0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cb4:	eeb0 0a66 	vmov.f32	s0, s13
 8001cb8:	f7ff fe48 	bl	800194c <_ZSt4asinf>
 8001cbc:	eef0 7a40 	vmov.f32	s15, s0
 8001cc0:	eef1 7a67 	vneg.f32	s15, s15
	acc_ = 	{
 8001cc4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	653b      	str	r3, [r7, #80]	; 0x50
 8001cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 faf2 	bl	80022c6 <_ZNSaIfEC1Ev>
 8001ce2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ce6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001cea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001cee:	ca06      	ldmia	r2, {r1, r2}
 8001cf0:	f000 faf5 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	663b      	str	r3, [r7, #96]	; 0x60
				{ 0, asin((float)acc_raw_data_[1] / acc_total_vector)}
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3328      	adds	r3, #40	; 0x28
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fab8 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d14:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001d18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001d20:	f7ff fe14 	bl	800194c <_ZSt4asinf>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
	acc_ = 	{
 8001d28:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 8001d2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d32:	2302      	movs	r3, #2
 8001d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fac3 	bl	80022c6 <_ZNSaIfEC1Ev>
 8001d40:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	f103 000c 	add.w	r0, r3, #12
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d52:	ca06      	ldmia	r2, {r1, r2}
 8001d54:	f000 fac3 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
			};
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f000 fad8 	bl	8002320 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
	acc_ = 	{
 8001d70:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001d74:	3418      	adds	r4, #24
 8001d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7a:	429c      	cmp	r4, r3
 8001d7c:	d004      	beq.n	8001d88 <_ZN8ICM426057ReadAccEv+0x204>
 8001d7e:	3c0c      	subs	r4, #12
			};
 8001d80:	4620      	mov	r0, r4
 8001d82:	f000 f9d7 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
	acc_ = 	{
 8001d86:	e7f6      	b.n	8001d76 <_ZN8ICM426057ReadAccEv+0x1f2>
			};
 8001d88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f9ac 	bl	80020ea <_ZNSaIfED1Ev>
 8001d92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f9a7 	bl	80020ea <_ZNSaIfED1Ev>
}
 8001d9c:	bf00      	nop
 8001d9e:	3770      	adds	r7, #112	; 0x70
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bdb0      	pop	{r4, r5, r7, pc}
 8001da4:	2000038c 	.word	0x2000038c

08001da8 <_ZN8ICM4260513GyroCalibrateEv>:

void  ICM42605::GyroCalibrate()			//average of first 2000 readings
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	ed2d 8b02 	vpush	{d8}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	//sum of first 2000 readings
	for (int i = 0; i < 2000; i++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001dbe:	da2e      	bge.n	8001e1e <_ZN8ICM4260513GyroCalibrateEv+0x76>
	{
		ReadGyro();
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f859 	bl	8001e78 <_ZN8ICM426058ReadGyroEv>
		for (int k = 0; k <2; k++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	dc1f      	bgt.n	8001e10 <_ZN8ICM4260513GyroCalibrateEv+0x68>
			gyro_cal[k] +=gyro_raw_data[k];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3334      	adds	r3, #52	; 0x34
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fa4c 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	331c      	adds	r3, #28
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fab2 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8001df2:	4603      	mov	r3, r0
 8001df4:	ed93 7a00 	vldr	s14, [r3]
 8001df8:	ee07 4a90 	vmov	s15, r4
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	edc3 7a00 	vstr	s15, [r3]
		for (int k = 0; k <2; k++)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e7dc      	b.n	8001dca <_ZN8ICM4260513GyroCalibrateEv+0x22>
		HAL_Delay(3);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f006 f911 	bl	8008038 <HAL_Delay>
	for (int i = 0; i < 2000; i++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e7cc      	b.n	8001db8 <_ZN8ICM4260513GyroCalibrateEv+0x10>
	}

	//divide by 2000
	for(int i=0; i<2; i++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	dc1b      	bgt.n	8001e60 <_ZN8ICM4260513GyroCalibrateEv+0xb8>
		gyro_cal[i] = gyro_cal[i] / 2000;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	331c      	adds	r3, #28
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 fa90 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8001e36:	4603      	mov	r3, r0
 8001e38:	ed93 8a00 	vldr	s16, [r3]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	331c      	adds	r3, #28
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fa86 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001e74 <_ZN8ICM4260513GyroCalibrateEv+0xcc>
 8001e50:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e54:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<2; i++)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	e7e0      	b.n	8001e22 <_ZN8ICM4260513GyroCalibrateEv+0x7a>

	gyro_calibration_flag_ = true;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	761a      	strb	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	ecbd 8b02 	vpop	{d8}
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	44fa0000 	.word	0x44fa0000

08001e78 <_ZN8ICM426058ReadGyroEv>:

void  ICM42605::ReadGyro()
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	ed2d 8b02 	vpush	{d8}
 8001e7e:	b09f      	sub	sp, #124	; 0x7c
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	6078      	str	r0, [r7, #4]
	uint8_t gyro_data[6];

	HAL_I2C_Mem_Read(&hi2c1, ICM_ADDR, 0x25, 1, gyro_data, 6, 1000);
 8001e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e88:	9302      	str	r3, [sp, #8]
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2301      	movs	r3, #1
 8001e96:	2225      	movs	r2, #37	; 0x25
 8001e98:	21d2      	movs	r1, #210	; 0xd2
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <_ZN8ICM426058ReadGyroEv+0x19c>)
 8001e9c:	f006 ffae 	bl	8008dfc <HAL_I2C_Mem_Read>

	gyro_raw_data =	{
						((int16_t)(gyro_data[0] << 8 | gyro_data [1])),
						((int16_t)(gyro_data[2] << 8 | gyro_data [3]))
					};
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f103 0034 	add.w	r0, r3, #52	; 0x34
						((int16_t)(gyro_data[0] << 8 | gyro_data [1])),
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b21b      	sxth	r3, r3
	gyro_raw_data =	{
 8001eb4:	83bb      	strh	r3, [r7, #28]
						((int16_t)(gyro_data[2] << 8 | gyro_data [3]))
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b21b      	sxth	r3, r3
	gyro_raw_data =	{
 8001ec4:	83fb      	strh	r3, [r7, #30]
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
					};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ed8:	f000 f9b2 	bl	8002240 <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>

	gyro_ = {
				{(gyro_raw_data[1] - gyro_cal[1]) / 65.5f / 57.296f, 0},
				{0, (gyro_raw_data[0] - gyro_cal[0]) / 65.5f / 57.296f}
			};			//65.5, gyro configuration, from datasheet
 8001edc:	687c      	ldr	r4, [r7, #4]
				{(gyro_raw_data[1] - gyro_cal[1]) / 65.5f / 57.296f, 0},
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3334      	adds	r3, #52	; 0x34
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f9c6 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	331c      	adds	r3, #28
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fa29 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8001f04:	4603      	mov	r3, r0
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001f0e:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002018 <_ZN8ICM426058ReadGyroEv+0x1a0>
 8001f12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f16:	eddf 6a41 	vldr	s13, [pc, #260]	; 800201c <_ZN8ICM426058ReadGyroEv+0x1a4>
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	gyro_ = {
 8001f1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f2e:	2302      	movs	r3, #2
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
 8001f32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f9c5 	bl	80022c6 <_ZNSaIfEC1Ev>
 8001f3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f40:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001f48:	ca06      	ldmia	r2, {r1, r2}
 8001f4a:	f000 f9c8 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	65fb      	str	r3, [r7, #92]	; 0x5c
				{0, (gyro_raw_data[0] - gyro_cal[0]) / 65.5f / 57.296f}
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3334      	adds	r3, #52	; 0x34
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f98b 	bl	8002276 <_ZNSt6vectorIsSaIsEEixEj>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	331c      	adds	r3, #28
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f9ee 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001f84:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002018 <_ZN8ICM426058ReadGyroEv+0x1a0>
 8001f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f8c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800201c <_ZN8ICM426058ReadGyroEv+0x1a4>
 8001f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
	gyro_ = {
 8001f94:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8001f98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f98d 	bl	80022c6 <_ZNSaIfEC1Ev>
 8001fac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb4:	f103 000c 	add.w	r0, r3, #12
 8001fb8:	4613      	mov	r3, r2
 8001fba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001fbe:	ca06      	ldmia	r2, {r1, r2}
 8001fc0:	f000 f98d 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
			};			//65.5, gyro configuration, from datasheet
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f000 f9a2 	bl	8002320 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
	gyro_ = {
 8001fdc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fe0:	3418      	adds	r4, #24
 8001fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe6:	429c      	cmp	r4, r3
 8001fe8:	d004      	beq.n	8001ff4 <_ZN8ICM426058ReadGyroEv+0x17c>
 8001fea:	3c0c      	subs	r4, #12
			};			//65.5, gyro configuration, from datasheet
 8001fec:	4620      	mov	r0, r4
 8001fee:	f000 f8a1 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
	gyro_ = {
 8001ff2:	e7f6      	b.n	8001fe2 <_ZN8ICM426058ReadGyroEv+0x16a>
			};			//65.5, gyro configuration, from datasheet
 8001ff4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f876 	bl	80020ea <_ZNSaIfED1Ev>
 8001ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f871 	bl	80020ea <_ZNSaIfED1Ev>
						//57.296, conversion to radians
}
 8002008:	bf00      	nop
 800200a:	376c      	adds	r7, #108	; 0x6c
 800200c:	46bd      	mov	sp, r7
 800200e:	ecbd 8b02 	vpop	{d8}
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	2000038c 	.word	0x2000038c
 8002018:	42830000 	.word	0x42830000
 800201c:	42652f1b 	.word	0x42652f1b

08002020 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9a4 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f9ac 	bl	800238e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f9b4 	bl	80023b6 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEED1Ev>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	109b      	asrs	r3, r3, #2
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev+0x38>)
 8002072:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002076:	461a      	mov	r2, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f9a7 	bl	80023cc <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
      }
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fc73 	bl	800196c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implD1Ev>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	aaaaaaab 	.word	0xaaaaaaab

08002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002094:	b5b0      	push	{r4, r5, r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681c      	ldr	r4, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f9a3 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80020ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80020ae:	461a      	mov	r2, r3
 80020b0:	4629      	mov	r1, r5
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 f9a8 	bl	8002408 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ffcc 	bl	8002058 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EED1Ev>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bdb0      	pop	{r4, r5, r7, pc}

080020ca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8f7 	bl	80022c6 <_ZNSaIfEC1Ev>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f9a2 	bl	8002424 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZNSaIfED1Ev>:
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f9aa 	bl	800244c <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800211a:	461a      	mov	r2, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f9a0 	bl	8002462 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc47 	bl	80019b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681c      	ldr	r4, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f99e 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800214c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800214e:	461a      	mov	r2, r3
 8002150:	4629      	mov	r1, r5
 8002152:	4620      	mov	r0, r4
 8002154:	f000 f9a3 	bl	800249e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ffd1 	bl	8002102 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bdb0      	pop	{r4, r5, r7, pc}

0800216a <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9a1 	bl	80024ba <_ZNSaIsEC1Ev>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f9a9 	bl	80024d2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>
	{ }
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZNSaIsED1Ev>:
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f9b1 	bl	80024fa <_ZN9__gnu_cxx13new_allocatorIsED1Ev>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_ZNSt12_Vector_baseIsSaIsEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 80021ba:	461a      	mov	r2, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f9a7 	bl	8002510 <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
      }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fc1d 	bl	8001a04 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZNSt6vectorIsSaIsEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f9a5 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 80021ec:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021ee:	461a      	mov	r2, r3
 80021f0:	4629      	mov	r1, r5
 80021f2:	4620      	mov	r0, r4
 80021f4:	f000 f9aa 	bl	800254c <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
      }
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ffd1 	bl	80021a2 <_ZNSt12_Vector_baseIsSaIsEED1Ev>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bdb0      	pop	{r4, r5, r7, pc}

0800220a <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 800220a:	b5b0      	push	{r4, r5, r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f9a4 	bl	8002568 <_ZNKSt16initializer_listIfE5beginEv>
 8002220:	4604      	mov	r4, r0
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f9ab 	bl	8002580 <_ZNKSt16initializer_listIfE3endEv>
 800222a:	4602      	mov	r2, r0
 800222c:	462b      	mov	r3, r5
 800222e:	4621      	mov	r1, r4
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f9b7 	bl	80025a4 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8002236:	68fb      	ldr	r3, [r7, #12]
      }
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bdb0      	pop	{r4, r5, r7, pc}

08002240 <_ZNSt6vectorIsSaIsEEaSESt16initializer_listIsE>:
      operator=(initializer_list<value_type> __l)
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fa40 	bl	80026d6 <_ZNKSt16initializer_listIsE5beginEv>
 8002256:	4604      	mov	r4, r0
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fa47 	bl	80026ee <_ZNKSt16initializer_listIsE3endEv>
 8002260:	4602      	mov	r2, r0
 8002262:	462b      	mov	r3, r5
 8002264:	4621      	mov	r1, r4
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fa53 	bl	8002712 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag>
	return *this;
 800226c:	68fb      	ldr	r3, [r7, #12]
      }
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bdb0      	pop	{r4, r5, r7, pc}

08002276 <_ZNSt6vectorIsSaIsEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
      }
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f968 	bl	8000574 <__aeabi_i2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	ec43 2b10 	vmov	d0, r2, r3
 80022ac:	f00f fdf2 	bl	8011e94 <sqrt>
 80022b0:	eeb0 7a40 	vmov.f32	s14, s0
 80022b4:	eef0 7a60 	vmov.f32	s15, s1
 80022b8:	eeb0 0a47 	vmov.f32	s0, s14
 80022bc:	eef0 0a67 	vmov.f32	s1, s15
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fab8 	bl	8002844 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 80022de:	b5b0      	push	{r4, r5, r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	1d38      	adds	r0, r7, #4
 80022e8:	e880 0006 	stmia.w	r0, {r1, r2}
 80022ec:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fab1 	bl	800285a <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f934 	bl	8002568 <_ZNKSt16initializer_listIfE5beginEv>
 8002300:	4604      	mov	r4, r0
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f93b 	bl	8002580 <_ZNKSt16initializer_listIfE3endEv>
 800230a:	4602      	mov	r2, r0
 800230c:	462b      	mov	r3, r5
 800230e:	4621      	mov	r1, r4
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fab1 	bl	8002878 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}

08002320 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fada 	bl	80028ea <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8002336:	4604      	mov	r4, r0
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fae1 	bl	8002902 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>
 8002340:	4602      	mov	r2, r0
 8002342:	462b      	mov	r3, r5
 8002344:	4621      	mov	r1, r4
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 faf0 	bl	800292c <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 800234c:	68fb      	ldr	r3, [r7, #12]
      }
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}

08002356 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
      }
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>:
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fb76 	bl	8002a70 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1Ev>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
	{ }
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	if (__p)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fb4e 	bl	8002a86 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE10deallocateERS3_PS2_j>
      }
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fb44 	bl	8002aa4 <_ZSt8_DestroyIPSt6vectorIfSaIfEEEvT_S4_>
    }
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
	{ }
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	if (__p)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fb1f 	bl	8002abe <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fb15 	bl	8002adc <_ZSt8_DestroyIPfEvT_S1_>
    }
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZNSaIsEC1Ev>:
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fb17 	bl	8002af6 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
	{ }
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_ZN9__gnu_cxx13new_allocatorIsED1Ev>:
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>:
      _M_deallocate(pointer __p, size_t __n)
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	if (__p)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 faef 	bl	8002b0c <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fae5 	bl	8002b2a <_ZSt8_DestroyIPsEvT_S1_>
    }
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ffed 	bl	8002568 <_ZNKSt16initializer_listIfE5beginEv>
 800258e:	4604      	mov	r4, r0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fad7 	bl	8002b44 <_ZNKSt16initializer_listIfE4sizeEv>
 8002596:	4603      	mov	r3, r0
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4423      	add	r3, r4
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}

080025a4 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 80025a4:	b5b0      	push	{r4, r5, r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f000 fad1 	bl	8002b5c <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80025ba:	4603      	mov	r3, r0
 80025bc:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fae0 	bl	8002b84 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bf8c      	ite	hi
 80025cc:	2301      	movhi	r3, #1
 80025ce:	2300      	movls	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d038      	beq.n	8002648 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff55 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80025de:	4603      	mov	r3, r0
 80025e0:	4619      	mov	r1, r3
 80025e2:	69f8      	ldr	r0, [r7, #28]
 80025e4:	f000 fade 	bl	8002ba4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	69f9      	ldr	r1, [r7, #28]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fb00 	bl	8002bf4 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>
 80025f4:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681c      	ldr	r4, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff41 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002606:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002608:	461a      	mov	r2, r3
 800260a:	4629      	mov	r1, r5
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff ff46 	bl	800249e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff ff1c 	bl	8002462 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	    this->_M_impl._M_start = __tmp;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	441a      	add	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 8002646:	e042      	b.n	80026ce <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 faef 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800264e:	4602      	mov	r2, r0
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4293      	cmp	r3, r2
 8002654:	bf94      	ite	ls
 8002656:	2301      	movls	r3, #1
 8002658:	2300      	movhi	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00c      	beq.n	800267a <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f000 fb10 	bl	8002c8e <_ZSt4copyIPKfPfET0_T_S4_S3_>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 faea 	bl	8002c4c <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
      }
 8002678:	e029      	b.n	80026ce <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fad4 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002684:	4602      	mov	r2, r0
 8002686:	f107 0310 	add.w	r3, r7, #16
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fb16 	bl	8002cbe <_ZSt7advanceIPKfjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002692:	6939      	ldr	r1, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68b8      	ldr	r0, [r7, #8]
 800269c:	f000 faf7 	bl	8002c8e <_ZSt4copyIPKfPfET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fac3 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 80026ae:	693c      	ldr	r4, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fee6 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80026bc:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 80026be:	462a      	mov	r2, r5
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4620      	mov	r0, r4
 80026c4:	f000 fb0e 	bl	8002ce4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 80026c8:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	605a      	str	r2, [r3, #4]
      }
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}

080026d6 <_ZNKSt16initializer_listIsE5beginEv>:
      begin() const noexcept { return _M_array; }
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZNKSt16initializer_listIsE3endEv>:
      end() const noexcept { return begin() + size(); }
 80026ee:	b590      	push	{r4, r7, lr}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffed 	bl	80026d6 <_ZNKSt16initializer_listIsE5beginEv>
 80026fc:	4604      	mov	r4, r0
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fb01 	bl	8002d06 <_ZNKSt16initializer_listIsE4sizeEv>
 8002704:	4603      	mov	r3, r0
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4423      	add	r3, r4
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}

08002712 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag>:
      vector<_Tp, _Alloc>::
 8002712:	b5b0      	push	{r4, r5, r7, lr}
 8002714:	b088      	sub	sp, #32
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	703b      	strb	r3, [r7, #0]
	const size_type __len = std::distance(__first, __last);
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f000 fafb 	bl	8002d1e <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002728:	4603      	mov	r3, r0
 800272a:	61fb      	str	r3, [r7, #28]
	if (__len > capacity())
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fb0a 	bl	8002d46 <_ZNKSt6vectorIsSaIsEE8capacityEv>
 8002732:	4602      	mov	r2, r0
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4293      	cmp	r3, r2
 8002738:	bf8c      	ite	hi
 800273a:	2301      	movhi	r3, #1
 800273c:	2300      	movls	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d038      	beq.n	80027b6 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0xa4>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fef5 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	69f8      	ldr	r0, [r7, #28]
 8002752:	f000 fb09 	bl	8002d68 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fb2b 	bl	8002db8 <_ZNSt6vectorIsSaIsEE20_M_allocate_and_copyIPKsEEPsjT_S6_>
 8002762:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681c      	ldr	r4, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fee1 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002774:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002776:	461a      	mov	r2, r3
 8002778:	4629      	mov	r1, r5
 800277a:	4620      	mov	r0, r4
 800277c:	f7ff fee6 	bl	800254c <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	105b      	asrs	r3, r3, #1
	    _M_deallocate(this->_M_impl._M_start,
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff febc 	bl	8002510 <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
	    this->_M_impl._M_start = __tmp;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]
      }
 80027b4:	e042      	b.n	800283c <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fb1a 	bl	8002df0 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 80027bc:	4602      	mov	r2, r0
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	68b8      	ldr	r0, [r7, #8]
 80027d8:	f000 fb3b 	bl	8002e52 <_ZSt4copyIPKsPsET0_T_S4_S3_>
 80027dc:	4603      	mov	r3, r0
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fb15 	bl	8002e10 <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs>
      }
 80027e6:	e029      	b.n	800283c <_ZNSt6vectorIsSaIsEE13_M_assign_auxIPKsEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 faff 	bl	8002df0 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fb41 	bl	8002e82 <_ZSt7advanceIPKsjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68b8      	ldr	r0, [r7, #8]
 800280a:	f000 fb22 	bl	8002e52 <_ZSt4copyIPKsPsET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 faee 	bl	8002df0 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8002814:	4602      	mov	r2, r0
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 800281c:	693c      	ldr	r4, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fe86 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800282a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 800282c:	462a      	mov	r2, r5
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4620      	mov	r0, r4
 8002832:	f000 fb39 	bl	8002ea8 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>
 8002836:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
      }
 800283c:	bf00      	nop
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bdb0      	pop	{r4, r5, r7, pc}

08002844 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fb2e 	bl	8002eca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f000 f967 	bl	8002b5c <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800288e:	4603      	mov	r3, r0
 8002890:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8002892:	68fc      	ldr	r4, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fdf6 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800289c:	4603      	mov	r3, r0
 800289e:	4619      	mov	r1, r3
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f000 f97f 	bl	8002ba4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4619      	mov	r1, r3
 80028aa:	4620      	mov	r0, r4
 80028ac:	f000 fb1f 	bl	8002eee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80028b0:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fddc 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80028d0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80028d2:	4622      	mov	r2, r4
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f000 fa04 	bl	8002ce4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 80028dc:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	605a      	str	r2, [r3, #4]
	}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}

080028ea <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffed 	bl	80028ea <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8002910:	4604      	mov	r4, r0
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 faff 	bl	8002f16 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE4sizeEv>
 8002918:	4602      	mov	r2, r0
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4423      	add	r3, r4
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}

0800292c <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
      vector<_Tp, _Alloc>::
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	703b      	strb	r3, [r7, #0]
	const size_type __len = std::distance(__first, __last);
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68b8      	ldr	r0, [r7, #8]
 800293e:	f000 faf6 	bl	8002f2e <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8002942:	4603      	mov	r3, r0
 8002944:	61fb      	str	r3, [r7, #28]
	if (__len > capacity())
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fb06 	bl	8002f58 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>
 800294c:	4602      	mov	r2, r0
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4293      	cmp	r3, r2
 8002952:	bf8c      	ite	hi
 8002954:	2301      	movhi	r3, #1
 8002956:	2300      	movls	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03e      	beq.n	80029dc <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xb0>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fd46 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002966:	4603      	mov	r3, r0
 8002968:	4619      	mov	r1, r3
 800296a:	69f8      	ldr	r0, [r7, #28]
 800296c:	f000 fb0a 	bl	8002f84 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	69f9      	ldr	r1, [r7, #28]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fb2c 	bl	8002fd4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>
 800297c:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681c      	ldr	r4, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fd32 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 800298e:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002990:	461a      	mov	r2, r3
 8002992:	4629      	mov	r1, r5
 8002994:	4620      	mov	r0, r4
 8002996:	f7ff fd37 	bl	8002408 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	109b      	asrs	r3, r3, #2
 80029ac:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x140>)
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
	    _M_deallocate(this->_M_impl._M_start,
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff fd0a 	bl	80023cc <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
	    this->_M_impl._M_start = __tmp;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6819      	ldr	r1, [r3, #0]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	18ca      	adds	r2, r1, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	609a      	str	r2, [r3, #8]
      }
 80029da:	e042      	b.n	8002a62 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x136>
	else if (size() >= __len)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fb15 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	bf94      	ite	ls
 80029ea:	2301      	movls	r3, #1
 80029ec:	2300      	movhi	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xe2>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68b8      	ldr	r0, [r7, #8]
 80029fe:	f000 fb41 	bl	8003084 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4619      	mov	r1, r3
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fb16 	bl	8003038 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 8002a0c:	e029      	b.n	8002a62 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x136>
	    _ForwardIterator __mid = __first;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fafa 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f107 0310 	add.w	r3, r7, #16
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fb47 	bl	80030b4 <_ZSt7advanceIPKSt6vectorIfSaIfEEjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002a26:	6939      	ldr	r1, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68b8      	ldr	r0, [r7, #8]
 8002a30:	f000 fb28 	bl	8003084 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fae9 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8002a42:	693c      	ldr	r4, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fcd1 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002a50:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8002a52:	462a      	mov	r2, r5
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4620      	mov	r0, r4
 8002a58:	f000 fb3f 	bl	80030da <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8002a5c:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
      }
 8002a62:	bf00      	nop
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	aaaaaaab 	.word	0xaaaaaaab

08002a70 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1Ev>:
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE10deallocateERS3_PS2_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fb30 	bl	80030fc <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE10deallocateEPS3_j>
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_ZSt8_DestroyIPSt6vectorIfSaIfEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fb30 	bl	8003116 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_>
    }
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb39 	bl	8003146 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fb39 	bl	8003160 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_ZN9__gnu_cxx13new_allocatorIsEC1Ev>:
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fb2a 	bl	8003176 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_ZSt8_DestroyIPsEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fb2a 	bl	8003190 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>
    }
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002b66:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fb1b 	bl	80031a6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002b70:	462a      	mov	r2, r5
 8002b72:	6839      	ldr	r1, [r7, #0]
 8002b74:	4620      	mov	r0, r4
 8002b76:	f000 fb20 	bl	80031ba <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8002b7a:	4603      	mov	r3, r0
    }
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdb0      	pop	{r4, r5, r7, pc}

08002b84 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	109b      	asrs	r3, r3, #2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002bae:	f107 030c 	add.w	r3, r7, #12
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fb2a 	bl	800320e <_ZNSaIfEC1ERKS_>
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fb0b 	bl	80031da <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	bf8c      	ite	hi
 8002bcc:	2301      	movhi	r3, #1
 8002bce:	2300      	movls	r3, #0
 8002bd0:	b2dc      	uxtb	r4, r3
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fa87 	bl	80020ea <_ZNSaIfED1Ev>
 8002bdc:	2c00      	cmp	r4, #0
 8002bde:	d002      	beq.n	8002be6 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8002be2:	f00f f94b 	bl	8011e7c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8002be6:	687b      	ldr	r3, [r7, #4]
      }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd90      	pop	{r4, r7, pc}
 8002bf0:	08016b80 	.word	0x08016b80

08002bf4 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f971 	bl	8002eee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8002c0c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc39 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002c16:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f861 	bl	8002ce4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8002c22:	697b      	ldr	r3, [r7, #20]
	}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	109b      	asrs	r3, r3, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	109b      	asrs	r3, r3, #2
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fc0a 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002c74:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002c76:	461a      	mov	r2, r3
 8002c78:	4621      	mov	r1, r4
 8002c7a:	6838      	ldr	r0, [r7, #0]
 8002c7c:	f7ff fc0f 	bl	800249e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fac5 	bl	800322a <_ZSt12__miter_baseIPKfET_S2_>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	68b8      	ldr	r0, [r7, #8]
 8002ca4:	f000 fac1 	bl	800322a <_ZSt12__miter_baseIPKfET_S2_>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f000 fac6 	bl	8003240 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8002cb4:	4603      	mov	r3, r0
    }
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd90      	pop	{r4, r7, pc}

08002cbe <_ZSt7advanceIPKfjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8002cbe:	b590      	push	{r4, r7, lr}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa6a 	bl	80031a6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fad5 	bl	8003286 <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>
    }
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}

08002ce4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	68b9      	ldr	r1, [r7, #8]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fad8 	bl	80032ac <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZNKSt16initializer_listIsE4sizeEv>:
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_ZSt8distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002d1e:	b5b0      	push	{r4, r5, r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002d28:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 facf 	bl	80032d0 <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002d32:	462a      	mov	r2, r5
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4620      	mov	r0, r4
 8002d38:	f000 fad4 	bl	80032e4 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8002d3c:	4603      	mov	r3, r0
    }
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}

08002d46 <_ZNKSt6vectorIsSaIsEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	105b      	asrs	r3, r3, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fadd 	bl	8003338 <_ZNSaIsEC1ERKS_>
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fabe 	bl	8003304 <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	bf8c      	ite	hi
 8002d90:	2301      	movhi	r3, #1
 8002d92:	2300      	movls	r3, #0
 8002d94:	b2dc      	uxtb	r4, r3
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f9f5 	bl	800218a <_ZNSaIsED1Ev>
 8002da0:	2c00      	cmp	r4, #0
 8002da2:	d002      	beq.n	8002daa <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8002da4:	4803      	ldr	r0, [pc, #12]	; (8002db4 <_ZNSt6vectorIsSaIsEE17_S_check_init_lenEjRKS0_+0x4c>)
 8002da6:	f00f f869 	bl	8011e7c <_ZSt20__throw_length_errorPKc>
	return __n;
 8002daa:	687b      	ldr	r3, [r7, #4]
      }
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	08016b80 	.word	0x08016b80

08002db8 <_ZNSt6vectorIsSaIsEE20_M_allocate_and_copyIPKsEEPsjT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fac2 	bl	8003354 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 8002dd0:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fbae 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002dda:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f861 	bl	8002ea8 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8002de6:	697b      	ldr	r3, [r7, #20]
	}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_ZNKSt6vectorIsSaIsEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	105b      	asrs	r3, r3, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	105b      	asrs	r3, r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <_ZNSt6vectorIsSaIsEE15_M_erase_at_endEPs+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fb7f 	bl	8002536 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8002e38:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	f7ff fb84 	bl	800254c <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	605a      	str	r2, [r3, #4]
      }
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd90      	pop	{r4, r7, pc}

08002e52 <_ZSt4copyIPKsPsET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8002e52:	b590      	push	{r4, r7, lr}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa8c 	bl	800337c <_ZSt12__miter_baseIPKsET_S2_>
 8002e64:	4604      	mov	r4, r0
 8002e66:	68b8      	ldr	r0, [r7, #8]
 8002e68:	f000 fa88 	bl	800337c <_ZSt12__miter_baseIPKsET_S2_>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 fa8d 	bl	8003392 <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>
 8002e78:	4603      	mov	r3, r0
    }
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}

08002e82 <_ZSt7advanceIPKsjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8002e82:	b590      	push	{r4, r7, lr}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fa1d 	bl	80032d0 <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8002e96:	4622      	mov	r2, r4
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa9c 	bl	80033d8 <_ZSt9__advanceIPKsiEvRT_T0_St26random_access_iterator_tag>
    }
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <_ZSt22__uninitialized_copy_aIPKsPssET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa9f 	bl	80033fe <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f999 	bl	800320e <_ZNSaIfEC1ERKS_>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff faa0 	bl	8002424 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fa8d 	bl	8003422 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	e000      	b.n	8002f0e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8002f0c:	2300      	movs	r3, #0
      }
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE4sizeEv>:
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
    distance(_InputIterator __first, _InputIterator __last)
 8002f2e:	b5b0      	push	{r4, r5, r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8002f38:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa7f 	bl	8003440 <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 8002f42:	462a      	mov	r2, r5
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	4620      	mov	r0, r4
 8002f48:	f000 fa84 	bl	8003454 <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 8002f4c:	4603      	mov	r3, r0
    }
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002f58 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	109b      	asrs	r3, r3, #2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv+0x28>)
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	aaaaaaab 	.word	0xaaaaaaab

08002f84 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002f8e:	f107 030c 	add.w	r3, r7, #12
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa8f 	bl	80034b8 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fa6e 	bl	8003480 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf8c      	ite	hi
 8002fac:	2301      	movhi	r3, #1
 8002fae:	2300      	movls	r3, #0
 8002fb0:	b2dc      	uxtb	r4, r3
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f842 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8002fbc:	2c00      	cmp	r4, #0
 8002fbe:	d002      	beq.n	8002fc6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_+0x42>
	  __throw_length_error(
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_+0x4c>)
 8002fc2:	f00e ff5b 	bl	8011e7c <_ZSt20__throw_length_errorPKc>
	return __n;
 8002fc6:	687b      	ldr	r3, [r7, #4]
      }
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	08016b80 	.word	0x08016b80

08002fd4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIPKS1_EEPS1_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa74 	bl	80034d4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8002fec:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9fe 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8002ff6:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f86c 	bl	80030da <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
	      return __result;
 8003002:	697b      	ldr	r3, [r7, #20]
	}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	109b      	asrs	r3, r3, #2
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv+0x28>)
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab

08003038 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	109b      	asrs	r3, r3, #2
 800304c:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_+0x48>)
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_+0x40>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f9c6 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8003066:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003068:	461a      	mov	r2, r3
 800306a:	4621      	mov	r1, r4
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	f7ff f9cb 	bl	8002408 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	605a      	str	r2, [r3, #4]
      }
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	aaaaaaab 	.word	0xaaaaaaab

08003084 <_ZSt4copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>:
    copy(_II __first, _II __last, _OI __result)
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fa33 	bl	80034fc <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>
 8003096:	4604      	mov	r4, r0
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f000 fa2f 	bl	80034fc <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>
 800309e:	4603      	mov	r3, r0
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 fa34 	bl	8003512 <_ZSt14__copy_move_a2ILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 80030aa:	4603      	mov	r3, r0
    }
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd90      	pop	{r4, r7, pc}

080030b4 <_ZSt7advanceIPKSt6vectorIfSaIfEEjEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9bc 	bl	8003440 <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
 80030c8:	4622      	mov	r2, r4
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fa43 	bl	8003558 <_ZSt9__advanceIPKSt6vectorIfSaIfEEiEvRT_T0_St26random_access_iterator_tag>
    }
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fa49 	bl	8003584 <_ZSt18uninitialized_copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f00e fea1 	bl	8011e50 <_ZdlPv>
      }
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d00a      	beq.n	800313e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa3d 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800312e:	4603      	mov	r3, r0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fa44 	bl	80035be <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>
	  for (; __first != __last; ++__first)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	330c      	adds	r3, #12
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	e7f0      	b.n	8003120 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIfSaIfEEEEvT_S6_+0xa>
	}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003152:	68b8      	ldr	r0, [r7, #8]
 8003154:	f00e fe7c 	bl	8011e50 <_ZdlPv>
      }
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <_ZN9__gnu_cxx13new_allocatorIsE10deallocateEPsj>:
      deallocate(pointer __p, size_type)
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	f00e fe64 	bl	8011e50 <_ZdlPv>
      }
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>:
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	109b      	asrs	r3, r3, #2
    }
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80031e2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80031e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9f3 	bl	80035d4 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 80031ee:	4603      	mov	r3, r0
 80031f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80031f2:	f107 0208 	add.w	r2, r7, #8
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f9f5 	bl	80035ec <_ZSt3minIjERKT_S2_S2_>
 8003202:	4603      	mov	r3, r0
 8003204:	681b      	ldr	r3, [r3, #0]
      }
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9fa 	bl	8003614 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZSt12__miter_baseIPKfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f9ed 	bl	800362c <_ZSt12__niter_baseIPKfET_S2_>
 8003252:	4604      	mov	r4, r0
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f000 f9e9 	bl	800362c <_ZSt12__niter_baseIPKfET_S2_>
 800325a:	4605      	mov	r5, r0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f9ef 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4629      	mov	r1, r5
 800326a:	4620      	mov	r0, r4
 800326c:	f000 f9f4 	bl	8003658 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003270:	4602      	mov	r2, r0
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa00 	bl	800367c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800327c:	4603      	mov	r3, r0
    }
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bdb0      	pop	{r4, r5, r7, pc}

08003286 <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]
    }
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f9e7 	bl	8003694 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 80032c6:	4603      	mov	r3, r0
    }
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZSt19__iterator_categoryIPKsENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZSt10__distanceIPKsENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	105b      	asrs	r3, r3, #1
    }
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800330c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003310:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f9ce 	bl	80036b4 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 8003318:	4603      	mov	r3, r0
 800331a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800331c:	f107 0208 	add.w	r2, r7, #8
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f960 	bl	80035ec <_ZSt3minIjERKT_S2_S2_>
 800332c:	4603      	mov	r3, r0
 800332e:	681b      	ldr	r3, [r3, #0]
      }
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZNSaIsEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f9c1 	bl	80036cc <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d006      	beq.n	8003372 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x1e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6839      	ldr	r1, [r7, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f9bb 	bl	80036e4 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 800336e:	4603      	mov	r3, r0
 8003370:	e000      	b.n	8003374 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x20>
 8003372:	2300      	movs	r3, #0
      }
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZSt12__miter_baseIPKsET_S2_>:
    __miter_base(_Iterator __it)
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <_ZSt14__copy_move_a2ILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003392:	b5b0      	push	{r4, r5, r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f9af 	bl	8003702 <_ZSt12__niter_baseIPKsET_S2_>
 80033a4:	4604      	mov	r4, r0
 80033a6:	68b8      	ldr	r0, [r7, #8]
 80033a8:	f000 f9ab 	bl	8003702 <_ZSt12__niter_baseIPKsET_S2_>
 80033ac:	4605      	mov	r5, r0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f9b1 	bl	8003718 <_ZSt12__niter_baseIPsET_S1_>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4629      	mov	r1, r5
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f9b6 	bl	800372e <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>
 80033c2:	4602      	mov	r2, r0
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f9c2 	bl	8003752 <_ZSt12__niter_wrapIPsET_RKS1_S1_>
 80033ce:	4603      	mov	r3, r0
    }
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}

080033d8 <_ZSt9__advanceIPKsiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	713a      	strb	r2, [r7, #4]
	__i += __n;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	601a      	str	r2, [r3, #0]
    }
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_ZSt18uninitialized_copyIPKsPsET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9a9 	bl	800376a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>
 8003418:	4603      	mov	r3, r0
    }
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800342c:	2200      	movs	r2, #0
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f9aa 	bl	800378a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003436:	4603      	mov	r3, r0
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZSt19__iterator_categoryIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
    __iterator_category(const _Iter&)
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	109b      	asrs	r3, r3, #2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <_ZSt10__distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag+0x28>)
 800346a:	fb02 f303 	mul.w	r3, r2, r3
    }
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	aaaaaaab 	.word	0xaaaaaaab

08003480 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800348a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f99a 	bl	80037c6 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8max_sizeERKS3_>
 8003492:	4603      	mov	r3, r0
 8003494:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003496:	f107 0208 	add.w	r2, r7, #8
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4611      	mov	r1, r2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8a3 	bl	80035ec <_ZSt3minIjERKT_S2_S2_>
 80034a6:	4603      	mov	r3, r0
 80034a8:	681b      	ldr	r3, [r3, #0]
      }
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	0aaaaaaa 	.word	0x0aaaaaaa

080034b8 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f98a 	bl	80037de <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1ERKS4_>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj+0x1e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f984 	bl	80037f6 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8allocateERS3_j>
 80034ee:	4603      	mov	r3, r0
 80034f0:	e000      	b.n	80034f4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj+0x20>
 80034f2:	2300      	movs	r3, #0
      }
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZSt12__miter_baseIPKSt6vectorIfSaIfEEET_S5_>:
    __miter_base(_Iterator __it)
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_ZSt14__copy_move_a2ILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003512:	b5b0      	push	{r4, r5, r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f978 	bl	8003814 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>
 8003524:	4604      	mov	r4, r0
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f000 f974 	bl	8003814 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>
 800352c:	4605      	mov	r5, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f97a 	bl	800382a <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	4629      	mov	r1, r5
 800353c:	4620      	mov	r0, r4
 800353e:	f000 f97f 	bl	8003840 <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 8003542:	4602      	mov	r2, r0
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f98b 	bl	8003864 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>
 800354e:	4603      	mov	r3, r0
    }
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bdb0      	pop	{r4, r5, r7, pc}

08003558 <_ZSt9__advanceIPKSt6vectorIfSaIfEEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6819      	ldr	r1, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	18ca      	adds	r2, r1, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]
    }
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <_ZSt18uninitialized_copyIPKSt6vectorIfSaIfEEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003590:	2301      	movs	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f96f 	bl	800387c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_>
 800359e:	4603      	mov	r3, r0
    }
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fdb4 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f96d 	bl	80038bc <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d201      	bcs.n	8003606 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	e000      	b.n	8003608 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003606:	687b      	ldr	r3, [r7, #4]
    }
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
    { return __it; }
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f931 	bl	80038d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003672:	4603      	mov	r3, r0
    }
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f7ff faf2 	bl	8002c8e <_ZSt4copyIPKfPfET0_T_S4_S3_>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f926 	bl	800390e <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN9__gnu_cxx13new_allocatorIsEC1ERKS1_>:
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80036ee:	2200      	movs	r2, #0
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f917 	bl	8003926 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <_ZSt12__niter_baseIPKsET_S2_>:
    __niter_base(_Iterator __it)
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
    { return __it; }
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZSt12__niter_baseIPsET_S1_>:
    __niter_base(_Iterator __it)
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZSt13__copy_move_aILb0EPKsPsET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f90d 	bl	8003962 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>
 8003748:	4603      	mov	r3, r0
    }
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZSt12__niter_wrapIPsET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKsPsEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fb69 	bl	8002e52 <_ZSt4copyIPKsPsET0_T_S4_S3_>
 8003780:	4603      	mov	r3, r0
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f890 	bl	80038bc <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf8c      	ite	hi
 80037a4:	2301      	movhi	r3, #1
 80037a6:	2300      	movls	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80037ae:	f00e fb62 	bl	8011e76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f00e fb4c 	bl	8011e54 <_Znwj>
 80037bc:	4603      	mov	r3, r0
      }
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a) noexcept
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8e4 	bl	800399c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003800:	2200      	movs	r2, #0
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8d7 	bl	80039b8 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEEET_S5_>:
    __niter_base(_Iterator __it)
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>:
    __niter_base(_Iterator __it)
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68b9      	ldr	r1, [r7, #8]
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f8d1 	bl	80039fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_>
 800385a:	4603      	mov	r3, r0
    }
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	429a      	cmp	r2, r3
 8003892:	d00e      	beq.n	80038b2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003894:	6978      	ldr	r0, [r7, #20]
 8003896:	f7ff fe87 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800389a:	4603      	mov	r3, r0
 800389c:	68f9      	ldr	r1, [r7, #12]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 f8d2 	bl	8003a48 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	330c      	adds	r3, #12
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	330c      	adds	r3, #12
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e7ec      	b.n	800388c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt6vectorIfSaIfEEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 80038b2:	697b      	ldr	r3, [r7, #20]
	}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80038c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	109b      	asrs	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f00e fd2b 	bl	8012354 <memmove>
	  return __result + _Num;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4413      	add	r3, r2
	}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003916:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff ffeb 	bl	800390e <_ZNK9__gnu_cxx13new_allocatorIsE8max_sizeEv>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4293      	cmp	r3, r2
 800393e:	bf8c      	ite	hi
 8003940:	2301      	movhi	r3, #1
 8003942:	2300      	movls	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <_ZN9__gnu_cxx13new_allocatorIsE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800394a:	f00e fa94 	bl	8011e76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f00e fa7e 	bl	8011e54 <_Znwj>
 8003958:	4603      	mov	r3, r0
      }
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	105b      	asrs	r3, r3, #1
 8003976:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIsEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	461a      	mov	r2, r3
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f00e fce4 	bl	8012354 <memmove>
	  return __result + _Num;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	4413      	add	r3, r2
	}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv+0x18>)
      }
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	0aaaaaaa 	.word	0x0aaaaaaa

080039b8 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ffe9 	bl	800399c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8max_sizeEv>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4293      	cmp	r3, r2
 80039d0:	bf8c      	ite	hi
 80039d2:	2301      	movhi	r3, #1
 80039d4:	2300      	movls	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <_ZN9__gnu_cxx13new_allocatorISt6vectorIfSaIfEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80039dc:	f00e fa4b 	bl	8011e76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f00e fa32 	bl	8011e54 <_Znwj>
 80039f0:	4603      	mov	r3, r0
      }
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	109b      	asrs	r3, r3, #2
 8003a10:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x48>)
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dd0d      	ble.n	8003a3a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x3e>
	      *__result = *__first;
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f838 	bl	8003a96 <_ZNSt6vectorIfSaIfEEaSERKS1_>
	      ++__first;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e7ee      	b.n	8003a18 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt6vectorIfSaIfEEPS5_EET0_T_SA_S9_+0x1c>
	  return __result;
 8003a3a:	687b      	ldr	r3, [r7, #4]
	}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	aaaaaaab 	.word	0xaaaaaaab

08003a48 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8003a52:	6838      	ldr	r0, [r7, #0]
 8003a54:	f000 f914 	bl	8003c80 <_ZSt7forwardIRKSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	200c      	movs	r0, #12
 8003a60:	f7fd ff68 	bl	8001934 <_ZnwjPv>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4621      	mov	r1, r4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f914 	bl	8003c96 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8003a76:	b480      	push	{r7}
 8003a78:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8003a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f000 80e6 	beq.w	8003c76 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e0>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8003aaa:	f7ff ffe4 	bl	8003a76 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d043      	beq.n	8003b3c <_ZNSt6vectorIfSaIfEEaSERKS1_+0xa6>
	      if (!_Alloc_traits::_S_always_equal()
 8003ab4:	f7ff ffe7 	bl	8003a86 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fcde 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003acc:	4604      	mov	r4, r0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f91d 	bl	8003d10 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 f923 	bl	8003d26 <_ZStneRKSaIfES1_>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <_ZNSt6vectorIfSaIfEEaSERKS1_+0x54>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <_ZNSt6vectorIfSaIfEEaSERKS1_+0x56>
 8003aea:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x8a>
		  this->clear();
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f924 	bl	8003d3e <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f7fe fcaa 	bl	8002462 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fcb0 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f8ef 	bl	8003d10 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4619      	mov	r1, r3
 8003b36:	4620      	mov	r0, r4
 8003b38:	f000 f90f 	bl	8003d5a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f7ff f875 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003b42:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff f81d 	bl	8002b84 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	bf8c      	ite	hi
 8003b52:	2301      	movhi	r3, #1
 8003b54:	2300      	movls	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d032      	beq.n	8003bc2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x12c>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8003b5c:	6838      	ldr	r0, [r7, #0]
 8003b5e:	f000 f90a 	bl	8003d76 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003b62:	4604      	mov	r4, r0
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f000 f91a 	bl	8003d9e <_ZNKSt6vectorIfSaIfEE3endEv>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f928 	bl	8003dc6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8003b76:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681c      	ldr	r4, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fc80 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b88:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7fe fc85 	bl	800249e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7fe fc5b 	bl	8002462 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	e052      	b.n	8003c68 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d2>
	  else if (size() >= __xlen)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff f832 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	bf94      	ite	ls
 8003bd0:	2301      	movls	r3, #1
 8003bd2:	2300      	movhi	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d020      	beq.n	8003c1c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x186>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	f000 f8cb 	bl	8003d76 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003be0:	4604      	mov	r4, r0
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f000 f8db 	bl	8003d9e <_ZNKSt6vectorIfSaIfEE3endEv>
 8003be8:	4605      	mov	r5, r0
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f907 	bl	8003dfe <_ZNSt6vectorIfSaIfEE5beginEv>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f911 	bl	8003e1e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f925 	bl	8003e4e <_ZNSt6vectorIfSaIfEE3endEv>
 8003c04:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fc3d 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003c0e:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8003c10:	461a      	mov	r2, r3
 8003c12:	4629      	mov	r1, r5
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 f92b 	bl	8003e70 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 8003c1a:	e025      	b.n	8003c68 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d2>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681d      	ldr	r5, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681c      	ldr	r4, [r3, #0]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f801 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	18e1      	adds	r1, r4, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4628      	mov	r0, r5
 8003c38:	f000 f928 	bl	8003e8c <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fe fff3 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003c46:	4603      	mov	r3, r0
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fc16 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003c5c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8003c5e:	4632      	mov	r2, r6
 8003c60:	4629      	mov	r1, r5
 8003c62:	4620      	mov	r0, r4
 8003c64:	f000 f92a 	bl	8003ebc <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	441a      	add	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	605a      	str	r2, [r3, #4]
      return *this;
 8003c76:	687b      	ldr	r3, [r7, #4]
    }
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c80 <_ZSt7forwardIRKSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8003c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003ca0:	687c      	ldr	r4, [r7, #4]
 8003ca2:	6838      	ldr	r0, [r7, #0]
 8003ca4:	f7fe ffc2 	bl	8002c2c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003ca8:	4605      	mov	r5, r0
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f82f 	bl	8003d10 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f90f 	bl	8003ede <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 f916 	bl	8003efa <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003cce:	f107 030c 	add.w	r3, r7, #12
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fa09 	bl	80020ea <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f000 f84c 	bl	8003d76 <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003cde:	4605      	mov	r5, r0
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f000 f85c 	bl	8003d9e <_ZNKSt6vectorIfSaIfEE3endEv>
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fbca 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003cf4:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f911 	bl	8003f22 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003d00:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	605a      	str	r2, [r3, #4]
      }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d10 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZStneRKSaIfES1_>:
      friend bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
      { return false; }
 8003d30:	2300      	movs	r3, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZNSt6vectorIfSaIfEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fe ff7d 	bl	8002c4c <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8003d64:	461a      	mov	r2, r3
 8003d66:	6839      	ldr	r1, [r7, #0]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8eb 	bl	8003f44 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	f107 020c 	add.w	r2, r7, #12
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f8e4 	bl	8003f5c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	f107 020c 	add.w	r2, r7, #12
 8003db0:	f107 0308 	add.w	r3, r7, #8
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f8d0 	bl	8003f5c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f888 	bl	8002eee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003dde:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fb50 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003de8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f897 	bl	8003f22 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8003df4:	697b      	ldr	r3, [r7, #20]
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f8b4 	bl	8003f7c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8003e1e:	b590      	push	{r4, r7, lr}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f8b6 	bl	8003f9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e30:	4604      	mov	r4, r0
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f000 f8b2 	bl	8003f9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 f8b7 	bl	8003fb2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 8003e44:	4603      	mov	r3, r0
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}

08003e4e <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1d1a      	adds	r2, r3, #4
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f88b 	bl	8003f7c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8b8 	bl	8003ff4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f8b8 	bl	800400e <_ZSt12__miter_baseIPfET_S1_>
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	68b8      	ldr	r0, [r7, #8]
 8003ea2:	f000 f8b4 	bl	800400e <_ZSt12__miter_baseIPfET_S1_>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 f8b9 	bl	8004024 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 8003eb2:	4603      	mov	r3, r0
    }
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}

08003ebc <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8cb 	bl	800406a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f8ce 	bl	800408e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe ffdd 	bl	8002eca <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f8c8 	bl	80040a8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f8d2 	bl	80040de <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZSt18__do_alloc_on_copyISaIfEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	713a      	strb	r2, [r7, #4]
    { }
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003fb2:	b5b0      	push	{r4, r5, r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f89f 	bl	8004102 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	68b8      	ldr	r0, [r7, #8]
 8003fc8:	f000 f89b 	bl	8004102 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003fcc:	4605      	mov	r5, r0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8a5 	bl	800411e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff fb3c 	bl	8003658 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8a8 	bl	800413a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8003fea:	4603      	mov	r3, r0
    }
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bdb0      	pop	{r4, r5, r7, pc}

08003ff4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8b1 	bl	8004168 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004024:	b5b0      	push	{r4, r5, r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7ff fb06 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 8004036:	4604      	mov	r4, r0
 8004038:	68b8      	ldr	r0, [r7, #8]
 800403a:	f7ff fb02 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 800403e:	4605      	mov	r5, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fafd 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	4629      	mov	r1, r5
 800404e:	4620      	mov	r0, r4
 8004050:	f000 f895 	bl	800417e <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8004054:	4602      	mov	r2, r0
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fb0e 	bl	800367c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004060:	4603      	mov	r3, r0
    }
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bdb0      	pop	{r4, r5, r7, pc}

0800406a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004076:	2301      	movs	r3, #1
 8004078:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f88f 	bl	80041a2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 8004084:	4603      	mov	r3, r0
    }
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8004098:	6839      	ldr	r1, [r7, #0]
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff f8b7 	bl	800320e <_ZNSaIfEC1ERKS_>
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80040b2:	6839      	ldr	r1, [r7, #0]
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fe ff1a 	bl	8002eee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80040ba:	4602      	mov	r2, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
      }
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f865 	bl	80041c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 80040f8:	4603      	mov	r3, r0
    }
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f868 	bl	80041e2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004112:	4603      	mov	r3, r0
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f865 	bl	80041f8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800412e:	4603      	mov	r3, r0
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ffea 	bl	800411e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800414a:	4602      	mov	r2, r0
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	109b      	asrs	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f858 	bl	800420e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800415e:	4603      	mov	r3, r0
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800418a:	2301      	movs	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff fb9e 	bl	80038d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004198:	4603      	mov	r3, r0
    }
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff fe6a 	bl	8003e8c <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f833 	bl	800423e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80041d8:	4603      	mov	r3, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	f107 020c 	add.w	r2, r7, #12
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fea4 	bl	8003f7c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800423e:	b590      	push	{r4, r7, lr}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fea6 	bl	8003f9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004250:	4604      	mov	r4, r0
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	f7ff fea2 	bl	8003f9c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004258:	4603      	mov	r3, r0
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4619      	mov	r1, r3
 800425e:	4620      	mov	r0, r4
 8004260:	f000 f805 	bl	800426e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8004264:	4603      	mov	r3, r0
    }
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bd90      	pop	{r4, r7, pc}

0800426e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800426e:	b5b0      	push	{r4, r5, r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff ff41 	bl	8004102 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004280:	4604      	mov	r4, r0
 8004282:	68b8      	ldr	r0, [r7, #8]
 8004284:	f7ff ff3d 	bl	8004102 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004288:	4605      	mov	r5, r0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f9d8 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	4629      	mov	r1, r5
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff f9dd 	bl	8003658 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800429e:	4602      	mov	r2, r0
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff f9e9 	bl	800367c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80042aa:	4603      	mov	r3, r0
    }
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bdb0      	pop	{r4, r5, r7, pc}

080042b4 <_ZN6KalmanC1ESt6vectorIS0_IfSaIfEESaIS2_EES4_S4_S4_S4_S4_S4_>:

#include "kalman.h"
#include "assert.h"
#include "math.h"

Kalman::Kalman(matrix Q, matrix A, matrix B, matrix x_e, matrix p_e, matrix I, matrix H)
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fb6a 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	330c      	adds	r3, #12
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fb65 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3318      	adds	r3, #24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fd fb60 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3324      	adds	r3, #36	; 0x24
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd fb5b 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3330      	adds	r3, #48	; 0x30
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd fb56 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	333c      	adds	r3, #60	; 0x3c
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fb51 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3348      	adds	r3, #72	; 0x48
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fb4c 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3354      	adds	r3, #84	; 0x54
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd fb47 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3360      	adds	r3, #96	; 0x60
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fb42 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	336c      	adds	r3, #108	; 0x6c
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fb3d 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3378      	adds	r3, #120	; 0x78
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fb38 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3384      	adds	r3, #132	; 0x84
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fb33 	bl	800199e <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1Ev>
{

	Q_ = Q;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	333c      	adds	r3, #60	; 0x3c
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fbd8 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	A_ = A;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	330c      	adds	r3, #12
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fbd2 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	B_ = B;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3318      	adds	r3, #24
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fbcc 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	x_e_ = x_e;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fbc7 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	p_e_ = p_e;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3354      	adds	r3, #84	; 0x54
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fbc1 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	I_ = I;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	6a39      	ldr	r1, [r7, #32]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fbbb 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
	H_ = H;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3384      	adds	r3, #132	; 0x84
 8004382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fbb5 	bl	8004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>
};
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <_ZN6KalmanD1Ev>:

Kalman::~Kalman(){};
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3384      	adds	r3, #132	; 0x84
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd fe77 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3378      	adds	r3, #120	; 0x78
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fd fe72 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	336c      	adds	r3, #108	; 0x6c
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fe6d 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3360      	adds	r3, #96	; 0x60
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fe68 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3354      	adds	r3, #84	; 0x54
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd fe63 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3348      	adds	r3, #72	; 0x48
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fe5e 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	333c      	adds	r3, #60	; 0x3c
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd fe59 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3330      	adds	r3, #48	; 0x30
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd fe54 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd fe4f 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3318      	adds	r3, #24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fe4a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	330c      	adds	r3, #12
 8004404:	4618      	mov	r0, r3
 8004406:	f7fd fe45 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fe41 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E15_S_always_equalEv>:
    static constexpr bool _S_always_equal()
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8004420:	2301      	movs	r3, #1
 8004422:	4618      	mov	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_ZN6Kalman10PredictionESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::Prediction(matrix U)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b0b1      	sub	sp, #196	; 0xc4
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
    x_p_ = A_ * x_e_ + (B_ * U);					//Predicted state estimate
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 020c 	add.w	r2, r3, #12
 8004442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004446:	4611      	mov	r1, r2
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fc5d 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc56 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800445c:	f107 0318 	add.w	r3, r7, #24
 8004460:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004464:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004468:	4618      	mov	r0, r3
 800446a:	f003 f83b 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f103 0218 	add.w	r2, r3, #24
 8004474:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fc44 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004480:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fc3e 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800448c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004490:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004494:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004498:	4618      	mov	r0, r3
 800449a:	f003 f823 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800449e:	f107 030c 	add.w	r3, r7, #12
 80044a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80044a6:	f107 0118 	add.w	r1, r7, #24
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 ff0e 	bl	80072cc <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80044b0:	f107 030c 	add.w	r3, r7, #12
 80044b4:	4619      	mov	r1, r3
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 fc63 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 80044bc:	f107 030c 	add.w	r3, r7, #12
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd fde7 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd fde2 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fddd 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd fdd8 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044e4:	f107 0318 	add.w	r3, r7, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fdd3 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd fdce 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80044f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd fdc9 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
    p_p_ = A_ * p_e_ * transpose(A_) + Q_;			//Predicted error covariance
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f103 020c 	add.w	r2, r3, #12
 800450e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fbf7 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004520:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fbee 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800452c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004530:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004534:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8004538:	4618      	mov	r0, r3
 800453a:	f002 ffd3 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f103 020c 	add.w	r2, r3, #12
 8004544:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fbdc 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004554:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 f902 	bl	8007764 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 8004560:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004564:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004568:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800456c:	4618      	mov	r0, r3
 800456e:	f002 ffb9 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fbc2 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004584:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004588:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800458c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004590:	4618      	mov	r0, r3
 8004592:	f002 fe9b 	bl	80072cc <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004596:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800459a:	4619      	mov	r1, r3
 800459c:	4620      	mov	r0, r4
 800459e:	f000 fbf0 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 80045a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fd fd74 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fd6f 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fd6a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fd fd65 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd fd60 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd fd5b 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fd56 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80045e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fd51 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 80045f2:	bf00      	nop
 80045f4:	37c4      	adds	r7, #196	; 0xc4
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}

080045fa <_ZN6Kalman10KalmanGainESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::KalmanGain(matrix R)
{
 80045fa:	b590      	push	{r4, r7, lr}
 80045fc:	b0b1      	sub	sp, #196	; 0xc4
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  S_ = H_ * p_p_ * transpose(H_) + R;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb76 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004622:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fb6d 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800462e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004632:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004636:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800463a:	4618      	mov	r0, r3
 800463c:	f002 ff52 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8004646:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb5b 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004656:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f003 f881 	bl	8007764 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 8004662:	f107 0318 	add.w	r3, r7, #24
 8004666:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800466a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800466e:	4618      	mov	r0, r3
 8004670:	f002 ff38 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004674:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb44 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004680:	f107 030c 	add.w	r3, r7, #12
 8004684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004688:	f107 0118 	add.w	r1, r7, #24
 800468c:	4618      	mov	r0, r3
 800468e:	f002 fe1d 	bl	80072cc <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4619      	mov	r1, r3
 8004698:	4620      	mov	r0, r4
 800469a:	f000 fb72 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 800469e:	f107 030c 	add.w	r3, r7, #12
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fcf6 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd fcf1 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046b2:	f107 0318 	add.w	r3, r7, #24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fcec 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fd fce7 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fce2 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd fcdd 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fcd8 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80046e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fd fcd3 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
  K_G_ = p_p_ * transpose(H_) *  inverse(S_);		//S is a diagonal matrix
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80046fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fb01 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800470c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 faf8 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004718:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800471c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f003 f81e 	bl	8007764 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>
 8004728:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800472c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004730:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8004734:	4618      	mov	r0, r3
 8004736:	f002 fed5 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004740:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fade 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800474c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004750:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f002 ff68 	bl	800762c <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE>
 800475c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004760:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004764:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004768:	4618      	mov	r0, r3
 800476a:	f002 febb 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800476e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004772:	4619      	mov	r1, r3
 8004774:	4620      	mov	r0, r4
 8004776:	f000 fb04 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 800477a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fc88 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004784:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fc83 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800478e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fc7e 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004798:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd fc79 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80047a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fc74 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80047ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fc6f 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80047b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fc6a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 80047c0:	bf00      	nop
 80047c2:	37c4      	adds	r7, #196	; 0xc4
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd90      	pop	{r4, r7, pc}

080047c8 <_ZN6Kalman6UpdateESt6vectorIS0_IfSaIfEESaIS2_EE>:

void Kalman::Update(matrix P)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b0ad      	sub	sp, #180	; 0xb4
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  x_e_ = x_p_ + K_G_ * (P - x_p_);					//Updated state estimate
 80047d2:	687c      	ldr	r4, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fa91 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80047ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fa88 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80047f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fa82 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800480a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fa79 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800481a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800481e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004822:	4618      	mov	r0, r3
 8004824:	f002 fdd8 	bl	80073d8 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004828:	f107 0320 	add.w	r3, r7, #32
 800482c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004830:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004834:	4618      	mov	r0, r3
 8004836:	f002 fe55 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	f107 0220 	add.w	r2, r7, #32
 8004842:	f107 0114 	add.w	r1, r7, #20
 8004846:	4618      	mov	r0, r3
 8004848:	f002 fd40 	bl	80072cc <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4619      	mov	r1, r3
 8004852:	4620      	mov	r0, r4
 8004854:	f000 fa95 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	4618      	mov	r0, r3
 800485e:	f7fd fc19 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004862:	f107 0320 	add.w	r3, r7, #32
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fc14 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800486c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004870:	4618      	mov	r0, r3
 8004872:	f7fd fc0f 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd fc0a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004884:	4618      	mov	r0, r3
 8004886:	f7fd fc05 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800488a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fc00 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fbfb 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
  p_e_ = (I_ - (K_G_ * H_)) * p_p_;					//Updated error covariance
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80048aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fa29 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80048bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fa20 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80048ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fa17 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80048da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80048de:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80048e2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80048e6:	4618      	mov	r0, r3
 80048e8:	f002 fdfc 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80048ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048f0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80048f4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80048f8:	4618      	mov	r0, r3
 80048fa:	f002 fd6d 	bl	80073d8 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004904:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f9fc 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8004910:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004914:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004918:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800491c:	4618      	mov	r0, r3
 800491e:	f002 fde1 	bl	80074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>
 8004922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004926:	4619      	mov	r1, r3
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fa2a 	bl	8004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>
 800492e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fbae 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd fba9 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd fba4 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800494c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd fb9f 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004956:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fb9a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8004960:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd fb95 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800496a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fb90 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 8004974:	bf00      	nop
 8004976:	37b4      	adds	r7, #180	; 0xb4
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}

0800497c <_ZN7kf_mathC1Ev>:

kf_math::kf_math()
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
{
	i_ = 0;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
	sum_ = 0;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
	window_ = 0;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	611a      	str	r2, [r3, #16]
	readings_[100] = {0};
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	mean_ = 0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	605a      	str	r2, [r3, #4]
}
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <_ZN7kf_mathD1Ev>:

kf_math::~kf_math(){};
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <_ZN7kf_math8varianceEfi>:

float kf_math::variance(float data_, int window_)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	ed87 0a02 	vstr	s0, [r7, #8]
 80049da:	6079      	str	r1, [r7, #4]
  sqDiff_ = 0;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	60da      	str	r2, [r3, #12]
  sum_ = sum_ - readings_[i_];
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	edc3 7a02 	vstr	s15, [r3, #8]
  readings_[i_] = data_;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	3304      	adds	r3, #4
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	601a      	str	r2, [r3, #0]
  sum_ = sum_ + data_;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	edc3 7a02 	vstr	s15, [r3, #8]
  mean_ = (float)sum_ / (float)window_;		//Mean
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	edc3 7a01 	vstr	s15, [r3, #4]


  i_++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]
  if (i_ == window_ - 1)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d102      	bne.n	8004a62 <_ZN7kf_math8varianceEfi+0x94>
 	  i_ = 0;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

  for (int j = 0; j<window_; j++)
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	da27      	bge.n	8004abe <_ZN7kf_math8varianceEfi+0xf0>
	  sqDiff_ += (readings_[j] - mean_) * (readings_[j] - mean_);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	edd3 6a00 	vldr	s13, [r3]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3304      	adds	r3, #4
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	3304      	adds	r3, #4
 8004a9a:	ed93 6a00 	vldr	s12, [r3]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aa4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	edc3 7a03 	vstr	s15, [r3, #12]
  for (int j = 0; j<window_; j++)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e7d3      	b.n	8004a66 <_ZN7kf_math8varianceEfi+0x98>


  return sqDiff_/window_;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ace:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ad2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_>:
    vector<_Tp, _Alloc>::
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	f000 80f8 	beq.w	8004cf8 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x204>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8004b08:	f7ff ffec 	bl	8004ae4 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E27_S_propagate_on_copy_assignEv>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d046      	beq.n	8004ba0 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 8004b12:	f7ff fc83 	bl	800441c <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E15_S_always_equalEv>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f083 0301 	eor.w	r3, r3, #1
 8004b1c:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x54>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd fc64 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f93c 	bl	8004dac <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4619      	mov	r1, r3
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f000 f942 	bl	8004dc2 <_ZStneRKSaISt6vectorIfSaIfEEES4_>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x54>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x56>
 8004b48:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01a      	beq.n	8004b84 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x90>
		  this->clear();
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f943 	bl	8004dda <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	109b      	asrs	r3, r3, #2
 8004b66:	4a67      	ldr	r2, [pc, #412]	; (8004d04 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x210>)
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f7fd fc2d 	bl	80023cc <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
		  this->_M_impl._M_start = nullptr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd fc33 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f90b 	bl	8004dac <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f92b 	bl	8004df6 <_ZSt15__alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_>
	  const size_type __xlen = __x.size();
 8004ba0:	6838      	ldr	r0, [r7, #0]
 8004ba2:	f7fe fa33 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8004ba6:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fe f9d5 	bl	8002f58 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE8capacityEv>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bf8c      	ite	hi
 8004bb6:	2301      	movhi	r3, #1
 8004bb8:	2300      	movls	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d038      	beq.n	8004c32 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x13e>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8004bc0:	6838      	ldr	r0, [r7, #0]
 8004bc2:	f000 f926 	bl	8004e12 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	6838      	ldr	r0, [r7, #0]
 8004bca:	f000 f936 	bl	8004e3a <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f944 	bl	8004e62 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>
 8004bda:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681c      	ldr	r4, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd fc03 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004bec:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7fd fc08 	bl	8002408 <_ZSt8_DestroyIPSt6vectorIfSaIfEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	109b      	asrs	r3, r3, #2
 8004c0a:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x210>)
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8004c10:	461a      	mov	r2, r3
 8004c12:	f7fd fbdb 	bl	80023cc <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __tmp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4613      	mov	r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18ca      	adds	r2, r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	e058      	b.n	8004ce4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x1f0>
	  else if (size() >= __xlen)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fe f9ea 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bf94      	ite	ls
 8004c40:	2301      	movls	r3, #1
 8004c42:	2300      	movhi	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d020      	beq.n	8004c8c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x198>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004c4a:	6838      	ldr	r0, [r7, #0]
 8004c4c:	f000 f8e1 	bl	8004e12 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8004c50:	4604      	mov	r4, r0
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	f000 f8f1 	bl	8004e3a <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8004c58:	4605      	mov	r5, r0
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f91d 	bl	8004e9a <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	4629      	mov	r1, r5
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f927 	bl	8004eba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET0_T_SD_SC_>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f93b 	bl	8004eea <_ZNSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8004c74:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fd fbba 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004c7e:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8004c80:	461a      	mov	r2, r3
 8004c82:	4629      	mov	r1, r5
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 f941 	bl	8004f0c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES4_EvT_S9_RSaIT0_E>
 8004c8a:	e02b      	b.n	8004ce4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSERKS3_+0x1f0>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681d      	ldr	r5, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681c      	ldr	r4, [r3, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fe f9b9 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	18e1      	adds	r1, r4, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f93b 	bl	8004f28 <_ZSt4copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681c      	ldr	r4, [r3, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fe f9a8 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fb8d 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004cd8:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8004cda:	4632      	mov	r2, r6
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f000 f93a 	bl	8004f58 <_ZSt22__uninitialized_copy_aIPSt6vectorIfSaIfEES3_S2_ET0_T_S5_S4_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	18ca      	adds	r2, r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	605a      	str	r2, [r3, #4]
      return *this;
 8004cf8:	687b      	ldr	r3, [r7, #4]
    }
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	aaaaaaab 	.word	0xaaaaaaab

08004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8004d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004d12:	687c      	ldr	r4, [r7, #4]
 8004d14:	6838      	ldr	r0, [r7, #0]
 8004d16:	f7fe f979 	bl	800300c <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE4sizeEv>
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f844 	bl	8004dac <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f924 	bl	8004f7a <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E17_S_select_on_copyERKS4_>
 8004d32:	f107 030c 	add.w	r3, r7, #12
 8004d36:	461a      	mov	r2, r3
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 f92b 	bl	8004f96 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd f97b 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f000 f861 	bl	8004e12 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>
 8004d50:	4605      	mov	r5, r0
 8004d52:	6838      	ldr	r0, [r7, #0]
 8004d54:	f000 f871 	bl	8004e3a <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>
 8004d58:	4606      	mov	r6, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fd fb46 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004d66:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8004d68:	4622      	mov	r2, r4
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f926 	bl	8004fbe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>
 8004d72:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]
      }
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d82 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSEOS3_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8004d82:	b590      	push	{r4, r7, lr}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f000 f925 	bl	8004fe0 <_ZSt4moveIRSt6vectorIS0_IfSaIfEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f92a 	bl	8004ff6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>
	return *this;
 8004da2:	687b      	ldr	r3, [r7, #4]
      }
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd90      	pop	{r4, r7, pc}

08004dac <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <_ZStneRKSaISt6vectorIfSaIfEEES4_>:
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
      { return false; }
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fe f925 	bl	8003038 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE15_M_erase_at_endEPS1_>
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZSt15__alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_>:
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8004e00:	461a      	mov	r2, r3
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f934 	bl	8005072 <_ZSt18__do_alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_St17integral_constantIbLb0EE>
    }
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	f107 020c 	add.w	r2, r7, #12
 8004e24:	f107 0308 	add.w	r3, r7, #8
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f92d 	bl	800508a <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <_ZNKSt6vectorIS_IfSaIfEESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	f107 020c 	add.w	r2, r7, #12
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 f919 	bl	800508a <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_jT_SB_>:
	_M_allocate_and_copy(size_type __n,
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fe fb2d 	bl	80034d4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8004e7a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fd fab7 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004e84:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f897 	bl	8004fbe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>
	      return __result;
 8004e90:	697b      	ldr	r3, [r7, #20]
	}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ZNSt6vectorIS_IfSaIfEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f8fd 	bl	80050aa <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET0_T_SD_SC_>:
    copy(_II __first, _II __last, _OI __result)
 8004eba:	b590      	push	{r4, r7, lr}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f8ff 	bl	80050ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f000 f8fb 	bl	80050ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 f900 	bl	80050e0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET1_T0_SD_SC_>
 8004ee0:	4603      	mov	r3, r0
    }
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}

08004eea <_ZNSt6vectorIS_IfSaIfEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	f107 030c 	add.w	r3, r7, #12
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f8d4 	bl	80050aa <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES4_EvT_S9_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f901 	bl	8005122 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEEvT_S9_>
    }
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZSt4copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f901 	bl	800513c <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	68b8      	ldr	r0, [r7, #8]
 8004f3e:	f000 f8fd 	bl	800513c <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>
 8004f42:	4603      	mov	r3, r0
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4619      	mov	r1, r3
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 f902 	bl	8005152 <_ZSt14__copy_move_a2ILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>
 8004f4e:	4603      	mov	r3, r0
    }
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd90      	pop	{r4, r7, pc}

08004f58 <_ZSt22__uninitialized_copy_aIPSt6vectorIfSaIfEES3_S2_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f914 	bl	8005198 <_ZSt18uninitialized_copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>
 8004f70:	4603      	mov	r3, r0
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIfSaIfEEES3_E17_S_select_on_copyERKS4_>:
    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f917 	bl	80051bc <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE37select_on_container_copy_constructionERKS3_>
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f915 	bl	80051d6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>
      { _M_create_storage(__n); }
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f923 	bl	80051fa <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_M_create_storageEj>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_S4_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f930 	bl	8005236 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_ET0_T_SC_SB_>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZSt4moveIRSt6vectorIS0_IfSaIfEESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE14_M_move_assignEOS3_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8004ff6:	b590      	push	{r4, r7, lr}
 8004ff8:	b089      	sub	sp, #36	; 0x24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f107 031c 	add.w	r3, r7, #28
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f000 f925 	bl	800525a <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13get_allocatorEv>
 8005010:	f107 021c 	add.w	r2, r7, #28
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f92e 	bl	800527c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS2_>
 8005020:	f107 031c 	add.w	r3, r7, #28
 8005024:	4618      	mov	r0, r3
 8005026:	f7fd f80b 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f000 f932 	bl	800529a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f92b 	bl	800529a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4618      	mov	r0, r3
 8005048:	f7fd f9d3 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 800504c:	4604      	mov	r4, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd f9ce 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8005056:	4603      	mov	r3, r0
 8005058:	4619      	mov	r1, r3
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f93b 	bl	80052d6 <_ZSt15__alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_>
	vector __tmp(get_allocator());
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f7fd f815 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
      }
 800506a:	bf00      	nop
 800506c:	3724      	adds	r7, #36	; 0x24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}

08005072 <_ZSt18__do_alloc_on_copyISaISt6vectorIfSaIfEEEEvRT_RKS4_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	713a      	strb	r2, [r7, #4]
    { }
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEET_SA_>:
    __miter_base(_Iterator __it)
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEENS1_IPS4_S8_EEET1_T0_SD_SC_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f900 	bl	80052f2 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80050f2:	4604      	mov	r4, r0
 80050f4:	68b8      	ldr	r0, [r7, #8]
 80050f6:	f000 f8fc 	bl	80052f2 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 80050fa:	4605      	mov	r5, r0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f906 	bl	800530e <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	4629      	mov	r1, r5
 8005108:	4620      	mov	r0, r4
 800510a:	f7fe fb99 	bl	8003840 <_ZSt13__copy_move_aILb0EPKSt6vectorIfSaIfEEPS2_ET1_T0_S7_S6_>
 800510e:	4603      	mov	r3, r0
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f90a 	bl	800532c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_>
 8005118:	4603      	mov	r3, r0
    }
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bdb0      	pop	{r4, r5, r7, pc}

08005122 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEEvT_S9_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f918 	bl	8005364 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_>
    }
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZSt12__miter_baseIPSt6vectorIfSaIfEEET_S4_>:
    __miter_base(_Iterator __it)
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <_ZSt14__copy_move_a2ILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005152:	b5b0      	push	{r4, r5, r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7fe fb63 	bl	800382a <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 8005164:	4604      	mov	r4, r0
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f7fe fb5f 	bl	800382a <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 800516c:	4605      	mov	r5, r0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fe fb5a 	bl	800382a <_ZSt12__niter_baseIPSt6vectorIfSaIfEEET_S4_>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	4629      	mov	r1, r5
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f914 	bl	80053aa <_ZSt13__copy_move_aILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>
 8005182:	4602      	mov	r2, r0
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fb6b 	bl	8003864 <_ZSt12__niter_wrapIPSt6vectorIfSaIfEEET_RKS4_S4_>
 800518e:	4603      	mov	r3, r0
    }
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bdb0      	pop	{r4, r5, r7, pc}

08005198 <_ZSt18uninitialized_copyIPSt6vectorIfSaIfEES3_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f90e 	bl	80053ce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_>
 80051b2:	4603      	mov	r3, r0
    }
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <_ZNSt16allocator_traitsISaISt6vectorIfSaIfEEEE37select_on_container_copy_constructionERKS3_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fe f975 	bl	80034b8 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fe f968 	bl	80034b8 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd f8cf 	bl	800238e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fe f964 	bl	80034d4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 800520c:	4602      	mov	r2, r0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	18ca      	adds	r2, r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
      }
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES2_IS4_SaIS4_EEEEPS4_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005242:	2301      	movs	r3, #1
 8005244:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f8df 	bl	800540e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>
 8005250:	4603      	mov	r3, r0
    }
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f7ff fda1 	bl	8004dac <_ZNKSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 800526a:	4603      	mov	r3, r0
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fe f922 	bl	80034b8 <_ZNSaISt6vectorIfSaIfEEEC1ERKS2_>
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS2_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f8ee 	bl	800546c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80052a4:	f107 030c 	add.w	r3, r7, #12
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fd f870 	bl	800238e <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f8e8 	bl	800548a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  _M_copy_data(__x);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f8e4 	bl	800548a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  __x._M_copy_data(__tmp);
 80052c2:	f107 030c 	add.w	r3, r7, #12
 80052c6:	4619      	mov	r1, r3
 80052c8:	6838      	ldr	r0, [r7, #0]
 80052ca:	f000 f8de 	bl	800548a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_ZSt15__alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80052e0:	461a      	mov	r2, r3
 80052e2:	6839      	ldr	r1, [r7, #0]
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f8e7 	bl	80054b8 <_ZSt18__do_alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_St17integral_constantIbLb1EE>
    }
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZSt12__niter_baseIPKSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f8e8 	bl	80054d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 8005302:	4603      	mov	r3, r0
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005316:	1d3b      	adds	r3, r7, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f8e5 	bl	80054e8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 800531e:	4603      	mov	r3, r0
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ffe9 	bl	800530e <_ZSt12__niter_baseIPSt6vectorIfSaIfEES0_IS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800533c:	4602      	mov	r2, r0
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	109b      	asrs	r3, r3, #2
 8005344:	4a06      	ldr	r2, [pc, #24]	; (8005360 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES2_IS4_SaIS4_EEEES5_ET_S9_T0_+0x34>)
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	461a      	mov	r2, r3
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f8d4 	bl	80054fe <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEplEi>
 8005356:	4603      	mov	r3, r0
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	aaaaaaab 	.word	0xaaaaaaab

08005364 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800536e:	463a      	mov	r2, r7
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f8dd 	bl	8005534 <_ZN9__gnu_cxxneIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d010      	beq.n	80053a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_+0x3e>
	    std::_Destroy(std::__addressof(*__first));
 8005380:	1d3b      	adds	r3, r7, #4
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f8ff 	bl	8005586 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>
 8005388:	4603      	mov	r3, r0
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe f90c 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 8005390:	4603      	mov	r3, r0
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe f913 	bl	80035be <_ZSt8_DestroyISt6vectorIfSaIfEEEvPT_>
	  for (; __first != __last; ++__first)
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f8e2 	bl	8005564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>
 80053a0:	e7e5      	b.n	800536e <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEEEvT_SB_+0xa>
	}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_ZSt13__copy_move_aILb0EPSt6vectorIfSaIfEES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f8ee 	bl	80055a0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_>
 80053c4:	4603      	mov	r3, r0
    }
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d00e      	beq.n	8005404 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 80053e6:	6978      	ldr	r0, [r7, #20]
 80053e8:	f7fe f8de 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 80053ec:	4603      	mov	r3, r0
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f8fb 	bl	80055ec <_ZSt10_ConstructISt6vectorIfSaIfEEJRS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	330c      	adds	r3, #12
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	330c      	adds	r3, #12
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e7ec      	b.n	80053de <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIfSaIfEES5_EET0_T_S7_S6_+0x10>
	      return __cur;
 8005404:	697b      	ldr	r3, [r7, #20]
	}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800540e:	b590      	push	{r4, r7, lr}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800541e:	f107 0208 	add.w	r2, r7, #8
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f8f6 	bl	800561a <_ZN9__gnu_cxxneIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d016      	beq.n	8005462 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005434:	6978      	ldr	r0, [r7, #20]
 8005436:	f7fe f8b7 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800543a:	4604      	mov	r4, r0
 800543c:	f107 030c 	add.w	r3, r7, #12
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f913 	bl	800566c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>
 8005446:	4603      	mov	r3, r0
 8005448:	4619      	mov	r1, r3
 800544a:	4620      	mov	r0, r4
 800544c:	f7fe fafc 	bl	8003a48 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005450:	f107 030c 	add.w	r3, r7, #12
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f8f8 	bl	800564a <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	330c      	adds	r3, #12
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e7dd      	b.n	800541e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES4_IS6_SaIS6_EEEEPS6_EET0_T_SE_SD_+0x10>
	      return __cur;
 8005462:	697b      	ldr	r3, [r7, #20]
	}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}

0800546c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff feab 	bl	80051d6 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE12_Vector_implC1ERKS3_>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	609a      	str	r2, [r3, #8]
	}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_ZSt18__do_alloc_on_moveISaISt6vectorIfSaIfEEEEvRT_S5_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80054c4:	68b8      	ldr	r0, [r7, #8]
 80054c6:	f000 f8dd 	bl	8005684 <_ZSt4moveIRSaISt6vectorIfSaIfEEEEONSt16remove_referenceIT_E4typeEOS6_>
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6819      	ldr	r1, [r3, #0]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	f107 020c 	add.w	r2, r7, #12
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fdc0 	bl	80050aa <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEC1ERKS4_>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN9__gnu_cxxneIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ffd2 	bl	80054e8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 8005544:	4603      	mov	r3, r0
 8005546:	681c      	ldr	r4, [r3, #0]
 8005548:	6838      	ldr	r0, [r7, #0]
 800554a:	f7ff ffcd 	bl	80054e8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 800554e:	4603      	mov	r3, r0
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429c      	cmp	r4, r3
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f103 020c 	add.w	r2, r3, #12
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
	return *this;
 8005578:	687b      	ldr	r3, [r7, #4]
      }
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
	...

080055a0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	109b      	asrs	r3, r3, #2
 80055b4:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x48>)
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	dd0d      	ble.n	80055de <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x3e>
	      *__result = *__first;
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7fe fa66 	bl	8003a96 <_ZNSt6vectorIfSaIfEEaSERKS1_>
	      ++__first;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	330c      	adds	r3, #12
 80055ce:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	330c      	adds	r3, #12
 80055d4:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3b01      	subs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e7ee      	b.n	80055bc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt6vectorIfSaIfEES6_EET0_T_S8_S7_+0x1c>
	  return __result;
 80055de:	687b      	ldr	r3, [r7, #4]
	}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	aaaaaaab 	.word	0xaaaaaaab

080055ec <_ZSt10_ConstructISt6vectorIfSaIfEEJRS2_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80055f6:	6838      	ldr	r0, [r7, #0]
 80055f8:	f000 f84f 	bl	800569a <_ZSt7forwardIRSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80055fc:	4604      	mov	r4, r0
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4619      	mov	r1, r3
 8005602:	200c      	movs	r0, #12
 8005604:	f7fc f996 	bl	8001934 <_ZnwjPv>
 8005608:	4603      	mov	r3, r0
 800560a:	4621      	mov	r1, r4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fb42 	bl	8003c96 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}

0800561a <_ZN9__gnu_cxxneIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff54 	bl	80054d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 800562a:	4603      	mov	r3, r0
 800562c:	681c      	ldr	r4, [r3, #0]
 800562e:	6838      	ldr	r0, [r7, #0]
 8005630:	f7ff ff4f 	bl	80054d2 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEE4baseEv>
 8005634:	4603      	mov	r3, r0
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429c      	cmp	r4, r3
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}

0800564a <_ZN9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f103 020c 	add.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
	return *this;
 800565e:	687b      	ldr	r3, [r7, #4]
      }
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <_ZNK9__gnu_cxx17__normal_iteratorIPKSt6vectorIfSaIfEES1_IS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_ZSt4moveIRSaISt6vectorIfSaIfEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <_ZSt7forwardIRSt6vectorIfSaIfEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_ZN5cop_tC1Ev>:
class cop_t
{
public:
	float cop_panel;

	cop_t(){};
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <_ZN5cop_tC1Ev+0x38>)
 80056bc:	3304      	adds	r3, #4
 80056be:	ca07      	ldmia	r2, {r0, r1, r2}
 80056c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <_ZN5cop_tC1Ev+0x3c>)
 80056c8:	3310      	adds	r3, #16
 80056ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80056cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	621a      	str	r2, [r3, #32]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	08016bb4 	.word	0x08016bb4
 80056ec:	08016bc0 	.word	0x08016bc0

080056f0 <_ZN5cop_tD1Ev>:
	~cop_t(){};
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800570e:	f002 fc22 	bl	8007f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005712:	f000 f8c3 	bl	800589c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005716:	f000 fb3b 	bl	8005d90 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800571a:	f000 faf7 	bl	8005d0c <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 800571e:	f000 f987 	bl	8005a30 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8005722:	f000 f9c7 	bl	8005ab4 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8005726:	f000 fa05 	bl	8005b34 <_ZL12MX_SPI3_Initv>
  MX_TIM17_Init();
 800572a:	f000 fac3 	bl	8005cb4 <_ZL13MX_TIM17_Initv>
  MX_TIM6_Init();
 800572e:	f000 fa41 	bl	8005bb4 <_ZL12MX_TIM6_Initv>
  MX_USB_Device_Init();
 8005732:	f00b fe97 	bl	8011464 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8005736:	f000 f92d 	bl	8005994 <_ZL12MX_I2C1_Initv>
  MX_TIM7_Init();
 800573a:	f000 fa7b 	bl	8005c34 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */

  ICM42605.Init();
 800573e:	484d      	ldr	r0, [pc, #308]	; (8005874 <main+0x16c>)
 8005740:	f7fc f9dc 	bl	8001afc <_ZN8ICM426054InitEv>
  ICM42605.GyroCalibrate();
 8005744:	484b      	ldr	r0, [pc, #300]	; (8005874 <main+0x16c>)
 8005746:	f7fc fb2f 	bl	8001da8 <_ZN8ICM4260513GyroCalibrateEv>

  //Set all decoder outputs high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800574a:	2201      	movs	r2, #1
 800574c:	2101      	movs	r1, #1
 800574e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005752:	f003 f997 	bl	8008a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8005756:	2201      	movs	r2, #1
 8005758:	2102      	movs	r1, #2
 800575a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800575e:	f003 f991 	bl	8008a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8005762:	2201      	movs	r2, #1
 8005764:	2104      	movs	r1, #4
 8005766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800576a:	f003 f98b 	bl	8008a84 <HAL_GPIO_WritePin>

  front_panel_decoder_enable();
 800576e:	f000 feb9 	bl	80064e4 <_Z26front_panel_decoder_enablev>

  //Initialize and calculate coeffecients of the sensors on the front panel
  for (int i=0; i<8; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b07      	cmp	r3, #7
 800577a:	dc35      	bgt.n	80057e8 <main+0xe0>
  {
	  bmp388_fp[i].chip_select(chip_select_fp[i]);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <main+0x170>)
 8005788:	441a      	add	r2, r3
 800578a:	493c      	ldr	r1, [pc, #240]	; (800587c <main+0x174>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fb fb0f 	bl	8000db8 <_ZN6bmp38811chip_selectEt>
	  bmp388_fp[i].spi(&hspi1, &hspi2, &hspi3);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	4a34      	ldr	r2, [pc, #208]	; (8005878 <main+0x170>)
 80057a6:	1898      	adds	r0, r3, r2
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <main+0x178>)
 80057aa:	4a36      	ldr	r2, [pc, #216]	; (8005884 <main+0x17c>)
 80057ac:	4936      	ldr	r1, [pc, #216]	; (8005888 <main+0x180>)
 80057ae:	f7fb fb12 	bl	8000dd6 <_ZN6bmp3883spiEP19__SPI_HandleTypeDefS1_S1_>
	  bmp388_fp[i].init();
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80057b8:	fb02 f303 	mul.w	r3, r2, r3
 80057bc:	4a2e      	ldr	r2, [pc, #184]	; (8005878 <main+0x170>)
 80057be:	4413      	add	r3, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fb1e 	bl	8000e02 <_ZN6bmp3884initEv>
	  bmp388_fp[i].calculate_coeff();
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	4a29      	ldr	r2, [pc, #164]	; (8005878 <main+0x170>)
 80057d2:	4413      	add	r3, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb fbed 	bl	8000fb4 <_ZN6bmp38815calculate_coeffEv>
	  HAL_Delay(1);
 80057da:	2001      	movs	r0, #1
 80057dc:	f002 fc2c 	bl	8008038 <HAL_Delay>
  for (int i=0; i<8; i++)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	e7c6      	b.n	8005776 <main+0x6e>
  }

  back_panel_decoder_enable();
 80057e8:	f000 fe8c 	bl	8006504 <_Z25back_panel_decoder_enablev>

  //Initialize and calculate coeffecients of the sensors on the back panel
  for (int i=0; i<8; i++)
 80057ec:	2300      	movs	r3, #0
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b07      	cmp	r3, #7
 80057f4:	dc35      	bgt.n	8005862 <main+0x15a>
  {
	  bmp388_bp[i].chip_select(chip_select_bp[i]);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <main+0x184>)
 8005802:	441a      	add	r2, r3
 8005804:	4922      	ldr	r1, [pc, #136]	; (8005890 <main+0x188>)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7fb fad2 	bl	8000db8 <_ZN6bmp38811chip_selectEt>
	  bmp388_bp[i].spi(&hspi1, &hspi2, &hspi3);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	4a1b      	ldr	r2, [pc, #108]	; (800588c <main+0x184>)
 8005820:	1898      	adds	r0, r3, r2
 8005822:	4b17      	ldr	r3, [pc, #92]	; (8005880 <main+0x178>)
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <main+0x17c>)
 8005826:	4918      	ldr	r1, [pc, #96]	; (8005888 <main+0x180>)
 8005828:	f7fb fad5 	bl	8000dd6 <_ZN6bmp3883spiEP19__SPI_HandleTypeDefS1_S1_>
	  bmp388_bp[i].init();
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <main+0x184>)
 8005838:	4413      	add	r3, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7fb fae1 	bl	8000e02 <_ZN6bmp3884initEv>
	  bmp388_bp[i].calculate_coeff();
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <main+0x184>)
 800584c:	4413      	add	r3, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f7fb fbb0 	bl	8000fb4 <_ZN6bmp38815calculate_coeffEv>
	  HAL_Delay(1);
 8005854:	2001      	movs	r0, #1
 8005856:	f002 fbef 	bl	8008038 <HAL_Delay>
  for (int i=0; i<8; i++)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	e7c6      	b.n	80057f0 <main+0xe8>
  }

  front_panel_decoder_enable();
 8005862:	f000 fe3f 	bl	80064e4 <_Z26front_panel_decoder_enablev>
  HAL_TIM_Base_Start(&htim7);				//1 us timer for gap between USB transmissions
 8005866:	480b      	ldr	r0, [pc, #44]	; (8005894 <main+0x18c>)
 8005868:	f007 fb06 	bl	800ce78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim17);			//Timer for measurement cycle
 800586c:	480a      	ldr	r0, [pc, #40]	; (8005898 <main+0x190>)
 800586e:	f007 fb73 	bl	800cf58 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005872:	e7fe      	b.n	8005872 <main+0x16a>
 8005874:	20002410 	.word	0x20002410
 8005878:	200008e0 	.word	0x200008e0
 800587c:	200008c0 	.word	0x200008c0
 8005880:	200004a0 	.word	0x200004a0
 8005884:	2000043c 	.word	0x2000043c
 8005888:	200003d8 	.word	0x200003d8
 800588c:	20001580 	.word	0x20001580
 8005890:	200008d0 	.word	0x200008d0
 8005894:	200006d0 	.word	0x200006d0
 8005898:	2000071c 	.word	0x2000071c

0800589c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b0a8      	sub	sp, #160	; 0xa0
 80058a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80058a6:	2238      	movs	r2, #56	; 0x38
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f00c fd6c 	bl	8012388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058c0:	463b      	mov	r3, r7
 80058c2:	2254      	movs	r2, #84	; 0x54
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f00c fd5e 	bl	8012388 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80058d0:	f005 faf6 	bl	800aec0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058d4:	2302      	movs	r3, #2
 80058d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058e2:	2302      	movs	r3, #2
 80058e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80058e8:	2302      	movs	r3, #2
 80058ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 18;
 80058f4:	2312      	movs	r3, #18
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058fa:	2302      	movs	r3, #2
 80058fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8005900:	2306      	movs	r3, #6
 8005902:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005906:	2302      	movs	r3, #2
 8005908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800590c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005910:	4618      	mov	r0, r3
 8005912:	f005 fb89 	bl	800b028 <HAL_RCC_OscConfig>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005926:	f000 fe67 	bl	80065f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800592a:	230f      	movs	r3, #15
 800592c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800592e:	2303      	movs	r3, #3
 8005930:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005932:	2300      	movs	r3, #0
 8005934:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005936:	2300      	movs	r3, #0
 8005938:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800593a:	2300      	movs	r3, #0
 800593c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800593e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005942:	2104      	movs	r1, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f005 fe87 	bl	800b658 <HAL_RCC_ClockConfig>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800595a:	f000 fe4d 	bl	80065f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 800595e:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8005962:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800596e:	463b      	mov	r3, r7
 8005970:	4618      	mov	r0, r3
 8005972:	f006 f855 	bl	800ba20 <HAL_RCCEx_PeriphCLKConfig>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf14      	ite	ne
 800597c:	2301      	movne	r3, #1
 800597e:	2300      	moveq	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8005986:	f000 fe37 	bl	80065f8 <Error_Handler>
  }
}
 800598a:	bf00      	nop
 800598c:	37a0      	adds	r7, #160	; 0xa0
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005998:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 800599a:	4a23      	ldr	r2, [pc, #140]	; (8005a28 <_ZL12MX_I2C1_Initv+0x94>)
 800599c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0D9FF;
 800599e:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <_ZL12MX_I2C1_Initv+0x98>)
 80059a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80059a4:	4b1f      	ldr	r3, [pc, #124]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80059aa:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80059b6:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059be:	2200      	movs	r2, #0
 80059c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059c2:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059c8:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80059ce:	4815      	ldr	r0, [pc, #84]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059d0:	f003 f870 	bl	8008ab4 <HAL_I2C_Init>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80059e4:	f000 fe08 	bl	80065f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80059e8:	2100      	movs	r1, #0
 80059ea:	480e      	ldr	r0, [pc, #56]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 80059ec:	f003 fd3c 	bl	8009468 <HAL_I2CEx_ConfigAnalogFilter>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8005a00:	f000 fdfa 	bl	80065f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005a04:	2100      	movs	r1, #0
 8005a06:	4807      	ldr	r0, [pc, #28]	; (8005a24 <_ZL12MX_I2C1_Initv+0x90>)
 8005a08:	f003 fd79 	bl	80094fe <HAL_I2CEx_ConfigDigitalFilter>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bf14      	ite	ne
 8005a12:	2301      	movne	r3, #1
 8005a14:	2300      	moveq	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8005a1c:	f000 fdec 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	2000038c 	.word	0x2000038c
 8005a28:	40005400 	.word	0x40005400
 8005a2c:	20b0d9ff 	.word	0x20b0d9ff

08005a30 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a34:	4b1d      	ldr	r3, [pc, #116]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a36:	4a1e      	ldr	r2, [pc, #120]	; (8005ab0 <_ZL12MX_SPI1_Initv+0x80>)
 8005a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a42:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a56:	4b15      	ldr	r3, [pc, #84]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005a5c:	4b13      	ldr	r3, [pc, #76]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a66:	2220      	movs	r2, #32
 8005a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a6a:	4b10      	ldr	r3, [pc, #64]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a76:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a7e:	2207      	movs	r2, #7
 8005a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005a88:	4b08      	ldr	r3, [pc, #32]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005a8e:	4807      	ldr	r0, [pc, #28]	; (8005aac <_ZL12MX_SPI1_Initv+0x7c>)
 8005a90:	f006 fa12 	bl	800beb8 <HAL_SPI_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8005aa4:	f000 fda8 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005aa8:	bf00      	nop
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	200003d8 	.word	0x200003d8
 8005ab0:	40013000 	.word	0x40013000

08005ab4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <_ZL12MX_SPI2_Initv+0x7c>)
 8005abc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005acc:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ad2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ae0:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae6:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ae8:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005afc:	2207      	movs	r2, #7
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b0c:	4807      	ldr	r0, [pc, #28]	; (8005b2c <_ZL12MX_SPI2_Initv+0x78>)
 8005b0e:	f006 f9d3 	bl	800beb8 <HAL_SPI_Init>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <_ZL12MX_SPI2_Initv+0x72>
  {
    Error_Handler();
 8005b22:	f000 fd69 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	2000043c 	.word	0x2000043c
 8005b30:	40003800 	.word	0x40003800

08005b34 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <_ZL12MX_SPI3_Initv+0x7c>)
 8005b3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b4c:	4b17      	ldr	r3, [pc, #92]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b52:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b5a:	4b14      	ldr	r3, [pc, #80]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b66:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b68:	4b10      	ldr	r3, [pc, #64]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b6e:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005b86:	4b09      	ldr	r3, [pc, #36]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005b8c:	4807      	ldr	r0, [pc, #28]	; (8005bac <_ZL12MX_SPI3_Initv+0x78>)
 8005b8e:	f006 f993 	bl	800beb8 <HAL_SPI_Init>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <_ZL12MX_SPI3_Initv+0x72>
  {
    Error_Handler();
 8005ba2:	f000 fd29 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200004a0 	.word	0x200004a0
 8005bb0:	40003c00 	.word	0x40003c00

08005bb4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bba:	1d3b      	adds	r3, r7, #4
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005bc4:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <_ZL12MX_TIM6_Initv+0x7c>)
 8005bc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 512;
 8005bca:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bd2:	4b16      	ldr	r3, [pc, #88]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30;
 8005bd8:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005bda:	221e      	movs	r2, #30
 8005bdc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005be4:	4811      	ldr	r0, [pc, #68]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005be6:	f007 f8ef 	bl	800cdc8 <HAL_TIM_Base_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8005bfa:	f000 fcfd 	bl	80065f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4808      	ldr	r0, [pc, #32]	; (8005c2c <_ZL12MX_TIM6_Initv+0x78>)
 8005c0c:	f007 fc9a 	bl	800d544 <HAL_TIMEx_MasterConfigSynchronization>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8005c20:	f000 fcea 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000684 	.word	0x20000684
 8005c30:	40001000 	.word	0x40001000

08005c34 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c3a:	1d3b      	adds	r3, r7, #4
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c46:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <_ZL12MX_TIM7_Initv+0x7c>)
 8005c48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 144-1;
 8005c4a:	4b18      	ldr	r3, [pc, #96]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c4c:	228f      	movs	r2, #143	; 0x8f
 8005c4e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005c56:	4b15      	ldr	r3, [pc, #84]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c64:	4811      	ldr	r0, [pc, #68]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c66:	f007 f8af 	bl	800cdc8 <HAL_TIM_Base_Init>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8005c7a:	f000 fcbd 	bl	80065f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c86:	1d3b      	adds	r3, r7, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4808      	ldr	r0, [pc, #32]	; (8005cac <_ZL12MX_TIM7_Initv+0x78>)
 8005c8c:	f007 fc5a 	bl	800d544 <HAL_TIMEx_MasterConfigSynchronization>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf14      	ite	ne
 8005c96:	2301      	movne	r3, #1
 8005c98:	2300      	moveq	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8005ca0:	f000 fcaa 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200006d0 	.word	0x200006d0
 8005cb0:	40001400 	.word	0x40001400

08005cb4 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <_ZL13MX_TIM17_Initv+0x54>)
 8005cbc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 65;
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005cc0:	2241      	movs	r2, #65	; 0x41
 8005cc2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2180;
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005ccc:	f640 0284 	movw	r2, #2180	; 0x884
 8005cd0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cde:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005ce4:	4807      	ldr	r0, [pc, #28]	; (8005d04 <_ZL13MX_TIM17_Initv+0x50>)
 8005ce6:	f007 f86f 	bl	800cdc8 <HAL_TIM_Base_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 8005cfa:	f000 fc7d 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005cfe:	bf00      	nop
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2000071c 	.word	0x2000071c
 8005d08:	40014800 	.word	0x40014800

08005d0c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d18:	f043 0304 	orr.w	r3, r3, #4
 8005d1c:	6493      	str	r3, [r2, #72]	; 0x48
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6493      	str	r3, [r2, #72]	; 0x48
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <_ZL11MX_DMA_Initv+0x80>)
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005d42:	2200      	movs	r2, #0
 8005d44:	2100      	movs	r1, #0
 8005d46:	200b      	movs	r0, #11
 8005d48:	f002 fa73 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005d4c:	200b      	movs	r0, #11
 8005d4e:	f002 fa8a 	bl	8008266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	200c      	movs	r0, #12
 8005d58:	f002 fa6b 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005d5c:	200c      	movs	r0, #12
 8005d5e:	f002 fa82 	bl	8008266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	200d      	movs	r0, #13
 8005d68:	f002 fa63 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005d6c:	200d      	movs	r0, #13
 8005d6e:	f002 fa7a 	bl	8008266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005d72:	2200      	movs	r2, #0
 8005d74:	2100      	movs	r1, #0
 8005d76:	200e      	movs	r0, #14
 8005d78:	f002 fa5b 	bl	8008232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005d7c:	200e      	movs	r0, #14
 8005d7e:	f002 fa72 	bl	8008266 <HAL_NVIC_EnableIRQ>

}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000

08005d90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	609a      	str	r2, [r3, #8]
 8005da2:	60da      	str	r2, [r3, #12]
 8005da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005da6:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	4a11      	ldr	r2, [pc, #68]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <_ZL12MX_GPIO_Initv+0x78>)
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	211f      	movs	r1, #31
 8005dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dde:	f002 fe51 	bl	8008a84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005de2:	231f      	movs	r3, #31
 8005de4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005de6:	2301      	movs	r3, #1
 8005de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	4619      	mov	r1, r3
 8005df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dfc:	f002 fcc0 	bl	8008780 <HAL_GPIO_Init>

}
 8005e00:	bf00      	nop
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e10:	b0a5      	sub	sp, #148	; 0x94
 8005e12:	af06      	add	r7, sp, #24
 8005e14:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a8b      	ldr	r2, [pc, #556]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d102      	bne.n	8005e24 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		HAL_TIM_Base_Start_IT(&htim6);
 8005e1e:	488b      	ldr	r0, [pc, #556]	; (800604c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e20:	f007 f89a 	bl	800cf58 <HAL_TIM_Base_Start_IT>
	}
	if (htim == &htim6)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a89      	ldr	r2, [pc, #548]	; (800604c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	f040 833b 	bne.w	80064a4 <HAL_TIM_PeriodElapsedCallback+0x698>
	{
		switch (j)
 8005e2e:	4b88      	ldr	r3, [pc, #544]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	f200 8336 	bhi.w	80064a4 <HAL_TIM_PeriodElapsedCallback+0x698>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e51 	.word	0x08005e51
 8005e44:	08005ec5 	.word	0x08005ec5
 8005e48:	0800607d 	.word	0x0800607d
 8005e4c:	08006251 	.word	0x08006251
		{

		//Sensors readout
		case 0:
			for(chip_select = 0; chip_select <8; chip_select++)
 8005e50:	4b80      	ldr	r3, [pc, #512]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	4b7f      	ldr	r3, [pc, #508]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b07      	cmp	r3, #7
 8005e5c:	dc10      	bgt.n	8005e80 <HAL_TIM_PeriodElapsedCallback+0x74>
				bmp388_fp[chip_select].readout();
 8005e5e:	4b7d      	ldr	r3, [pc, #500]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005e66:	fb02 f303 	mul.w	r3, r2, r3
 8005e6a:	4a7b      	ldr	r2, [pc, #492]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fb fa3e 	bl	80012f0 <_ZN6bmp3887readoutEv>
			for(chip_select = 0; chip_select <8; chip_select++)
 8005e74:	4b77      	ldr	r3, [pc, #476]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a76      	ldr	r2, [pc, #472]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e7ea      	b.n	8005e56 <HAL_TIM_PeriodElapsedCallback+0x4a>

			back_panel_decoder_enable();
 8005e80:	f000 fb40 	bl	8006504 <_Z25back_panel_decoder_enablev>

			for(chip_select = 0; chip_select <8; chip_select++)
 8005e84:	4b73      	ldr	r3, [pc, #460]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	4b72      	ldr	r3, [pc, #456]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b07      	cmp	r3, #7
 8005e90:	dc10      	bgt.n	8005eb4 <HAL_TIM_PeriodElapsedCallback+0xa8>
				bmp388_bp[chip_select].readout();
 8005e92:	4b70      	ldr	r3, [pc, #448]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	4a6f      	ldr	r2, [pc, #444]	; (800605c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fb fa24 	bl	80012f0 <_ZN6bmp3887readoutEv>
			for(chip_select = 0; chip_select <8; chip_select++)
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	4a69      	ldr	r2, [pc, #420]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e7ea      	b.n	8005e8a <HAL_TIM_PeriodElapsedCallback+0x7e>

			front_panel_decoder_enable();
 8005eb4:	f000 fb16 	bl	80064e4 <_Z26front_panel_decoder_enablev>
			j++;
 8005eb8:	4b65      	ldr	r3, [pc, #404]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a64      	ldr	r2, [pc, #400]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005ec0:	6013      	str	r3, [r2, #0]
			break;
 8005ec2:	e2ef      	b.n	80064a4 <HAL_TIM_PeriodElapsedCallback+0x698>

		//Compensate the sensors on the front panel and transmit data via USB
		case 1:
			delay_us(100);
 8005ec4:	2064      	movs	r0, #100	; 0x64
 8005ec6:	f000 fb2d 	bl	8006524 <_Z8delay_ust>
			sprintf((char*)buf, "%s \r\n","Front Panel:");
 8005eca:	4a65      	ldr	r2, [pc, #404]	; (8006060 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005ecc:	4965      	ldr	r1, [pc, #404]	; (8006064 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005ece:	4866      	ldr	r0, [pc, #408]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005ed0:	f00d f9da 	bl	8013288 <siprintf>
			CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 8005ed4:	4864      	ldr	r0, [pc, #400]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005ed6:	f7fa f9a3 	bl	8000220 <strlen>
 8005eda:	4603      	mov	r3, r0
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4861      	ldr	r0, [pc, #388]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005ee2:	f00b fb7d 	bl	80115e0 <CDC_Transmit_FS>

			for (chip_select = 0; chip_select < 8; chip_select++)
 8005ee6:	4b5b      	ldr	r3, [pc, #364]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	4b59      	ldr	r3, [pc, #356]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b07      	cmp	r3, #7
 8005ef2:	f300 80a2 	bgt.w	800603a <HAL_TIM_PeriodElapsedCallback+0x22e>
			{
				bmp388_fp[chip_select].compensate();
 8005ef6:	4b57      	ldr	r3, [pc, #348]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	4a55      	ldr	r2, [pc, #340]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f04:	4413      	add	r3, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fb fa86 	bl	8001418 <_ZN6bmp38810compensateEv>
				cop_fp_y.centre_of_pressure(bmp388_fp[chip_select].pressure_, cop_fp_y.distance_y_fp);
 8005f0c:	4b51      	ldr	r3, [pc, #324]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	3308      	adds	r3, #8
 8005f1a:	4a4f      	ldr	r2, [pc, #316]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4a52      	ldr	r2, [pc, #328]	; (800606c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005f22:	4619      	mov	r1, r3
 8005f24:	4852      	ldr	r0, [pc, #328]	; (8006070 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005f26:	f000 fb1b 	bl	8006560 <_ZN5cop_t18centre_of_pressureEPfS0_>

				//Uncomment for the shape of contact
				//shape_of_contact(bmp388_fp[chip_select].pressure_);

				sprintf((char*)buf, " %d %0.4f %0.4f %0.4f \r\n", chip_select+1, bmp388_fp[chip_select].pressure_[0], bmp388_fp[chip_select].pressure_[1], bmp388_fp[chip_select].pressure_[2]);
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1c5e      	adds	r6, r3, #1
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a48      	ldr	r2, [pc, #288]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f36:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	4413      	add	r3, r2
 8005f40:	330c      	adds	r3, #12
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fa fb27 	bl	8000598 <__aeabi_f2d>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	4b41      	ldr	r3, [pc, #260]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a41      	ldr	r2, [pc, #260]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f54:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3310      	adds	r3, #16
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa fb18 	bl	8000598 <__aeabi_f2d>
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a39      	ldr	r2, [pc, #228]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005f72:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fa fb09 	bl	8000598 <__aeabi_f2d>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f8e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005f92:	e9cd 4500 	strd	r4, r5, [sp]
 8005f96:	4632      	mov	r2, r6
 8005f98:	4936      	ldr	r1, [pc, #216]	; (8006074 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005f9a:	4833      	ldr	r0, [pc, #204]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005f9c:	f00d f974 	bl	8013288 <siprintf>
				CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 8005fa0:	4831      	ldr	r0, [pc, #196]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005fa2:	f7fa f93d 	bl	8000220 <strlen>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4619      	mov	r1, r3
 8005fac:	482e      	ldr	r0, [pc, #184]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005fae:	f00b fb17 	bl	80115e0 <CDC_Transmit_FS>
				pressure_fp[chip_select][0] = bmp388_fp[chip_select].pressure_[0];
 8005fb2:	4b28      	ldr	r3, [pc, #160]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a27      	ldr	r2, [pc, #156]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	4927      	ldr	r1, [pc, #156]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005fbc:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8005fc0:	fb00 f303 	mul.w	r3, r0, r3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	482b      	ldr	r0, [pc, #172]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005fcc:	4613      	mov	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4403      	add	r3, r0
 8005fd6:	6019      	str	r1, [r3, #0]
				pressure_fp[chip_select][1] = bmp388_fp[chip_select].pressure_[1];
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	491d      	ldr	r1, [pc, #116]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005fe2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8005fe6:	fb00 f303 	mul.w	r3, r0, r3
 8005fea:	440b      	add	r3, r1
 8005fec:	3310      	adds	r3, #16
 8005fee:	6819      	ldr	r1, [r3, #0]
 8005ff0:	4821      	ldr	r0, [pc, #132]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4403      	add	r3, r0
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	6019      	str	r1, [r3, #0]
				pressure_fp[chip_select][2] = bmp388_fp[chip_select].pressure_[2];
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a13      	ldr	r2, [pc, #76]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	4913      	ldr	r1, [pc, #76]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800600a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800600e:	fb00 f303 	mul.w	r3, r0, r3
 8006012:	440b      	add	r3, r1
 8006014:	3314      	adds	r3, #20
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	4817      	ldr	r0, [pc, #92]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4403      	add	r3, r0
 8006024:	3308      	adds	r3, #8
 8006026:	6019      	str	r1, [r3, #0]
				delay_us(100);
 8006028:	2064      	movs	r0, #100	; 0x64
 800602a:	f000 fa7b 	bl	8006524 <_Z8delay_ust>
			for (chip_select = 0; chip_select < 8; chip_select++)
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a07      	ldr	r2, [pc, #28]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e758      	b.n	8005eec <HAL_TIM_PeriodElapsedCallback+0xe0>
			}
			j++;
 800603a:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	4a03      	ldr	r2, [pc, #12]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006042:	6013      	str	r3, [r2, #0]
			break;
 8006044:	e22e      	b.n	80064a4 <HAL_TIM_PeriodElapsedCallback+0x698>
 8006046:	bf00      	nop
 8006048:	2000071c 	.word	0x2000071c
 800604c:	20000684 	.word	0x20000684
 8006050:	20000834 	.word	0x20000834
 8006054:	20000830 	.word	0x20000830
 8006058:	200008e0 	.word	0x200008e0
 800605c:	20001580 	.word	0x20001580
 8006060:	08016bcc 	.word	0x08016bcc
 8006064:	08016bdc 	.word	0x08016bdc
 8006068:	20000838 	.word	0x20000838
 800606c:	20002234 	.word	0x20002234
 8006070:	20002224 	.word	0x20002224
 8006074:	08016be4 	.word	0x08016be4
 8006078:	20000770 	.word	0x20000770

		//Compensate the sensors on the back panel and transmit data via USB
		case 2:
			delay_us(100);
 800607c:	2064      	movs	r0, #100	; 0x64
 800607e:	f000 fa51 	bl	8006524 <_Z8delay_ust>

			sprintf((char*)buf, "%s \r\n","Back Panel:");
 8006082:	4ab0      	ldr	r2, [pc, #704]	; (8006344 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8006084:	49b0      	ldr	r1, [pc, #704]	; (8006348 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8006086:	48b1      	ldr	r0, [pc, #708]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006088:	f00d f8fe 	bl	8013288 <siprintf>
			CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 800608c:	48af      	ldr	r0, [pc, #700]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 800608e:	f7fa f8c7 	bl	8000220 <strlen>
 8006092:	4603      	mov	r3, r0
 8006094:	b29b      	uxth	r3, r3
 8006096:	4619      	mov	r1, r3
 8006098:	48ac      	ldr	r0, [pc, #688]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 800609a:	f00b faa1 	bl	80115e0 <CDC_Transmit_FS>

			for (chip_select = 0; chip_select < 8; chip_select++)
 800609e:	4bac      	ldr	r3, [pc, #688]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	4baa      	ldr	r3, [pc, #680]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	f300 80a2 	bgt.w	80061f2 <HAL_TIM_PeriodElapsedCallback+0x3e6>
			{
				bmp388_bp[chip_select].compensate();
 80060ae:	4ba8      	ldr	r3, [pc, #672]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	4aa6      	ldr	r2, [pc, #664]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80060bc:	4413      	add	r3, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fb f9aa 	bl	8001418 <_ZN6bmp38810compensateEv>
				cop_bp_y.centre_of_pressure(bmp388_bp[chip_select].pressure_, cop_bp_y.distance_y_bp);
 80060c4:	4ba2      	ldr	r3, [pc, #648]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80060cc:	fb02 f303 	mul.w	r3, r2, r3
 80060d0:	3308      	adds	r3, #8
 80060d2:	4aa0      	ldr	r2, [pc, #640]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80060d4:	4413      	add	r3, r2
 80060d6:	3304      	adds	r3, #4
 80060d8:	4a9f      	ldr	r2, [pc, #636]	; (8006358 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80060da:	4619      	mov	r1, r3
 80060dc:	489f      	ldr	r0, [pc, #636]	; (800635c <HAL_TIM_PeriodElapsedCallback+0x550>)
 80060de:	f000 fa3f 	bl	8006560 <_ZN5cop_t18centre_of_pressureEPfS0_>

				//Uncomment for the shape of contact
				//shape_of_contact(bmp388_bp[chip_select].pressure_);

				sprintf((char*)buf, " %d %0.4f %0.4f %0.4f \r\n", chip_select+1, bmp388_bp[chip_select].pressure_[0], bmp388_bp[chip_select].pressure_[1], bmp388_bp[chip_select].pressure_[2]);
 80060e2:	4b9b      	ldr	r3, [pc, #620]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1c5e      	adds	r6, r3, #1
 80060e8:	4b99      	ldr	r3, [pc, #612]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a99      	ldr	r2, [pc, #612]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80060ee:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	330c      	adds	r3, #12
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fa fa4b 	bl	8000598 <__aeabi_f2d>
 8006102:	4604      	mov	r4, r0
 8006104:	460d      	mov	r5, r1
 8006106:	4b92      	ldr	r3, [pc, #584]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a92      	ldr	r2, [pc, #584]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800610c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	3310      	adds	r3, #16
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f7fa fa3c 	bl	8000598 <__aeabi_f2d>
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	4b8a      	ldr	r3, [pc, #552]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a8a      	ldr	r2, [pc, #552]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800612a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3314      	adds	r3, #20
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7fa fa2d 	bl	8000598 <__aeabi_f2d>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006146:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800614a:	e9cd 4500 	strd	r4, r5, [sp]
 800614e:	4632      	mov	r2, r6
 8006150:	4983      	ldr	r1, [pc, #524]	; (8006360 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8006152:	487e      	ldr	r0, [pc, #504]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006154:	f00d f898 	bl	8013288 <siprintf>
				CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 8006158:	487c      	ldr	r0, [pc, #496]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 800615a:	f7fa f861 	bl	8000220 <strlen>
 800615e:	4603      	mov	r3, r0
 8006160:	b29b      	uxth	r3, r3
 8006162:	4619      	mov	r1, r3
 8006164:	4879      	ldr	r0, [pc, #484]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006166:	f00b fa3b 	bl	80115e0 <CDC_Transmit_FS>

				pressure_bp[chip_select][0] = bmp388_bp[chip_select].pressure_[0];
 800616a:	4b79      	ldr	r3, [pc, #484]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a78      	ldr	r2, [pc, #480]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	4978      	ldr	r1, [pc, #480]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8006174:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8006178:	fb00 f303 	mul.w	r3, r0, r3
 800617c:	440b      	add	r3, r1
 800617e:	330c      	adds	r3, #12
 8006180:	6819      	ldr	r1, [r3, #0]
 8006182:	4878      	ldr	r0, [pc, #480]	; (8006364 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4403      	add	r3, r0
 800618e:	6019      	str	r1, [r3, #0]
				pressure_bp[chip_select][1] = bmp388_bp[chip_select].pressure_[1];
 8006190:	4b6f      	ldr	r3, [pc, #444]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a6e      	ldr	r2, [pc, #440]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	496e      	ldr	r1, [pc, #440]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800619a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800619e:	fb00 f303 	mul.w	r3, r0, r3
 80061a2:	440b      	add	r3, r1
 80061a4:	3310      	adds	r3, #16
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	486e      	ldr	r0, [pc, #440]	; (8006364 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4403      	add	r3, r0
 80061b4:	3304      	adds	r3, #4
 80061b6:	6019      	str	r1, [r3, #0]
				pressure_bp[chip_select][2] = bmp388_bp[chip_select].pressure_[2];
 80061b8:	4b65      	ldr	r3, [pc, #404]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a64      	ldr	r2, [pc, #400]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	4964      	ldr	r1, [pc, #400]	; (8006354 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80061c2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80061c6:	fb00 f303 	mul.w	r3, r0, r3
 80061ca:	440b      	add	r3, r1
 80061cc:	3314      	adds	r3, #20
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	4864      	ldr	r0, [pc, #400]	; (8006364 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4403      	add	r3, r0
 80061dc:	3308      	adds	r3, #8
 80061de:	6019      	str	r1, [r3, #0]
				delay_us(100);
 80061e0:	2064      	movs	r0, #100	; 0x64
 80061e2:	f000 f99f 	bl	8006524 <_Z8delay_ust>
			for (chip_select = 0; chip_select < 8; chip_select++)
 80061e6:	4b5a      	ldr	r3, [pc, #360]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a58      	ldr	r2, [pc, #352]	; (8006350 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e758      	b.n	80060a4 <HAL_TIM_PeriodElapsedCallback+0x298>
			}
			delay_us(100);
 80061f2:	2064      	movs	r0, #100	; 0x64
 80061f4:	f000 f996 	bl	8006524 <_Z8delay_ust>
			cop_y = (cop_fp_y.cop_panel + cop_bp_y.cop_panel) / 2;
 80061f8:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80061fa:	ed93 7a00 	vldr	s14, [r3]
 80061fe:	4b57      	ldr	r3, [pc, #348]	; (800635c <HAL_TIM_PeriodElapsedCallback+0x550>)
 8006200:	edd3 7a00 	vldr	s15, [r3]
 8006204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006208:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800620c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006210:	4b56      	ldr	r3, [pc, #344]	; (800636c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006212:	edc3 7a00 	vstr	s15, [r3]
			sprintf((char*)buf, "%s %0.2f \r\n","CoP along the foot length:", cop_y);
 8006216:	4b55      	ldr	r3, [pc, #340]	; (800636c <HAL_TIM_PeriodElapsedCallback+0x560>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa f9bc 	bl	8000598 <__aeabi_f2d>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	e9cd 2300 	strd	r2, r3, [sp]
 8006228:	4a51      	ldr	r2, [pc, #324]	; (8006370 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800622a:	4952      	ldr	r1, [pc, #328]	; (8006374 <HAL_TIM_PeriodElapsedCallback+0x568>)
 800622c:	4847      	ldr	r0, [pc, #284]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 800622e:	f00d f82b 	bl	8013288 <siprintf>
			CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 8006232:	4846      	ldr	r0, [pc, #280]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006234:	f7f9 fff4 	bl	8000220 <strlen>
 8006238:	4603      	mov	r3, r0
 800623a:	b29b      	uxth	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	4843      	ldr	r0, [pc, #268]	; (800634c <HAL_TIM_PeriodElapsedCallback+0x540>)
 8006240:	f00b f9ce 	bl	80115e0 <CDC_Transmit_FS>
			j++;
 8006244:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a4b      	ldr	r2, [pc, #300]	; (8006378 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800624c:	6013      	str	r3, [r2, #0]
			break;
 800624e:	e129      	b.n	80064a4 <HAL_TIM_PeriodElapsedCallback+0x698>

		//IMU interface
		case 3:
			 ICM42605.ReadAcc();
 8006250:	484a      	ldr	r0, [pc, #296]	; (800637c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006252:	f7fb fc97 	bl	8001b84 <_ZN8ICM426057ReadAccEv>
			 ICM42605.ReadGyro();
 8006256:	4849      	ldr	r0, [pc, #292]	; (800637c <HAL_TIM_PeriodElapsedCallback+0x570>)
 8006258:	f7fb fe0e 	bl	8001e78 <_ZN8ICM426058ReadGyroEv>

			 R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 800625c:	2100      	movs	r1, #0
 800625e:	4848      	ldr	r0, [pc, #288]	; (8006380 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8006260:	f000 fa28 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8006264:	4603      	mov	r3, r0
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f7fc f874 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 800626e:	4603      	mov	r3, r0
 8006270:	edd3 7a00 	vldr	s15, [r3]
 8006274:	2164      	movs	r1, #100	; 0x64
 8006276:	eeb0 0a67 	vmov.f32	s0, s15
 800627a:	4842      	ldr	r0, [pc, #264]	; (8006384 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800627c:	f7fe fba7 	bl	80049ce <_ZN7kf_math8varianceEfi>
 8006280:	eef0 7a40 	vmov.f32	s15, s0
 8006284:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38
 800628e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006294:	2302      	movs	r3, #2
 8006296:	633b      	str	r3, [r7, #48]	; 0x30
 8006298:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800629c:	4618      	mov	r0, r3
 800629e:	f7fc f812 	bl	80022c6 <_ZNSaIfEC1Ev>
 80062a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062a6:	f107 0014 	add.w	r0, r7, #20
 80062aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80062ae:	ca06      	ldmia	r2, {r1, r2}
 80062b0:	f7fc f815 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	64bb      	str	r3, [r7, #72]	; 0x48
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 80062ba:	2101      	movs	r1, #1
 80062bc:	4830      	ldr	r0, [pc, #192]	; (8006380 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80062be:	f000 f9f9 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2101      	movs	r1, #1
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc f845 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80062cc:	4603      	mov	r3, r0
 80062ce:	edd3 7a00 	vldr	s15, [r3]
 80062d2:	2164      	movs	r1, #100	; 0x64
 80062d4:	eeb0 0a67 	vmov.f32	s0, s15
 80062d8:	482a      	ldr	r0, [pc, #168]	; (8006384 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80062da:	f7fe fb78 	bl	80049ce <_ZN7kf_math8varianceEfi>
 80062de:	eef0 7a40 	vmov.f32	s15, s0
			 R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 80062e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 80062e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062ea:	643b      	str	r3, [r7, #64]	; 0x40
 80062ec:	2302      	movs	r3, #2
 80062ee:	647b      	str	r3, [r7, #68]	; 0x44
 80062f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb ffe6 	bl	80022c6 <_ZNSaIfEC1Ev>
 80062fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	f103 000c 	add.w	r0, r3, #12
 8006306:	4613      	mov	r3, r2
 8006308:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800630c:	ca06      	ldmia	r2, {r1, r2}
 800630e:	f7fb ffe6 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006312:	f107 0314 	add.w	r3, r7, #20
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	2302      	movs	r3, #2
 800631a:	613b      	str	r3, [r7, #16]
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006324:	4818      	ldr	r0, [pc, #96]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8006326:	f7fb fffb 	bl	8002320 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEaSESt16initializer_listIS1_E>
			 R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 800632a:	f107 0414 	add.w	r4, r7, #20
 800632e:	3418      	adds	r4, #24
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	429c      	cmp	r4, r3
 8006336:	d029      	beq.n	800638c <HAL_TIM_PeriodElapsedCallback+0x580>
 8006338:	3c0c      	subs	r4, #12
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 800633a:	4620      	mov	r0, r4
 800633c:	f7fb fefa 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
			 R = {{kf_math.variance(ICM42605.acc_[0][0], 100), 0},
 8006340:	e7f6      	b.n	8006330 <HAL_TIM_PeriodElapsedCallback+0x524>
 8006342:	bf00      	nop
 8006344:	08016c00 	.word	0x08016c00
 8006348:	08016bdc 	.word	0x08016bdc
 800634c:	20000838 	.word	0x20000838
 8006350:	20000830 	.word	0x20000830
 8006354:	20001580 	.word	0x20001580
 8006358:	2000224c 	.word	0x2000224c
 800635c:	20002248 	.word	0x20002248
 8006360:	08016be4 	.word	0x08016be4
 8006364:	200007d0 	.word	0x200007d0
 8006368:	20002224 	.word	0x20002224
 800636c:	20002220 	.word	0x20002220
 8006370:	08016c0c 	.word	0x08016c0c
 8006374:	08016c28 	.word	0x08016c28
 8006378:	20000834 	.word	0x20000834
 800637c:	20002410 	.word	0x20002410
 8006380:	2000241c 	.word	0x2000241c
 8006384:	2000226c 	.word	0x2000226c
 8006388:	200008b4 	.word	0x200008b4
			   {0, kf_math.variance(ICM42605.acc_[1][1], 100)}};
 800638c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006390:	4618      	mov	r0, r3
 8006392:	f7fb feaa 	bl	80020ea <_ZNSaIfED1Ev>
 8006396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800639a:	4618      	mov	r0, r3
 800639c:	f7fb fea5 	bl	80020ea <_ZNSaIfED1Ev>

			 kf.Prediction(ICM42605.gyro_);	//Control vector
 80063a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063a4:	4942      	ldr	r1, [pc, #264]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fcae 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80063ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063b0:	4619      	mov	r1, r3
 80063b2:	4840      	ldr	r0, [pc, #256]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80063b4:	f7fe f83a 	bl	800442c <_ZN6Kalman10PredictionESt6vectorIS0_IfSaIfEESaIS2_EE>
 80063b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fb fe69 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
			 kf.KalmanGain(R);				//Measurement noise vector
 80063c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80063c6:	493c      	ldr	r1, [pc, #240]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fc9d 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80063ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80063d2:	4619      	mov	r1, r3
 80063d4:	4837      	ldr	r0, [pc, #220]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80063d6:	f7fe f910 	bl	80045fa <_ZN6Kalman10KalmanGainESt6vectorIS0_IfSaIfEESaIS2_EE>
 80063da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fb fe58 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
			 kf.Update(ICM42605.acc_);
 80063e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063e8:	4934      	ldr	r1, [pc, #208]	; (80064bc <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fc8c 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80063f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063f4:	4619      	mov	r1, r3
 80063f6:	482f      	ldr	r0, [pc, #188]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 80063f8:	f7fe f9e6 	bl	80047c8 <_ZN6Kalman6UpdateESt6vectorIS0_IfSaIfEESaIS2_EE>
 80063fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006400:	4618      	mov	r0, r3
 8006402:	f7fb fe47 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>

			 //Convert from radians to degrees
			 kalman_pitch = kf.x_e_[0][0]*57.296f;
 8006406:	2100      	movs	r1, #0
 8006408:	482a      	ldr	r0, [pc, #168]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 800640a:	f000 f953 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 800640e:	4603      	mov	r3, r0
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f7fb ff9f 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8006418:	4603      	mov	r3, r0
 800641a:	edd3 7a00 	vldr	s15, [r3]
 800641e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80064c0 <HAL_TIM_PeriodElapsedCallback+0x6b4>
 8006422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8006428:	edc3 7a00 	vstr	s15, [r3]
			 kalman_roll = kf.x_e_[1][1]*57.296f;
 800642c:	2101      	movs	r1, #1
 800642e:	4821      	ldr	r0, [pc, #132]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8006430:	f000 f940 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8006434:	4603      	mov	r3, r0
 8006436:	2101      	movs	r1, #1
 8006438:	4618      	mov	r0, r3
 800643a:	f7fb ff8c 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 800643e:	4603      	mov	r3, r0
 8006440:	edd3 7a00 	vldr	s15, [r3]
 8006444:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80064c0 <HAL_TIM_PeriodElapsedCallback+0x6b4>
 8006448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800644c:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 800644e:	edc3 7a00 	vstr	s15, [r3]

			 sprintf((char*)buf, "%s %0.2f %s %0.2f \r\n","Roll:", kalman_roll, "Pitch:", kalman_pitch);
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fa f89e 	bl	8000598 <__aeabi_f2d>
 800645c:	4604      	mov	r4, r0
 800645e:	460d      	mov	r5, r1
 8006460:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fa f897 	bl	8000598 <__aeabi_f2d>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006472:	4b16      	ldr	r3, [pc, #88]	; (80064cc <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8006474:	9302      	str	r3, [sp, #8]
 8006476:	e9cd 4500 	strd	r4, r5, [sp]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 800647c:	4915      	ldr	r1, [pc, #84]	; (80064d4 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 800647e:	4816      	ldr	r0, [pc, #88]	; (80064d8 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8006480:	f00c ff02 	bl	8013288 <siprintf>
			 CDC_Transmit_FS((uint8_t*)buf, strlen((char*)buf));
 8006484:	4814      	ldr	r0, [pc, #80]	; (80064d8 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8006486:	f7f9 fecb 	bl	8000220 <strlen>
 800648a:	4603      	mov	r3, r0
 800648c:	b29b      	uxth	r3, r3
 800648e:	4619      	mov	r1, r3
 8006490:	4811      	ldr	r0, [pc, #68]	; (80064d8 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8006492:	f00b f8a5 	bl	80115e0 <CDC_Transmit_FS>

			 j=0;
 8006496:	4b11      	ldr	r3, [pc, #68]	; (80064dc <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

			 HAL_TIM_Base_Stop_IT(&htim6);
 800649c:	4810      	ldr	r0, [pc, #64]	; (80064e0 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 800649e:	f006 fdd3 	bl	800d048 <HAL_TIM_Base_Stop_IT>
			 break;
 80064a2:	bf00      	nop
		}
	}
}
 80064a4:	bf00      	nop
 80064a6:	377c      	adds	r7, #124	; 0x7c
 80064a8:	46bd      	mov	sp, r7
 80064aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ae:	bf00      	nop
 80064b0:	20002410 	.word	0x20002410
 80064b4:	20002450 	.word	0x20002450
 80064b8:	200008b4 	.word	0x200008b4
 80064bc:	2000241c 	.word	0x2000241c
 80064c0:	42652f1b 	.word	0x42652f1b
 80064c4:	2000076c 	.word	0x2000076c
 80064c8:	20000768 	.word	0x20000768
 80064cc:	08016c54 	.word	0x08016c54
 80064d0:	08016c34 	.word	0x08016c34
 80064d4:	08016c3c 	.word	0x08016c3c
 80064d8:	20000838 	.word	0x20000838
 80064dc:	20000834 	.word	0x20000834
 80064e0:	20000684 	.word	0x20000684

080064e4 <_Z26front_panel_decoder_enablev>:

void front_panel_decoder_enable()
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 	//Back panel Decoder disable
 80064e8:	2201      	movs	r2, #1
 80064ea:	2110      	movs	r1, #16
 80064ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064f0:	f002 fac8 	bl	8008a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET); 	//Front panel Decoder enable
 80064f4:	2200      	movs	r2, #0
 80064f6:	2108      	movs	r1, #8
 80064f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064fc:	f002 fac2 	bl	8008a84 <HAL_GPIO_WritePin>
}
 8006500:	bf00      	nop
 8006502:	bd80      	pop	{r7, pc}

08006504 <_Z25back_panel_decoder_enablev>:

void back_panel_decoder_enable()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//Back panel Decoder enable
 8006508:	2200      	movs	r2, #0
 800650a:	2110      	movs	r1, #16
 800650c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006510:	f002 fab8 	bl	8008a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET); 	//Front panel Decoder disable
 8006514:	2201      	movs	r2, #1
 8006516:	2108      	movs	r1, #8
 8006518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800651c:	f002 fab2 	bl	8008a84 <HAL_GPIO_WritePin>
}
 8006520:	bf00      	nop
 8006522:	bd80      	pop	{r7, pc}

08006524 <_Z8delay_ust>:


//1 microsecond delay
void delay_us (uint16_t us)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0);  			// set the counter value at 0
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <_Z8delay_ust+0x38>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <_Z8delay_ust+0x38>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	429a      	cmp	r2, r3
 8006540:	bf34      	ite	cc
 8006542:	2301      	movcc	r3, #1
 8006544:	2300      	movcs	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d000      	beq.n	800654e <_Z8delay_ust+0x2a>
 800654c:	e7f3      	b.n	8006536 <_Z8delay_ust+0x12>
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	200006d0 	.word	0x200006d0

08006560 <_ZN5cop_t18centre_of_pressureEPfS0_>:
	}
}
*/

void cop_t::centre_of_pressure(float p[], float y[])
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
	cop_numerator = (p[0] * y[0] + p[1] * y[1] + p[2] * y[2]);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	ed93 7a00 	vldr	s14, [r3]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	edd3 7a00 	vldr	s15, [r3]
 8006578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	3304      	adds	r3, #4
 8006580:	edd3 6a00 	vldr	s13, [r3]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3304      	adds	r3, #4
 8006588:	edd3 7a00 	vldr	s15, [r3]
 800658c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	3308      	adds	r3, #8
 8006598:	edd3 6a00 	vldr	s13, [r3]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3308      	adds	r3, #8
 80065a0:	edd3 7a00 	vldr	s15, [r3]
 80065a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	edc3 7a07 	vstr	s15, [r3, #28]
	cop_denominator =  p[0] + p[1] + p[2];
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	ed93 7a00 	vldr	s14, [r3]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	3304      	adds	r3, #4
 80065bc:	edd3 7a00 	vldr	s15, [r3]
 80065c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	3308      	adds	r3, #8
 80065c8:	edd3 7a00 	vldr	s15, [r3]
 80065cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	edc3 7a08 	vstr	s15, [r3, #32]
	cop_panel = cop_numerator / cop_denominator;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	edd3 6a07 	vldr	s13, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	ed93 7a08 	vldr	s14, [r3, #32]
 80065e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	edc3 7a00 	vstr	s15, [r3]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065fc:	b672      	cpsid	i
}
 80065fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006600:	e7fe      	b.n	8006600 <Error_Handler+0x8>

08006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>:
      vector(initializer_list<value_type> __l,
 8006602:	b5b0      	push	{r4, r5, r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	1d38      	adds	r0, r7, #4
 800660c:	e880 0006 	stmia.w	r0, {r1, r2}
 8006610:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe ff28 	bl	800546c <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1ERKS3_>
	_M_range_initialize(__l.begin(), __l.end(),
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fc f963 	bl	80028ea <_ZNKSt16initializer_listISt6vectorIfSaIfEEE5beginEv>
 8006624:	4604      	mov	r4, r0
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fc f96a 	bl	8002902 <_ZNKSt16initializer_listISt6vectorIfSaIfEEE3endEv>
 800662e:	4602      	mov	r2, r0
 8006630:	462b      	mov	r3, r5
 8006632:	4621      	mov	r1, r4
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f850 	bl	80066da <_ZNSt6vectorIS_IfSaIfEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>
      }
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bdb0      	pop	{r4, r5, r7, pc}

08006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>:
      vector(size_type __n, const value_type& __value,
 8006644:	b590      	push	{r4, r7, lr}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 8006652:	68fc      	ldr	r4, [r7, #12]
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	68b8      	ldr	r0, [r7, #8]
 8006658:	f7fc faa4 	bl	8002ba4 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 800665c:	4603      	mov	r3, r0
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	4619      	mov	r1, r3
 8006662:	4620      	mov	r0, r4
 8006664:	f7fd fc49 	bl	8003efa <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f870 	bl	8006752 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	bd90      	pop	{r4, r7, pc}

0800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>:
      vector(size_type __n, const value_type& __value,
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
      : _Base(_S_check_init_len(__n, __a), __a)
 800668a:	68fc      	ldr	r4, [r7, #12]
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	68b8      	ldr	r0, [r7, #8]
 8006690:	f7fc fc78 	bl	8002f84 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
 8006694:	4603      	mov	r3, r0
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4619      	mov	r1, r3
 800669a:	4620      	mov	r0, r4
 800669c:	f7fe fc7b 	bl	8004f96 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EEC1EjRKS3_>
      { _M_fill_initialize(__n, __value); }
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f86d 	bl	8006784 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE18_M_fill_initializeEjRKS1_>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd90      	pop	{r4, r7, pc}

080066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
      }
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <_ZNSt6vectorIS_IfSaIfEESaIS1_EE19_M_range_initializeIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80066da:	b590      	push	{r4, r7, lr}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	68b8      	ldr	r0, [r7, #8]
 80066ec:	f7fc fc1f 	bl	8002f2e <_ZSt8distanceIPKSt6vectorIfSaIfEEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 80066f0:	4603      	mov	r3, r0
 80066f2:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80066f4:	68fc      	ldr	r4, [r7, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fb fe7a 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 80066fe:	4603      	mov	r3, r0
 8006700:	4619      	mov	r1, r3
 8006702:	6978      	ldr	r0, [r7, #20]
 8006704:	f7fc fc3e 	bl	8002f84 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE17_S_check_init_lenEjRKS2_>
 8006708:	4603      	mov	r3, r0
 800670a:	4619      	mov	r1, r3
 800670c:	4620      	mov	r0, r4
 800670e:	f7fc fee1 	bl	80034d4 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE11_M_allocateEj>
 8006712:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6819      	ldr	r1, [r3, #0]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	18ca      	adds	r2, r1, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fb fe5d 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 8006738:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800673a:	4622      	mov	r2, r4
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7fc fccb 	bl	80030da <_ZSt22__uninitialized_copy_aIPKSt6vectorIfSaIfEEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 8006744:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]
	}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}

08006752 <_ZNSt6vectorIfSaIfEE18_M_fill_initializeEjRKf>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 8006752:	b590      	push	{r4, r7, lr}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fb fe8f 	bl	8002488 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800676a:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f820 	bl	80067b6 <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>
 8006776:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	605a      	str	r2, [r3, #4]
      }
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}

08006784 <_ZNSt6vectorIS_IfSaIfEESaIS1_EE18_M_fill_initializeEjRKS1_>:
      _M_fill_initialize(size_type __n, const value_type& __value)
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fb fe2b 	bl	80023f2 <_ZNSt12_Vector_baseISt6vectorIfSaIfEESaIS2_EE19_M_get_Tp_allocatorEv>
 800679c:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 f818 	bl	80067d8 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIfSaIfEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
 80067a8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	605a      	str	r2, [r3, #4]
      }
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd90      	pop	{r4, r7, pc}

080067b6 <_ZSt24__uninitialized_fill_n_aIPfjffET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f816 	bl	80067fa <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>
 80067ce:	4603      	mov	r3, r0
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIfSaIfEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f817 	bl	800681e <_ZSt20uninitialized_fill_nIPSt6vectorIfSaIfEEjS2_ET_S4_T0_RKT1_>
 80067f0:	4603      	mov	r3, r0
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZSt20uninitialized_fill_nIPfjfET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f817 	bl	8006842 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>
 8006814:	4603      	mov	r3, r0
    }
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <_ZSt20uninitialized_fill_nIPSt6vectorIfSaIfEEjS2_ET_S4_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f815 	bl	8006862 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_>
 8006838:	4603      	mov	r3, r0
    }
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfjfEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f824 	bl	80068a0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>
 8006858:	4603      	mov	r3, r0
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, (void) ++__cur)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 8006878:	6978      	ldr	r0, [r7, #20]
 800687a:	f7fc fe95 	bl	80035a8 <_ZSt11__addressofISt6vectorIfSaIfEEEPT_RS3_>
 800687e:	4603      	mov	r3, r0
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd f8e0 	bl	8003a48 <_ZSt10_ConstructISt6vectorIfSaIfEEJRKS2_EEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3b01      	subs	r3, #1
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	330c      	adds	r3, #12
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e7ed      	b.n	8006872 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIfSaIfEEjS4_EET_S6_T0_RKT1_+0x10>
	      return __cur;
 8006896:	697b      	ldr	r3, [r7, #20]
	}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <_ZSt6fill_nIPfjfET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
      __glibcxx_requires_can_increment(__first, __n);

      return std::__niter_wrap(__first,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc fec7 	bl	8003642 <_ZSt12__niter_baseIPfET_S1_>
 80068b4:	4603      	mov	r3, r0
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f80c 	bl	80068d8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>
 80068c0:	4602      	mov	r2, r0
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4611      	mov	r1, r2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fc fed7 	bl	800367c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80068ce:	4603      	mov	r3, r0
		std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	613b      	str	r3, [r7, #16]
      for (__decltype(__n + 0) __niter = __n;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, (void) ++__first)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x30>
	*__first = __tmp;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	601a      	str	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3304      	adds	r3, #4
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e7f2      	b.n	80068ee <_ZSt10__fill_n_aIPfjfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_+0x16>
      return __first;
 8006908:	68fb      	ldr	r3, [r7, #12]
    }
 800690a:	4618      	mov	r0, r3
 800690c:	371c      	adds	r7, #28
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006918:	b5b0      	push	{r4, r5, r7, lr}
 800691a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 800691e:	af04      	add	r7, sp, #16
 8006920:	1d3b      	adds	r3, r7, #4
 8006922:	6018      	str	r0, [r3, #0]
 8006924:	463b      	mov	r3, r7
 8006926:	6019      	str	r1, [r3, #0]
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	f040 8438 	bne.w	80071a2 <_Z41__static_initialization_and_destruction_0ii+0x88a>
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800693a:	4293      	cmp	r3, r2
 800693c:	f040 8431 	bne.w	80071a2 <_Z41__static_initialization_and_destruction_0ii+0x88a>
matrix Q= {{0.005, 0}, {0, 0.005}};					//Process noise covariance matrix
 8006940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006944:	4aa9      	ldr	r2, [pc, #676]	; (8006bec <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006956:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006960:	2202      	movs	r2, #2
 8006962:	605a      	str	r2, [r3, #4]
 8006964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006968:	4618      	mov	r0, r3
 800696a:	f7fb fcac 	bl	80022c6 <_ZNSaIfEC1Ev>
 800696e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006976:	f107 0010 	add.w	r0, r7, #16
 800697a:	ca06      	ldmia	r2, {r1, r2}
 800697c:	f7fb fcaf 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006980:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800698e:	4a97      	ldr	r2, [pc, #604]	; (8006bec <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006996:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80069a0:	2202      	movs	r2, #2
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fb fc8c 	bl	80022c6 <_ZNSaIfEC1Ev>
 80069ae:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80069b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80069b6:	f107 0310 	add.w	r3, r7, #16
 80069ba:	f103 000c 	add.w	r0, r3, #12
 80069be:	460b      	mov	r3, r1
 80069c0:	ca06      	ldmia	r2, {r1, r2}
 80069c2:	f7fb fc8c 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	f107 0210 	add.w	r2, r7, #16
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	2202      	movs	r2, #2
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fb fcca 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80069e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069e6:	f107 0208 	add.w	r2, r7, #8
 80069ea:	ca06      	ldmia	r2, {r1, r2}
 80069ec:	4880      	ldr	r0, [pc, #512]	; (8006bf0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80069ee:	f7ff fe08 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 80069f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fb fb22 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80069fc:	f107 0410 	add.w	r4, r7, #16
 8006a00:	3418      	adds	r4, #24
 8006a02:	f107 0310 	add.w	r3, r7, #16
 8006a06:	429c      	cmp	r4, r3
 8006a08:	d004      	beq.n	8006a14 <_Z41__static_initialization_and_destruction_0ii+0xfc>
 8006a0a:	3c0c      	subs	r4, #12
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7fb fb91 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006a12:	e7f6      	b.n	8006a02 <_Z41__static_initialization_and_destruction_0ii+0xea>
 8006a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fb fb66 	bl	80020ea <_ZNSaIfED1Ev>
 8006a1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fb fb61 	bl	80020ea <_ZNSaIfED1Ev>
matrix A = {{1, 0}, {0, 1}};						//State transition matrix
 8006a28:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006a2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006a36:	f04f 0200 	mov.w	r2, #0
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a40:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fb fc37 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006a58:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006a5c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8006a60:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8006a64:	ca06      	ldmia	r2, {r1, r2}
 8006a66:	f7fb fc3a 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006a6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006a82:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	605a      	str	r2, [r3, #4]
 8006a90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fb fc16 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006a9a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8006a9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006aa2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006aa6:	f103 000c 	add.w	r0, r3, #12
 8006aaa:	460b      	mov	r3, r1
 8006aac:	ca06      	ldmia	r2, {r1, r2}
 8006aae:	f7fb fc16 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006ab2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ab6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	605a      	str	r2, [r3, #4]
 8006ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fb fc54 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006ace:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ad2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006ad6:	ca06      	ldmia	r2, {r1, r2}
 8006ad8:	4846      	ldr	r0, [pc, #280]	; (8006bf4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8006ada:	f7ff fd92 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006ade:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fb faac 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006ae8:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8006aec:	3418      	adds	r4, #24
 8006aee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006af2:	429c      	cmp	r4, r3
 8006af4:	d004      	beq.n	8006b00 <_Z41__static_initialization_and_destruction_0ii+0x1e8>
 8006af6:	3c0c      	subs	r4, #12
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7fb fb1b 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006afe:	e7f6      	b.n	8006aee <_Z41__static_initialization_and_destruction_0ii+0x1d6>
 8006b00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fb faf0 	bl	80020ea <_ZNSaIfED1Ev>
 8006b0a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fb faeb 	bl	80020ea <_ZNSaIfED1Ev>
matrix B = {{1, 0}, {0, 1}};						//Control input matrix, dt
 8006b14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006b18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b2c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b36:	2202      	movs	r2, #2
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fb fbc1 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006b44:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006b48:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006b4c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8006b50:	ca06      	ldmia	r2, {r1, r2}
 8006b52:	f7fb fbc4 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006b56:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006b64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b68:	605a      	str	r2, [r3, #4]
 8006b6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006b6e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006b78:	2202      	movs	r2, #2
 8006b7a:	605a      	str	r2, [r3, #4]
 8006b7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fb fba0 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006b86:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8006b8a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006b8e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006b92:	f103 000c 	add.w	r0, r3, #12
 8006b96:	460b      	mov	r3, r1
 8006b98:	ca06      	ldmia	r2, {r1, r2}
 8006b9a:	f7fb fba0 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006b9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006ba2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006bac:	2202      	movs	r2, #2
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fb fbde 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006bba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006bbe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006bc2:	ca06      	ldmia	r2, {r1, r2}
 8006bc4:	480c      	ldr	r0, [pc, #48]	; (8006bf8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8006bc6:	f7ff fd1c 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006bca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fb fa36 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006bd4:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8006bd8:	3418      	adds	r4, #24
 8006bda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006bde:	429c      	cmp	r4, r3
 8006be0:	d00c      	beq.n	8006bfc <_Z41__static_initialization_and_destruction_0ii+0x2e4>
 8006be2:	3c0c      	subs	r4, #12
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7fb faa5 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006bea:	e7f6      	b.n	8006bda <_Z41__static_initialization_and_destruction_0ii+0x2c2>
 8006bec:	3ba3d70a 	.word	0x3ba3d70a
 8006bf0:	20000860 	.word	0x20000860
 8006bf4:	2000086c 	.word	0x2000086c
 8006bf8:	20000878 	.word	0x20000878
 8006bfc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fb fa72 	bl	80020ea <_ZNSaIfED1Ev>
 8006c06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fb fa6d 	bl	80020ea <_ZNSaIfED1Ev>
matrix x_e = {{10, 0}, {0, 10}};					//initial value
 8006c10:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006c14:	4ada      	ldr	r2, [pc, #872]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	605a      	str	r2, [r3, #4]
 8006c22:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006c26:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8006c30:	2202      	movs	r2, #2
 8006c32:	605a      	str	r2, [r3, #4]
 8006c34:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fb fb44 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006c3e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006c42:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8006c46:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8006c4a:	ca06      	ldmia	r2, {r1, r2}
 8006c4c:	f7fb fb47 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006c50:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006c54:	f04f 0200 	mov.w	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006c5e:	4ac8      	ldr	r2, [pc, #800]	; (8006f80 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006c66:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006c70:	2202      	movs	r2, #2
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fb fb24 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006c7e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8006c82:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006c86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006c8a:	f103 000c 	add.w	r0, r3, #12
 8006c8e:	460b      	mov	r3, r1
 8006c90:	ca06      	ldmia	r2, {r1, r2}
 8006c92:	f7fb fb24 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006c96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006c9a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fb fb62 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006cb2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8006cb6:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8006cba:	ca06      	ldmia	r2, {r1, r2}
 8006cbc:	48b1      	ldr	r0, [pc, #708]	; (8006f84 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8006cbe:	f7ff fca0 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006cc2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fb f9ba 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006ccc:	f107 04f4 	add.w	r4, r7, #244	; 0xf4
 8006cd0:	3418      	adds	r4, #24
 8006cd2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d004      	beq.n	8006ce4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 8006cda:	3c0c      	subs	r4, #12
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7fb fa29 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006ce2:	e7f6      	b.n	8006cd2 <_Z41__static_initialization_and_destruction_0ii+0x3ba>
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fb f9fe 	bl	80020ea <_ZNSaIfED1Ev>
 8006cee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fb f9f9 	bl	80020ea <_ZNSaIfED1Ev>
matrix p_e = {{0.10, 0}, {0, 0.10}};				//State error variance
 8006cf8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006cfc:	4aa2      	ldr	r2, [pc, #648]	; (8006f88 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006d0e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006d18:	2202      	movs	r2, #2
 8006d1a:	605a      	str	r2, [r3, #4]
 8006d1c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fb fad0 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006d26:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006d2a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8006d2e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8006d32:	ca06      	ldmia	r2, {r1, r2}
 8006d34:	f7fb fad3 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006d38:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8006d46:	4a90      	ldr	r2, [pc, #576]	; (8006f88 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8006d4e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8006d58:	2202      	movs	r2, #2
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fb fab0 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006d66:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8006d6a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8006d6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006d72:	f103 000c 	add.w	r0, r3, #12
 8006d76:	460b      	mov	r3, r1
 8006d78:	ca06      	ldmia	r2, {r1, r2}
 8006d7a:	f7fb fab0 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006d7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006d82:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fb faee 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006d9a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006d9e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006da2:	ca06      	ldmia	r2, {r1, r2}
 8006da4:	4879      	ldr	r0, [pc, #484]	; (8006f8c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8006da6:	f7ff fc2c 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006daa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fb f946 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006db4:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8006db8:	3418      	adds	r4, #24
 8006dba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006dbe:	429c      	cmp	r4, r3
 8006dc0:	d004      	beq.n	8006dcc <_Z41__static_initialization_and_destruction_0ii+0x4b4>
 8006dc2:	3c0c      	subs	r4, #12
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7fb f9b5 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006dca:	e7f6      	b.n	8006dba <_Z41__static_initialization_and_destruction_0ii+0x4a2>
 8006dcc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fb f98a 	bl	80020ea <_ZNSaIfED1Ev>
 8006dd6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fb f985 	bl	80020ea <_ZNSaIfED1Ev>
matrix I = {{1, 0}, {0, 1}};						//Identity matrix
 8006de0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006de4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006df0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006df4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006dfe:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb fa5f 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006e08:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8006e0c:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 8006e10:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8006e14:	ca06      	ldmia	r2, {r1, r2}
 8006e16:	f7fb fa62 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006e22:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006e26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006e2a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8006e2e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006e32:	2302      	movs	r3, #2
 8006e34:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006e38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fb fa42 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006e42:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8006e46:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006e4a:	f103 000c 	add.w	r0, r3, #12
 8006e4e:	4613      	mov	r3, r2
 8006e50:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8006e54:	ca06      	ldmia	r2, {r1, r2}
 8006e56:	f7fb fa42 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006e5a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8006e5e:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8006e68:	2202      	movs	r2, #2
 8006e6a:	605a      	str	r2, [r3, #4]
 8006e6c:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fb fa80 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006e76:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006e7a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8006e7e:	ca06      	ldmia	r2, {r1, r2}
 8006e80:	4843      	ldr	r0, [pc, #268]	; (8006f90 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8006e82:	f7ff fbbe 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006e86:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb f8d8 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006e90:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8006e94:	3418      	adds	r4, #24
 8006e96:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006e9a:	429c      	cmp	r4, r3
 8006e9c:	d004      	beq.n	8006ea8 <_Z41__static_initialization_and_destruction_0ii+0x590>
 8006e9e:	3c0c      	subs	r4, #12
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f7fb f947 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006ea6:	e7f6      	b.n	8006e96 <_Z41__static_initialization_and_destruction_0ii+0x57e>
 8006ea8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fb f91c 	bl	80020ea <_ZNSaIfED1Ev>
 8006eb2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fb f917 	bl	80020ea <_ZNSaIfED1Ev>
matrix H = {{1, 0}, {0, 1}};						//Measurement matrix
 8006ebc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006ec0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8006ecc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8006ed0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8006eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fb f9f1 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee8:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 8006eec:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8006ef0:	ca06      	ldmia	r2, {r1, r2}
 8006ef2:	f7fb f9f4 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8006efe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f02:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006f06:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8006f0a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8006f0e:	2302      	movs	r3, #2
 8006f10:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8006f14:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fb f9d4 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006f1e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8006f22:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006f26:	f103 000c 	add.w	r0, r3, #12
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8006f30:	ca06      	ldmia	r2, {r1, r2}
 8006f32:	f7fb f9d4 	bl	80022de <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8006f36:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006f3a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006f3e:	2302      	movs	r3, #2
 8006f40:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006f44:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fb fa14 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006f4e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006f52:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8006f56:	ca06      	ldmia	r2, {r1, r2}
 8006f58:	480e      	ldr	r0, [pc, #56]	; (8006f94 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8006f5a:	f7ff fb52 	bl	8006602 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ESt16initializer_listIS1_ERKS2_>
 8006f5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fb f86c 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8006f68:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 8006f6c:	3418      	adds	r4, #24
 8006f6e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8006f72:	429c      	cmp	r4, r3
 8006f74:	d010      	beq.n	8006f98 <_Z41__static_initialization_and_destruction_0ii+0x680>
 8006f76:	3c0c      	subs	r4, #12
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7fb f8db 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8006f7e:	e7f6      	b.n	8006f6e <_Z41__static_initialization_and_destruction_0ii+0x656>
 8006f80:	41200000 	.word	0x41200000
 8006f84:	20000884 	.word	0x20000884
 8006f88:	3dcccccd 	.word	0x3dcccccd
 8006f8c:	20000890 	.word	0x20000890
 8006f90:	2000089c 	.word	0x2000089c
 8006f94:	200008a8 	.word	0x200008a8
 8006f98:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fb f8a4 	bl	80020ea <_ZNSaIfED1Ev>
 8006fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fb f89f 	bl	80020ea <_ZNSaIfED1Ev>
matrix R(vector_size , matrix_1D (vector_size, 0));	//Measurement noise matrix
 8006fac:	4ba2      	ldr	r3, [pc, #648]	; (8007238 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	461c      	mov	r4, r3
 8006fb2:	4ba1      	ldr	r3, [pc, #644]	; (8007238 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8006fc0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fb f97e 	bl	80022c6 <_ZNSaIfEC1Ev>
 8006fca:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8006fce:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8006fd2:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7ff fb34 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8006fdc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fb f9c8 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8006fe6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8006fea:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4892      	ldr	r0, [pc, #584]	; (800723c <_Z41__static_initialization_and_destruction_0ii+0x924>)
 8006ff2:	f7ff fb43 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8006ff6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fb f820 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8007000:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8007004:	4618      	mov	r0, r3
 8007006:	f7fb f895 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 800700a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800700e:	4618      	mov	r0, r3
 8007010:	f7fb f86b 	bl	80020ea <_ZNSaIfED1Ev>
uint16_t chip_select_fp[8] = {CS_1, CS_2, CS_3, CS_4, CS_5, CS_6, CS_7, CS_8_1};
 8007014:	4b8a      	ldr	r3, [pc, #552]	; (8007240 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	4b8a      	ldr	r3, [pc, #552]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	4b8a      	ldr	r3, [pc, #552]	; (8007248 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	4b88      	ldr	r3, [pc, #544]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8007022:	805a      	strh	r2, [r3, #2]
 8007024:	4b89      	ldr	r3, [pc, #548]	; (800724c <_Z41__static_initialization_and_destruction_0ii+0x934>)
 8007026:	881a      	ldrh	r2, [r3, #0]
 8007028:	4b86      	ldr	r3, [pc, #536]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800702a:	809a      	strh	r2, [r3, #4]
 800702c:	4b88      	ldr	r3, [pc, #544]	; (8007250 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	4b84      	ldr	r3, [pc, #528]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8007032:	80da      	strh	r2, [r3, #6]
 8007034:	4b87      	ldr	r3, [pc, #540]	; (8007254 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 8007036:	881a      	ldrh	r2, [r3, #0]
 8007038:	4b82      	ldr	r3, [pc, #520]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800703a:	811a      	strh	r2, [r3, #8]
 800703c:	4b86      	ldr	r3, [pc, #536]	; (8007258 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800703e:	881a      	ldrh	r2, [r3, #0]
 8007040:	4b80      	ldr	r3, [pc, #512]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8007042:	815a      	strh	r2, [r3, #10]
 8007044:	4b85      	ldr	r3, [pc, #532]	; (800725c <_Z41__static_initialization_and_destruction_0ii+0x944>)
 8007046:	881a      	ldrh	r2, [r3, #0]
 8007048:	4b7e      	ldr	r3, [pc, #504]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800704a:	819a      	strh	r2, [r3, #12]
 800704c:	4b84      	ldr	r3, [pc, #528]	; (8007260 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	4b7c      	ldr	r3, [pc, #496]	; (8007244 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8007052:	81da      	strh	r2, [r3, #14]
uint16_t chip_select_bp[8] = {CS_1, CS_2, CS_3, CS_4, CS_5, CS_6, CS_7, CS_8_2};
 8007054:	4b7a      	ldr	r3, [pc, #488]	; (8007240 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	4b82      	ldr	r3, [pc, #520]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	4b7a      	ldr	r3, [pc, #488]	; (8007248 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800705e:	881a      	ldrh	r2, [r3, #0]
 8007060:	4b80      	ldr	r3, [pc, #512]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8007062:	805a      	strh	r2, [r3, #2]
 8007064:	4b79      	ldr	r3, [pc, #484]	; (800724c <_Z41__static_initialization_and_destruction_0ii+0x934>)
 8007066:	881a      	ldrh	r2, [r3, #0]
 8007068:	4b7e      	ldr	r3, [pc, #504]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800706a:	809a      	strh	r2, [r3, #4]
 800706c:	4b78      	ldr	r3, [pc, #480]	; (8007250 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800706e:	881a      	ldrh	r2, [r3, #0]
 8007070:	4b7c      	ldr	r3, [pc, #496]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8007072:	80da      	strh	r2, [r3, #6]
 8007074:	4b77      	ldr	r3, [pc, #476]	; (8007254 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	4b7a      	ldr	r3, [pc, #488]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800707a:	811a      	strh	r2, [r3, #8]
 800707c:	4b76      	ldr	r3, [pc, #472]	; (8007258 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800707e:	881a      	ldrh	r2, [r3, #0]
 8007080:	4b78      	ldr	r3, [pc, #480]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8007082:	815a      	strh	r2, [r3, #10]
 8007084:	4b75      	ldr	r3, [pc, #468]	; (800725c <_Z41__static_initialization_and_destruction_0ii+0x944>)
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	4b76      	ldr	r3, [pc, #472]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800708a:	819a      	strh	r2, [r3, #12]
 800708c:	4b76      	ldr	r3, [pc, #472]	; (8007268 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800708e:	881a      	ldrh	r2, [r3, #0]
 8007090:	4b74      	ldr	r3, [pc, #464]	; (8007264 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8007092:	81da      	strh	r2, [r3, #14]
bmp388 bmp388_fp[8];
 8007094:	4b75      	ldr	r3, [pc, #468]	; (800726c <_Z41__static_initialization_and_destruction_0ii+0x954>)
 8007096:	2407      	movs	r4, #7
 8007098:	461d      	mov	r5, r3
 800709a:	2c00      	cmp	r4, #0
 800709c:	db06      	blt.n	80070ac <_Z41__static_initialization_and_destruction_0ii+0x794>
 800709e:	4628      	mov	r0, r5
 80070a0:	f7f9 fe50 	bl	8000d44 <_ZN6bmp388C1Ev>
 80070a4:	f505 75ca 	add.w	r5, r5, #404	; 0x194
 80070a8:	3c01      	subs	r4, #1
 80070aa:	e7f6      	b.n	800709a <_Z41__static_initialization_and_destruction_0ii+0x782>
bmp388 bmp388_bp[8];
 80070ac:	4b70      	ldr	r3, [pc, #448]	; (8007270 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80070ae:	2407      	movs	r4, #7
 80070b0:	461d      	mov	r5, r3
 80070b2:	2c00      	cmp	r4, #0
 80070b4:	db06      	blt.n	80070c4 <_Z41__static_initialization_and_destruction_0ii+0x7ac>
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7f9 fe44 	bl	8000d44 <_ZN6bmp388C1Ev>
 80070bc:	f505 75ca 	add.w	r5, r5, #404	; 0x194
 80070c0:	3c01      	subs	r4, #1
 80070c2:	e7f6      	b.n	80070b2 <_Z41__static_initialization_and_destruction_0ii+0x79a>
cop_t cop_fp_y;	//front panel centre of pressure
 80070c4:	486b      	ldr	r0, [pc, #428]	; (8007274 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 80070c6:	f7fe faf3 	bl	80056b0 <_ZN5cop_tC1Ev>
cop_t cop_bp_y;	//back panel centre of pressure
 80070ca:	486b      	ldr	r0, [pc, #428]	; (8007278 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 80070cc:	f7fe faf0 	bl	80056b0 <_ZN5cop_tC1Ev>
kf_math kf_math;
 80070d0:	486a      	ldr	r0, [pc, #424]	; (800727c <_Z41__static_initialization_and_destruction_0ii+0x964>)
 80070d2:	f7fd fc53 	bl	800497c <_ZN7kf_mathC1Ev>
ICM42605 ICM42605;
 80070d6:	486a      	ldr	r0, [pc, #424]	; (8007280 <_Z41__static_initialization_and_destruction_0ii+0x968>)
 80070d8:	f7fa fcba 	bl	8001a50 <_ZN8ICM42605C1Ev>
Kalman kf(Q, A, B, x_e, p_e, I, H);
 80070dc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80070e0:	4968      	ldr	r1, [pc, #416]	; (8007284 <_Z41__static_initialization_and_destruction_0ii+0x96c>)
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd fe10 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80070e8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80070ec:	4966      	ldr	r1, [pc, #408]	; (8007288 <_Z41__static_initialization_and_destruction_0ii+0x970>)
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fd fe0a 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 80070f4:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80070f8:	4964      	ldr	r1, [pc, #400]	; (800728c <_Z41__static_initialization_and_destruction_0ii+0x974>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fe04 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8007100:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007104:	4962      	ldr	r1, [pc, #392]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x978>)
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fdfe 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 800710c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8007110:	4960      	ldr	r1, [pc, #384]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x97c>)
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd fdf8 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8007118:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800711c:	495e      	ldr	r1, [pc, #376]	; (8007298 <_Z41__static_initialization_and_destruction_0ii+0x980>)
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd fdf2 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8007124:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8007128:	495c      	ldr	r1, [pc, #368]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x984>)
 800712a:	4618      	mov	r0, r3
 800712c:	f7fd fdec 	bl	8004d08 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1ERKS3_>
 8007130:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 8007134:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8007138:	f507 710d 	add.w	r1, r7, #564	; 0x234
 800713c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8007146:	9302      	str	r3, [sp, #8]
 8007148:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4603      	mov	r3, r0
 8007156:	4852      	ldr	r0, [pc, #328]	; (80072a0 <_Z41__static_initialization_and_destruction_0ii+0x988>)
 8007158:	f7fd f8ac 	bl	80042b4 <_ZN6KalmanC1ESt6vectorIS0_IfSaIfEESaIS2_EES4_S4_S4_S4_S4_S4_>
 800715c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8007160:	4618      	mov	r0, r3
 8007162:	f7fa ff97 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8007166:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800716a:	4618      	mov	r0, r3
 800716c:	f7fa ff92 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8007170:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8007174:	4618      	mov	r0, r3
 8007176:	f7fa ff8d 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800717a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800717e:	4618      	mov	r0, r3
 8007180:	f7fa ff88 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8007184:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8007188:	4618      	mov	r0, r3
 800718a:	f7fa ff83 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 800718e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8007192:	4618      	mov	r0, r3
 8007194:	f7fa ff7e 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 8007198:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800719c:	4618      	mov	r0, r3
 800719e:	f7fa ff79 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d140      	bne.n	800722c <_Z41__static_initialization_and_destruction_0ii+0x914>
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d13a      	bne.n	800722c <_Z41__static_initialization_and_destruction_0ii+0x914>
 80071b6:	483a      	ldr	r0, [pc, #232]	; (80072a0 <_Z41__static_initialization_and_destruction_0ii+0x988>)
 80071b8:	f7fd f8ec 	bl	8004394 <_ZN6KalmanD1Ev>
ICM42605 ICM42605;
 80071bc:	4830      	ldr	r0, [pc, #192]	; (8007280 <_Z41__static_initialization_and_destruction_0ii+0x968>)
 80071be:	f7fa fc7c 	bl	8001aba <_ZN8ICM42605D1Ev>
kf_math kf_math;
 80071c2:	482e      	ldr	r0, [pc, #184]	; (800727c <_Z41__static_initialization_and_destruction_0ii+0x964>)
 80071c4:	f7fd fbf8 	bl	80049b8 <_ZN7kf_mathD1Ev>
cop_t cop_bp_y;	//back panel centre of pressure
 80071c8:	482b      	ldr	r0, [pc, #172]	; (8007278 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 80071ca:	f7fe fa91 	bl	80056f0 <_ZN5cop_tD1Ev>
cop_t cop_fp_y;	//front panel centre of pressure
 80071ce:	4829      	ldr	r0, [pc, #164]	; (8007274 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 80071d0:	f7fe fa8e 	bl	80056f0 <_ZN5cop_tD1Ev>
bmp388 bmp388_bp[8];
 80071d4:	4c33      	ldr	r4, [pc, #204]	; (80072a4 <_Z41__static_initialization_and_destruction_0ii+0x98c>)
 80071d6:	4b26      	ldr	r3, [pc, #152]	; (8007270 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	d005      	beq.n	80071e8 <_Z41__static_initialization_and_destruction_0ii+0x8d0>
 80071dc:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7f9 fdde 	bl	8000da2 <_ZN6bmp388D1Ev>
 80071e6:	e7f6      	b.n	80071d6 <_Z41__static_initialization_and_destruction_0ii+0x8be>
bmp388 bmp388_fp[8];
 80071e8:	4c2f      	ldr	r4, [pc, #188]	; (80072a8 <_Z41__static_initialization_and_destruction_0ii+0x990>)
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <_Z41__static_initialization_and_destruction_0ii+0x954>)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d005      	beq.n	80071fc <_Z41__static_initialization_and_destruction_0ii+0x8e4>
 80071f0:	f5a4 74ca 	sub.w	r4, r4, #404	; 0x194
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7f9 fdd4 	bl	8000da2 <_ZN6bmp388D1Ev>
 80071fa:	e7f6      	b.n	80071ea <_Z41__static_initialization_and_destruction_0ii+0x8d2>
matrix R(vector_size , matrix_1D (vector_size, 0));	//Measurement noise matrix
 80071fc:	480f      	ldr	r0, [pc, #60]	; (800723c <_Z41__static_initialization_and_destruction_0ii+0x924>)
 80071fe:	f7fa ff49 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix H = {{1, 0}, {0, 1}};						//Measurement matrix
 8007202:	4826      	ldr	r0, [pc, #152]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x984>)
 8007204:	f7fa ff46 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix I = {{1, 0}, {0, 1}};						//Identity matrix
 8007208:	4823      	ldr	r0, [pc, #140]	; (8007298 <_Z41__static_initialization_and_destruction_0ii+0x980>)
 800720a:	f7fa ff43 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix p_e = {{0.10, 0}, {0, 0.10}};				//State error variance
 800720e:	4821      	ldr	r0, [pc, #132]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x97c>)
 8007210:	f7fa ff40 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix x_e = {{10, 0}, {0, 10}};					//initial value
 8007214:	481e      	ldr	r0, [pc, #120]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x978>)
 8007216:	f7fa ff3d 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix B = {{1, 0}, {0, 1}};						//Control input matrix, dt
 800721a:	481c      	ldr	r0, [pc, #112]	; (800728c <_Z41__static_initialization_and_destruction_0ii+0x974>)
 800721c:	f7fa ff3a 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix A = {{1, 0}, {0, 1}};						//State transition matrix
 8007220:	4819      	ldr	r0, [pc, #100]	; (8007288 <_Z41__static_initialization_and_destruction_0ii+0x970>)
 8007222:	f7fa ff37 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
matrix Q= {{0.005, 0}, {0, 0.005}};					//Process noise covariance matrix
 8007226:	4817      	ldr	r0, [pc, #92]	; (8007284 <_Z41__static_initialization_and_destruction_0ii+0x96c>)
 8007228:	f7fa ff34 	bl	8002094 <_ZNSt6vectorIS_IfSaIfEESaIS1_EED1Ev>
}
 800722c:	bf00      	nop
 800722e:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8007232:	46bd      	mov	sp, r7
 8007234:	bdb0      	pop	{r4, r5, r7, pc}
 8007236:	bf00      	nop
 8007238:	20000000 	.word	0x20000000
 800723c:	200008b4 	.word	0x200008b4
 8007240:	20000004 	.word	0x20000004
 8007244:	200008c0 	.word	0x200008c0
 8007248:	20000006 	.word	0x20000006
 800724c:	20000008 	.word	0x20000008
 8007250:	2000000a 	.word	0x2000000a
 8007254:	2000000c 	.word	0x2000000c
 8007258:	2000000e 	.word	0x2000000e
 800725c:	20000010 	.word	0x20000010
 8007260:	20000012 	.word	0x20000012
 8007264:	200008d0 	.word	0x200008d0
 8007268:	20000014 	.word	0x20000014
 800726c:	200008e0 	.word	0x200008e0
 8007270:	20001580 	.word	0x20001580
 8007274:	20002224 	.word	0x20002224
 8007278:	20002248 	.word	0x20002248
 800727c:	2000226c 	.word	0x2000226c
 8007280:	20002410 	.word	0x20002410
 8007284:	20000860 	.word	0x20000860
 8007288:	2000086c 	.word	0x2000086c
 800728c:	20000878 	.word	0x20000878
 8007290:	20000884 	.word	0x20000884
 8007294:	20000890 	.word	0x20000890
 8007298:	2000089c 	.word	0x2000089c
 800729c:	200008a8 	.word	0x200008a8
 80072a0:	20002450 	.word	0x20002450
 80072a4:	20002220 	.word	0x20002220
 80072a8:	20001580 	.word	0x20001580

080072ac <_GLOBAL__sub_I_hi2c1>:
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7ff fb2f 	bl	8006918 <_Z41__static_initialization_and_destruction_0ii>
 80072ba:	bd80      	pop	{r7, pc}

080072bc <_GLOBAL__sub_D_hi2c1>:
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
 80072c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7ff fb27 	bl	8006918 <_Z41__static_initialization_and_destruction_0ii>
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_>:
extern int vector_size;

//operators
//Addition operation
matrix operator +(matrix p, matrix q)
{
 80072cc:	b5b0      	push	{r4, r5, r7, lr}
 80072ce:	ed2d 8b02 	vpush	{d8}
 80072d2:	b08c      	sub	sp, #48	; 0x30
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
	matrix t(vector_size , matrix_1D (vector_size, 0));
 80072dc:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461c      	mov	r4, r3
 80072e2:	4b3c      	ldr	r3, [pc, #240]	; (80073d4 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461d      	mov	r5, r3
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	f107 0320 	add.w	r3, r7, #32
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fa ffe7 	bl	80022c6 <_ZNSaIfEC1Ev>
 80072f8:	f107 0320 	add.w	r3, r7, #32
 80072fc:	f107 021c 	add.w	r2, r7, #28
 8007300:	f107 0010 	add.w	r0, r7, #16
 8007304:	4629      	mov	r1, r5
 8007306:	f7ff f99d 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 800730a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fb f831 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8007314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007318:	f107 0210 	add.w	r2, r7, #16
 800731c:	4621      	mov	r1, r4
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff f9ac 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8007324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007328:	4618      	mov	r0, r3
 800732a:	f7fa fe89 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 800732e:	f107 0310 	add.w	r3, r7, #16
 8007332:	4618      	mov	r0, r3
 8007334:	f7fa fefe 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8007338:	f107 0320 	add.w	r3, r7, #32
 800733c:	4618      	mov	r0, r3
 800733e:	f7fa fed4 	bl	80020ea <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 8007342:	2300      	movs	r3, #0
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007346:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800734c:	429a      	cmp	r2, r3
 800734e:	da3a      	bge.n	80073c6 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0xfa>
	{
		for (int j = 0; j<vector_size; j++)
 8007350:	2300      	movs	r3, #0
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
 8007354:	4b1f      	ldr	r3, [pc, #124]	; (80073d4 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735a:	429a      	cmp	r2, r3
 800735c:	da2f      	bge.n	80073be <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0xf2>
			t[i][j] = (p[i][j]+q[i][j]);
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	4619      	mov	r1, r3
 8007362:	68b8      	ldr	r0, [r7, #8]
 8007364:	f7ff f9a6 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007368:	4602      	mov	r2, r0
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7fa fff1 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007374:	4603      	mov	r3, r0
 8007376:	edd3 8a00 	vldr	s17, [r3]
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff f998 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007384:	4602      	mov	r2, r0
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f7fa ffe3 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007390:	4603      	mov	r3, r0
 8007392:	ed93 8a00 	vldr	s16, [r3]
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	4619      	mov	r1, r3
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff f98a 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7fa ffd5 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80073ac:	4603      	mov	r3, r0
 80073ae:	ee78 7a88 	vadd.f32	s15, s17, s16
 80073b2:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	3301      	adds	r3, #1
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80073bc:	e7ca      	b.n	8007354 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
	for (int i = 0; i<vector_size; i++)
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	3301      	adds	r3, #1
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c4:	e7bf      	b.n	8007346 <_ZplSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>
	}
		return t;
 80073c6:	bf00      	nop
}
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	3730      	adds	r7, #48	; 0x30
 80073cc:	46bd      	mov	sp, r7
 80073ce:	ecbd 8b02 	vpop	{d8}
 80073d2:	bdb0      	pop	{r4, r5, r7, pc}
 80073d4:	20000000 	.word	0x20000000

080073d8 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_>:

//Difference operator
matrix operator -(matrix p, matrix q)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	ed2d 8b02 	vpush	{d8}
 80073de:	b08c      	sub	sp, #48	; 0x30
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
	matrix t( vector_size , matrix_1D (vector_size, 0));
 80073e8:	4b3d      	ldr	r3, [pc, #244]	; (80074e0 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461c      	mov	r4, r3
 80073ee:	4b3c      	ldr	r3, [pc, #240]	; (80074e0 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461d      	mov	r5, r3
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	f107 0320 	add.w	r3, r7, #32
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fa ff61 	bl	80022c6 <_ZNSaIfEC1Ev>
 8007404:	f107 0320 	add.w	r3, r7, #32
 8007408:	f107 021c 	add.w	r2, r7, #28
 800740c:	f107 0010 	add.w	r0, r7, #16
 8007410:	4629      	mov	r1, r5
 8007412:	f7ff f917 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8007416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800741a:	4618      	mov	r0, r3
 800741c:	f7fa ffab 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8007420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007424:	f107 0210 	add.w	r2, r7, #16
 8007428:	4621      	mov	r1, r4
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff f926 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8007430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007434:	4618      	mov	r0, r3
 8007436:	f7fa fe03 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 800743a:	f107 0310 	add.w	r3, r7, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f7fa fe78 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8007444:	f107 0320 	add.w	r3, r7, #32
 8007448:	4618      	mov	r0, r3
 800744a:	f7fa fe4e 	bl	80020ea <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 800744e:	2300      	movs	r3, #0
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007452:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007458:	429a      	cmp	r2, r3
 800745a:	da3a      	bge.n	80074d2 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0xfa>
	{
		for (int j = 0; j<vector_size; j++)
 800745c:	2300      	movs	r3, #0
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x108>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007466:	429a      	cmp	r2, r3
 8007468:	da2f      	bge.n	80074ca <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0xf2>
			t[i][j] = (p[i][j]-q[i][j]);
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	4619      	mov	r1, r3
 800746e:	68b8      	ldr	r0, [r7, #8]
 8007470:	f7ff f920 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007474:	4602      	mov	r2, r0
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7fa ff6b 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007480:	4603      	mov	r3, r0
 8007482:	edd3 8a00 	vldr	s17, [r3]
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff f912 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007490:	4602      	mov	r2, r0
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f7fa ff5d 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 800749c:	4603      	mov	r3, r0
 800749e:	ed93 8a00 	vldr	s16, [r3]
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f7ff f904 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f7fa ff4f 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80074b8:	4603      	mov	r3, r0
 80074ba:	ee78 7ac8 	vsub.f32	s15, s17, s16
 80074be:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	3301      	adds	r3, #1
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c8:	e7ca      	b.n	8007460 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
	for (int i = 0; i<vector_size; i++)
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	3301      	adds	r3, #1
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074d0:	e7bf      	b.n	8007452 <_ZmiSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>
	}
		return t;
 80074d2:	bf00      	nop
}
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	3730      	adds	r7, #48	; 0x30
 80074d8:	46bd      	mov	sp, r7
 80074da:	ecbd 8b02 	vpop	{d8}
 80074de:	bdb0      	pop	{r4, r5, r7, pc}
 80074e0:	20000000 	.word	0x20000000

080074e4 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_>:

////multiplication operator
matrix operator*(matrix Mat_1, matrix Mat_2)
{
 80074e4:	b5b0      	push	{r4, r5, r7, lr}
 80074e6:	ed2d 8b02 	vpush	{d8}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]

	matrix Mat_3( vector_size , matrix_1D (vector_size, 0));
 80074f4:	4b4c      	ldr	r3, [pc, #304]	; (8007628 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461c      	mov	r4, r3
 80074fa:	4b4b      	ldr	r3, [pc, #300]	; (8007628 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461d      	mov	r5, r3
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f7fa fedb 	bl	80022c6 <_ZNSaIfEC1Ev>
 8007510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007514:	f107 0220 	add.w	r2, r7, #32
 8007518:	f107 0014 	add.w	r0, r7, #20
 800751c:	4629      	mov	r1, r5
 800751e:	f7ff f891 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 8007522:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007526:	4618      	mov	r0, r3
 8007528:	f7fa ff25 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 800752c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007530:	f107 0214 	add.w	r2, r7, #20
 8007534:	4621      	mov	r1, r4
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff f8a0 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 800753c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007540:	4618      	mov	r0, r3
 8007542:	f7fa fd7d 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8007546:	f107 0314 	add.w	r3, r7, #20
 800754a:	4618      	mov	r0, r3
 800754c:	f7fa fdf2 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 8007550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007554:	4618      	mov	r0, r3
 8007556:	f7fa fdc8 	bl	80020ea <_ZNSaIfED1Ev>
    for(int i=0; i<vector_size;i++)
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
 800755e:	4b32      	ldr	r3, [pc, #200]	; (8007628 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007564:	429a      	cmp	r2, r3
 8007566:	da58      	bge.n	800761a <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x136>
    {
        for(int j=0;j<vector_size;j++)
 8007568:	2300      	movs	r3, #0
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
 800756c:	4b2e      	ldr	r3, [pc, #184]	; (8007628 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	429a      	cmp	r2, r3
 8007574:	da4d      	bge.n	8007612 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x12e>
        {
            Mat_3[i][j] = 0;
 8007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007578:	4619      	mov	r1, r3
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f7ff f89a 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007580:	4602      	mov	r2, r0
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7fa fee5 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 800758c:	4603      	mov	r3, r0
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	601a      	str	r2, [r3, #0]

            for(int k=0;k<vector_size;k++)
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007598:	4b23      	ldr	r3, [pc, #140]	; (8007628 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x144>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759e:	429a      	cmp	r2, r3
 80075a0:	da33      	bge.n	800760a <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x126>
				Mat_3[i][j] += Mat_1[i][k] * Mat_2[k][j];
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	4619      	mov	r1, r3
 80075a6:	68b8      	ldr	r0, [r7, #8]
 80075a8:	f7ff f884 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7fa fecf 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80075b8:	4603      	mov	r3, r0
 80075ba:	ed93 8a00 	vldr	s16, [r3]
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff f876 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fa fec1 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80075d4:	4603      	mov	r3, r0
 80075d6:	edd3 7a00 	vldr	s15, [r3]
 80075da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	4619      	mov	r1, r3
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff f866 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80075e8:	4602      	mov	r2, r0
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f7fa feb1 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80075f4:	4603      	mov	r3, r0
 80075f6:	edd3 7a00 	vldr	s15, [r3]
 80075fa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80075fe:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0;k<vector_size;k++)
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	3301      	adds	r3, #1
 8007606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007608:	e7c6      	b.n	8007598 <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0xb4>
        for(int j=0;j<vector_size;j++)
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	3301      	adds	r3, #1
 800760e:	633b      	str	r3, [r7, #48]	; 0x30
 8007610:	e7ac      	b.n	800756c <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x88>
    for(int i=0; i<vector_size;i++)
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	3301      	adds	r3, #1
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	e7a1      	b.n	800755e <_ZmlSt6vectorIS_IfSaIfEESaIS1_EES3_+0x7a>

        }
    }

	return Mat_3;
 800761a:	bf00      	nop
}
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	ecbd 8b02 	vpop	{d8}
 8007626:	bdb0      	pop	{r4, r5, r7, pc}
 8007628:	20000000 	.word	0x20000000

0800762c <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE>:


//Inverse of a diagonal matrix
matrix inverse (matrix p)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	ed2d 8b02 	vpush	{d8}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	matrix t( 2 , matrix_1D (2, 0));
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	f107 0318 	add.w	r3, r7, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7fa fe3e 	bl	80022c6 <_ZNSaIfEC1Ev>
 800764a:	f107 0318 	add.w	r3, r7, #24
 800764e:	f107 0214 	add.w	r2, r7, #20
 8007652:	f107 0008 	add.w	r0, r7, #8
 8007656:	2102      	movs	r1, #2
 8007658:	f7fe fff4 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 800765c:	f107 031c 	add.w	r3, r7, #28
 8007660:	4618      	mov	r0, r3
 8007662:	f7fa fe88 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	f107 0208 	add.w	r2, r7, #8
 800766e:	2102      	movs	r1, #2
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff f803 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 8007676:	f107 031c 	add.w	r3, r7, #28
 800767a:	4618      	mov	r0, r3
 800767c:	f7fa fce0 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	4618      	mov	r0, r3
 8007686:	f7fa fd55 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 800768a:	f107 0318 	add.w	r3, r7, #24
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa fd2b 	bl	80020ea <_ZNSaIfED1Ev>

	for (int i = 0; i<vector_size; i++)
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x134>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769e:	429a      	cmp	r2, r3
 80076a0:	da56      	bge.n	8007750 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x124>
	{
		for (int j = 0; j<vector_size; j++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	4b2e      	ldr	r3, [pc, #184]	; (8007760 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x134>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	da4b      	bge.n	8007748 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x11c>
			if (p[i][j] == 0)
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	4619      	mov	r1, r3
 80076b4:	6838      	ldr	r0, [r7, #0]
 80076b6:	f7fe fffd 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fa fe48 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80076c6:	4603      	mov	r3, r0
 80076c8:	edd3 7a00 	vldr	s15, [r3]
 80076cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	bf0c      	ite	eq
 80076d6:	2301      	moveq	r3, #1
 80076d8:	2300      	movne	r3, #0
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00f      	beq.n	8007700 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0xd4>
				t[i][j] = 0;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fe ffe5 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f7fa fe30 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e01f      	b.n	8007740 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x114>
			else
				t[i][j] = (1/p[i][j]);
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	4619      	mov	r1, r3
 8007704:	6838      	ldr	r0, [r7, #0]
 8007706:	f7fe ffd5 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 800770a:	4602      	mov	r2, r0
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fa fe20 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007716:	4603      	mov	r3, r0
 8007718:	ed93 8a00 	vldr	s16, [r3]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7fe ffc7 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007726:	4602      	mov	r2, r0
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fa fe12 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007732:	4603      	mov	r3, r0
 8007734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007738:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800773c:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j<vector_size; j++)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	3301      	adds	r3, #1
 8007744:	623b      	str	r3, [r7, #32]
 8007746:	e7ae      	b.n	80076a6 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x7a>
	for (int i = 0; i<vector_size; i++)
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	3301      	adds	r3, #1
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	e7a3      	b.n	8007698 <_Z7inverseSt6vectorIS_IfSaIfEESaIS1_EE+0x6c>
	}
		return t;
 8007750:	bf00      	nop
}
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	ecbd 8b02 	vpop	{d8}
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000000 	.word	0x20000000

08007764 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE>:

matrix transpose (matrix p)
{
 8007764:	b5b0      	push	{r4, r5, r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
	matrix t( vector_size , matrix_1D (vector_size, 0));
 800776e:	4b34      	ldr	r3, [pc, #208]	; (8007840 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461c      	mov	r4, r3
 8007774:	4b32      	ldr	r3, [pc, #200]	; (8007840 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461d      	mov	r5, r3
 800777a:	f04f 0300 	mov.w	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	f107 0318 	add.w	r3, r7, #24
 8007784:	4618      	mov	r0, r3
 8007786:	f7fa fd9e 	bl	80022c6 <_ZNSaIfEC1Ev>
 800778a:	f107 0318 	add.w	r3, r7, #24
 800778e:	f107 0214 	add.w	r2, r7, #20
 8007792:	f107 0008 	add.w	r0, r7, #8
 8007796:	4629      	mov	r1, r5
 8007798:	f7fe ff54 	bl	8006644 <_ZNSt6vectorIfSaIfEEC1EjRKfRKS0_>
 800779c:	f107 031c 	add.w	r3, r7, #28
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fa fde8 	bl	8002376 <_ZNSaISt6vectorIfSaIfEEEC1Ev>
 80077a6:	f107 031c 	add.w	r3, r7, #28
 80077aa:	f107 0208 	add.w	r2, r7, #8
 80077ae:	4621      	mov	r1, r4
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fe ff63 	bl	800667c <_ZNSt6vectorIS_IfSaIfEESaIS1_EEC1EjRKS1_RKS2_>
 80077b6:	f107 031c 	add.w	r3, r7, #28
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa fc40 	bl	8002040 <_ZNSaISt6vectorIfSaIfEEED1Ev>
 80077c0:	f107 0308 	add.w	r3, r7, #8
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fa fcb5 	bl	8002134 <_ZNSt6vectorIfSaIfEED1Ev>
 80077ca:	f107 0318 	add.w	r3, r7, #24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fa fc8b 	bl	80020ea <_ZNSaIfED1Ev>
	for (int i = 0; i<vector_size; i++)
 80077d4:	2300      	movs	r3, #0
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
 80077d8:	4b19      	ldr	r3, [pc, #100]	; (8007840 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077de:	429a      	cmp	r2, r3
 80077e0:	da28      	bge.n	8007834 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xd0>
	{
		for (int j = 0; j<vector_size; j++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	623b      	str	r3, [r7, #32]
 80077e6:	4b16      	ldr	r3, [pc, #88]	; (8007840 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xdc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a3a      	ldr	r2, [r7, #32]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	da1d      	bge.n	800782c <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0xc8>
			t[i][j] = p[j][i];
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6838      	ldr	r0, [r7, #0]
 80077f6:	f7fe ff5d 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 80077fa:	4602      	mov	r2, r0
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f7fa fda8 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 8007806:	4604      	mov	r4, r0
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7fe ff51 	bl	80066b4 <_ZNSt6vectorIS_IfSaIfEESaIS1_EEixEj>
 8007812:	4602      	mov	r2, r0
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	4619      	mov	r1, r3
 8007818:	4610      	mov	r0, r2
 800781a:	f7fa fd9c 	bl	8002356 <_ZNSt6vectorIfSaIfEEixEj>
 800781e:	4602      	mov	r2, r0
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	6013      	str	r3, [r2, #0]
		for (int j = 0; j<vector_size; j++)
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	3301      	adds	r3, #1
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	e7dc      	b.n	80077e6 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0x82>
	for (int i = 0; i<vector_size; i++)
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	3301      	adds	r3, #1
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
 8007832:	e7d1      	b.n	80077d8 <_Z9transposeSt6vectorIS_IfSaIfEESaIS1_EE+0x74>
	}

		return t;
 8007834:	bf00      	nop
}
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	3728      	adds	r7, #40	; 0x28
 800783a:	46bd      	mov	sp, r7
 800783c:	bdb0      	pop	{r4, r5, r7, pc}
 800783e:	bf00      	nop
 8007840:	20000000 	.word	0x20000000

08007844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <HAL_MspInit+0x44>)
 800784c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784e:	4a0e      	ldr	r2, [pc, #56]	; (8007888 <HAL_MspInit+0x44>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6613      	str	r3, [r2, #96]	; 0x60
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_MspInit+0x44>)
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_MspInit+0x44>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	4a08      	ldr	r2, [pc, #32]	; (8007888 <HAL_MspInit+0x44>)
 8007868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786c:	6593      	str	r3, [r2, #88]	; 0x58
 800786e:	4b06      	ldr	r3, [pc, #24]	; (8007888 <HAL_MspInit+0x44>)
 8007870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800787a:	f003 fbc5 	bl	800b008 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40021000 	.word	0x40021000

0800788c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	609a      	str	r2, [r3, #8]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a17      	ldr	r2, [pc, #92]	; (8007908 <HAL_I2C_MspInit+0x7c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d128      	bne.n	8007900 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ae:	4b17      	ldr	r3, [pc, #92]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80078c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078cc:	2312      	movs	r3, #18
 80078ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d4:	2300      	movs	r3, #0
 80078d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80078d8:	2304      	movs	r3, #4
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	4619      	mov	r1, r3
 80078e2:	480b      	ldr	r0, [pc, #44]	; (8007910 <HAL_I2C_MspInit+0x84>)
 80078e4:	f000 ff4c 	bl	8008780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	4a07      	ldr	r2, [pc, #28]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078f2:	6593      	str	r3, [r2, #88]	; 0x58
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_I2C_MspInit+0x80>)
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007900:	bf00      	nop
 8007902:	3728      	adds	r7, #40	; 0x28
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40005400 	.word	0x40005400
 800790c:	40021000 	.word	0x40021000
 8007910:	48000400 	.word	0x48000400

08007914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	; 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a98      	ldr	r2, [pc, #608]	; (8007b94 <HAL_SPI_MspInit+0x280>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d17b      	bne.n	8007a2e <HAL_SPI_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007936:	4b98      	ldr	r3, [pc, #608]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793a:	4a97      	ldr	r2, [pc, #604]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 800793c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007940:	6613      	str	r3, [r2, #96]	; 0x60
 8007942:	4b95      	ldr	r3, [pc, #596]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800794a:	623b      	str	r3, [r7, #32]
 800794c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800794e:	4b92      	ldr	r3, [pc, #584]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	4a91      	ldr	r2, [pc, #580]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800795a:	4b8f      	ldr	r3, [pc, #572]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007966:	23e0      	movs	r3, #224	; 0xe0
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796a:	2302      	movs	r3, #2
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796e:	2300      	movs	r3, #0
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007972:	2300      	movs	r3, #0
 8007974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007976:	2305      	movs	r3, #5
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800797a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800797e:	4619      	mov	r1, r3
 8007980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007984:	f000 fefc 	bl	8008780 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8007988:	4b84      	ldr	r3, [pc, #528]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 800798a:	4a85      	ldr	r2, [pc, #532]	; (8007ba0 <HAL_SPI_MspInit+0x28c>)
 800798c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800798e:	4b83      	ldr	r3, [pc, #524]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 8007990:	220a      	movs	r2, #10
 8007992:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007994:	4b81      	ldr	r3, [pc, #516]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 8007996:	2200      	movs	r2, #0
 8007998:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800799a:	4b80      	ldr	r3, [pc, #512]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 800799c:	2200      	movs	r2, #0
 800799e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079a0:	4b7e      	ldr	r3, [pc, #504]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079a6:	4b7d      	ldr	r3, [pc, #500]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079ac:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80079b2:	4b7a      	ldr	r3, [pc, #488]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80079b8:	4b78      	ldr	r3, [pc, #480]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80079be:	4877      	ldr	r0, [pc, #476]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079c0:	f000 fc6c 	bl	800829c <HAL_DMA_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80079ca:	f7fe fe15 	bl	80065f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a72      	ldr	r2, [pc, #456]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079d2:	659a      	str	r2, [r3, #88]	; 0x58
 80079d4:	4a71      	ldr	r2, [pc, #452]	; (8007b9c <HAL_SPI_MspInit+0x288>)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80079da:	4b72      	ldr	r3, [pc, #456]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079dc:	4a72      	ldr	r2, [pc, #456]	; (8007ba8 <HAL_SPI_MspInit+0x294>)
 80079de:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80079e0:	4b70      	ldr	r3, [pc, #448]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079e2:	220b      	movs	r2, #11
 80079e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80079e6:	4b6f      	ldr	r3, [pc, #444]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079e8:	2210      	movs	r2, #16
 80079ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079ec:	4b6d      	ldr	r3, [pc, #436]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80079f2:	4b6c      	ldr	r3, [pc, #432]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079f4:	2280      	movs	r2, #128	; 0x80
 80079f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079fe:	4b69      	ldr	r3, [pc, #420]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007a04:	4b67      	ldr	r3, [pc, #412]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007a0a:	4b66      	ldr	r3, [pc, #408]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007a10:	4864      	ldr	r0, [pc, #400]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a12:	f000 fc43 	bl	800829c <HAL_DMA_Init>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8007a1c:	f7fe fdec 	bl	80065f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a60      	ldr	r2, [pc, #384]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a24:	655a      	str	r2, [r3, #84]	; 0x54
 8007a26:	4a5f      	ldr	r2, [pc, #380]	; (8007ba4 <HAL_SPI_MspInit+0x290>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007a2c:	e0ad      	b.n	8007b8a <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI2)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a5e      	ldr	r2, [pc, #376]	; (8007bac <HAL_SPI_MspInit+0x298>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d152      	bne.n	8007ade <HAL_SPI_MspInit+0x1ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a38:	4b57      	ldr	r3, [pc, #348]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	4a56      	ldr	r2, [pc, #344]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a42:	6593      	str	r3, [r2, #88]	; 0x58
 8007a44:	4b54      	ldr	r3, [pc, #336]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a50:	4b51      	ldr	r3, [pc, #324]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a54:	4a50      	ldr	r2, [pc, #320]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a5c:	4b4e      	ldr	r3, [pc, #312]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007a68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a76:	2300      	movs	r3, #0
 8007a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a7a:	2305      	movs	r3, #5
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a82:	4619      	mov	r1, r3
 8007a84:	484a      	ldr	r0, [pc, #296]	; (8007bb0 <HAL_SPI_MspInit+0x29c>)
 8007a86:	f000 fe7b 	bl	8008780 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8007a8a:	4b4a      	ldr	r3, [pc, #296]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007a8c:	4a4a      	ldr	r2, [pc, #296]	; (8007bb8 <HAL_SPI_MspInit+0x2a4>)
 8007a8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8007a90:	4b48      	ldr	r3, [pc, #288]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007a92:	220c      	movs	r2, #12
 8007a94:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a96:	4b47      	ldr	r3, [pc, #284]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a9c:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007aa2:	4b44      	ldr	r3, [pc, #272]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007aae:	4b41      	ldr	r3, [pc, #260]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8007ab4:	4b3f      	ldr	r3, [pc, #252]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007aba:	4b3e      	ldr	r3, [pc, #248]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007ac0:	483c      	ldr	r0, [pc, #240]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007ac2:	f000 fbeb 	bl	800829c <HAL_DMA_Init>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_SPI_MspInit+0x1bc>
      Error_Handler();
 8007acc:	f7fe fd94 	bl	80065f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a38      	ldr	r2, [pc, #224]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007ad4:	659a      	str	r2, [r3, #88]	; 0x58
 8007ad6:	4a37      	ldr	r2, [pc, #220]	; (8007bb4 <HAL_SPI_MspInit+0x2a0>)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007adc:	e055      	b.n	8007b8a <HAL_SPI_MspInit+0x276>
  else if(hspi->Instance==SPI3)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a36      	ldr	r2, [pc, #216]	; (8007bbc <HAL_SPI_MspInit+0x2a8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d150      	bne.n	8007b8a <HAL_SPI_MspInit+0x276>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aec:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af2:	6593      	str	r3, [r2, #88]	; 0x58
 8007af4:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afc:	613b      	str	r3, [r7, #16]
 8007afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b04:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007b06:	f043 0302 	orr.w	r3, r3, #2
 8007b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b0c:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <HAL_SPI_MspInit+0x284>)
 8007b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8007b18:	2328      	movs	r3, #40	; 0x28
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b24:	2300      	movs	r3, #0
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007b28:	2306      	movs	r3, #6
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b30:	4619      	mov	r1, r3
 8007b32:	481f      	ldr	r0, [pc, #124]	; (8007bb0 <HAL_SPI_MspInit+0x29c>)
 8007b34:	f000 fe24 	bl	8008780 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Channel3;
 8007b38:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b3a:	4a22      	ldr	r2, [pc, #136]	; (8007bc4 <HAL_SPI_MspInit+0x2b0>)
 8007b3c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8007b3e:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b40:	220e      	movs	r2, #14
 8007b42:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b44:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b50:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b56:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b5c:	4b18      	ldr	r3, [pc, #96]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8007b62:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8007b6e:	4814      	ldr	r0, [pc, #80]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b70:	f000 fb94 	bl	800829c <HAL_DMA_Init>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_SPI_MspInit+0x26a>
      Error_Handler();
 8007b7a:	f7fe fd3d 	bl	80065f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b82:	659a      	str	r2, [r3, #88]	; 0x58
 8007b84:	4a0e      	ldr	r2, [pc, #56]	; (8007bc0 <HAL_SPI_MspInit+0x2ac>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007b8a:	bf00      	nop
 8007b8c:	3738      	adds	r7, #56	; 0x38
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	40013000 	.word	0x40013000
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	20000504 	.word	0x20000504
 8007ba0:	40020008 	.word	0x40020008
 8007ba4:	20000564 	.word	0x20000564
 8007ba8:	40020044 	.word	0x40020044
 8007bac:	40003800 	.word	0x40003800
 8007bb0:	48000400 	.word	0x48000400
 8007bb4:	200005c4 	.word	0x200005c4
 8007bb8:	4002001c 	.word	0x4002001c
 8007bbc:	40003c00 	.word	0x40003c00
 8007bc0:	20000624 	.word	0x20000624
 8007bc4:	40020030 	.word	0x40020030

08007bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <HAL_TIM_Base_MspInit+0x9c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d114      	bne.n	8007c04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007bda:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007be0:	f043 0310 	orr.w	r3, r3, #16
 8007be4:	6593      	str	r3, [r2, #88]	; 0x58
 8007be6:	4b20      	ldr	r3, [pc, #128]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	2036      	movs	r0, #54	; 0x36
 8007bf8:	f000 fb1b 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007bfc:	2036      	movs	r0, #54	; 0x36
 8007bfe:	f000 fb32 	bl	8008266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8007c02:	e02a      	b.n	8007c5a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_TIM_Base_MspInit+0xa4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d10c      	bne.n	8007c28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007c0e:	4b16      	ldr	r3, [pc, #88]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	4a15      	ldr	r2, [pc, #84]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c14:	f043 0320 	orr.w	r3, r3, #32
 8007c18:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	693b      	ldr	r3, [r7, #16]
}
 8007c26:	e018      	b.n	8007c5a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM17)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <HAL_TIM_Base_MspInit+0xa8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d113      	bne.n	8007c5a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <HAL_TIM_Base_MspInit+0xa0>)
 8007c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	201a      	movs	r0, #26
 8007c50:	f000 faef 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007c54:	201a      	movs	r0, #26
 8007c56:	f000 fb06 	bl	8008266 <HAL_NVIC_EnableIRQ>
}
 8007c5a:	bf00      	nop
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40001000 	.word	0x40001000
 8007c68:	40021000 	.word	0x40021000
 8007c6c:	40001400 	.word	0x40001400
 8007c70:	40014800 	.word	0x40014800

08007c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c78:	e7fe      	b.n	8007c78 <NMI_Handler+0x4>

08007c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c7e:	e7fe      	b.n	8007c7e <HardFault_Handler+0x4>

08007c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c84:	e7fe      	b.n	8007c84 <MemManage_Handler+0x4>

08007c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c86:	b480      	push	{r7}
 8007c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c8a:	e7fe      	b.n	8007c8a <BusFault_Handler+0x4>

08007c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c90:	e7fe      	b.n	8007c90 <UsageFault_Handler+0x4>

08007c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c92:	b480      	push	{r7}
 8007c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c96:	bf00      	nop
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cb2:	bf00      	nop
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cc0:	f000 f99c 	bl	8007ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cc4:	bf00      	nop
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007ccc:	4802      	ldr	r0, [pc, #8]	; (8007cd8 <DMA1_Channel1_IRQHandler+0x10>)
 8007cce:	f000 fc08 	bl	80084e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007cd2:	bf00      	nop
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000504 	.word	0x20000504

08007cdc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007ce0:	4802      	ldr	r0, [pc, #8]	; (8007cec <DMA1_Channel2_IRQHandler+0x10>)
 8007ce2:	f000 fbfe 	bl	80084e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007ce6:	bf00      	nop
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200005c4 	.word	0x200005c4

08007cf0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8007cf4:	4802      	ldr	r0, [pc, #8]	; (8007d00 <DMA1_Channel3_IRQHandler+0x10>)
 8007cf6:	f000 fbf4 	bl	80084e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000624 	.word	0x20000624

08007d04 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007d08:	4802      	ldr	r0, [pc, #8]	; (8007d14 <DMA1_Channel4_IRQHandler+0x10>)
 8007d0a:	f000 fbea 	bl	80084e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007d0e:	bf00      	nop
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000564 	.word	0x20000564

08007d18 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007d1c:	4802      	ldr	r0, [pc, #8]	; (8007d28 <USB_LP_IRQHandler+0x10>)
 8007d1e:	f001 fd41 	bl	80097a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007d22:	bf00      	nop
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20003be8 	.word	0x20003be8

08007d2c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007d30:	4802      	ldr	r0, [pc, #8]	; (8007d3c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8007d32:	f005 f9b8 	bl	800d0a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000071c 	.word	0x2000071c

08007d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007d44:	4802      	ldr	r0, [pc, #8]	; (8007d50 <TIM6_DAC_IRQHandler+0x10>)
 8007d46:	f005 f9ae 	bl	800d0a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000684 	.word	0x20000684

08007d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
	return 1;
 8007d58:	2301      	movs	r3, #1
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <_kill>:

int _kill(int pid, int sig)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007d6e:	f00a faa9 	bl	80122c4 <__errno>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2216      	movs	r2, #22
 8007d76:	601a      	str	r2, [r3, #0]
	return -1;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <_exit>:

void _exit (int status)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ffe7 	bl	8007d64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007d96:	e7fe      	b.n	8007d96 <_exit+0x12>

08007d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e00a      	b.n	8007dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007daa:	f3af 8000 	nop.w
 8007dae:	4601      	mov	r1, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	60ba      	str	r2, [r7, #8]
 8007db6:	b2ca      	uxtb	r2, r1
 8007db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	dbf0      	blt.n	8007daa <_read+0x12>
	}

return len;
 8007dc8:	687b      	ldr	r3, [r7, #4]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	e009      	b.n	8007df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	60ba      	str	r2, [r7, #8]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	3301      	adds	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	dbf1      	blt.n	8007de4 <_write+0x12>
	}
	return len;
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <_close>:

int _close(int file)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
	return -1;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e32:	605a      	str	r2, [r3, #4]
	return 0;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <_isatty>:

int _isatty(int file)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
	return 1;
 8007e4a:	2301      	movs	r3, #1
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	return 0;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007e7c:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <_sbrk+0x5c>)
 8007e7e:	4b15      	ldr	r3, [pc, #84]	; (8007ed4 <_sbrk+0x60>)
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e88:	4b13      	ldr	r3, [pc, #76]	; (8007ed8 <_sbrk+0x64>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <_sbrk+0x64>)
 8007e92:	4a12      	ldr	r2, [pc, #72]	; (8007edc <_sbrk+0x68>)
 8007e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e96:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <_sbrk+0x64>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d207      	bcs.n	8007eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ea4:	f00a fa0e 	bl	80122c4 <__errno>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	220c      	movs	r2, #12
 8007eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007eae:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb2:	e009      	b.n	8007ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <_sbrk+0x64>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007eba:	4b07      	ldr	r3, [pc, #28]	; (8007ed8 <_sbrk+0x64>)
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4a05      	ldr	r2, [pc, #20]	; (8007ed8 <_sbrk+0x64>)
 8007ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20020000 	.word	0x20020000
 8007ed4:	00000400 	.word	0x00000400
 8007ed8:	200024e0 	.word	0x200024e0
 8007edc:	20003ef0 	.word	0x20003ef0

08007ee0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <SystemInit+0x20>)
 8007ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eea:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <SystemInit+0x20>)
 8007eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007f04:	480d      	ldr	r0, [pc, #52]	; (8007f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007f06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f08:	480d      	ldr	r0, [pc, #52]	; (8007f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8007f0a:	490e      	ldr	r1, [pc, #56]	; (8007f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007f0c:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <LoopForever+0xe>)
  movs r3, #0
 8007f0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007f10:	e002      	b.n	8007f18 <LoopCopyDataInit>

08007f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f16:	3304      	adds	r3, #4

08007f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f1c:	d3f9      	bcc.n	8007f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f1e:	4a0b      	ldr	r2, [pc, #44]	; (8007f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007f20:	4c0b      	ldr	r4, [pc, #44]	; (8007f50 <LoopForever+0x16>)
  movs r3, #0
 8007f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f24:	e001      	b.n	8007f2a <LoopFillZerobss>

08007f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f28:	3204      	adds	r2, #4

08007f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f2c:	d3fb      	bcc.n	8007f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f2e:	f7ff ffd7 	bl	8007ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f32:	f00a f9cd 	bl	80122d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007f36:	f7fd fbe7 	bl	8005708 <main>

08007f3a <LoopForever>:

LoopForever:
    b LoopForever
 8007f3a:	e7fe      	b.n	8007f3a <LoopForever>
  ldr   r0, =_estack
 8007f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f44:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8007f48:	080171ac 	.word	0x080171ac
  ldr r2, =_sbss
 8007f4c:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8007f50:	20003eec 	.word	0x20003eec

08007f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007f54:	e7fe      	b.n	8007f54 <ADC1_2_IRQHandler>

08007f56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f60:	2003      	movs	r0, #3
 8007f62:	f000 f95b 	bl	800821c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007f66:	2000      	movs	r0, #0
 8007f68:	f000 f80e 	bl	8007f88 <HAL_InitTick>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	71fb      	strb	r3, [r7, #7]
 8007f76:	e001      	b.n	8007f7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007f78:	f7ff fc64 	bl	8007844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007f7c:	79fb      	ldrb	r3, [r7, #7]

}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007f94:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <HAL_InitTick+0x68>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d022      	beq.n	8007fe2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007f9c:	4b15      	ldr	r3, [pc, #84]	; (8007ff4 <HAL_InitTick+0x6c>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <HAL_InitTick+0x68>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f966 	bl	8008282 <HAL_SYSTICK_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10f      	bne.n	8007fdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b0f      	cmp	r3, #15
 8007fc0:	d809      	bhi.n	8007fd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fca:	f000 f932 	bl	8008232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007fce:	4a0a      	ldr	r2, [pc, #40]	; (8007ff8 <HAL_InitTick+0x70>)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e007      	b.n	8007fe6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
 8007fda:	e004      	b.n	8007fe6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000020 	.word	0x20000020
 8007ff4:	20000018 	.word	0x20000018
 8007ff8:	2000001c 	.word	0x2000001c

08007ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008000:	4b05      	ldr	r3, [pc, #20]	; (8008018 <HAL_IncTick+0x1c>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <HAL_IncTick+0x20>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4413      	add	r3, r2
 800800a:	4a03      	ldr	r2, [pc, #12]	; (8008018 <HAL_IncTick+0x1c>)
 800800c:	6013      	str	r3, [r2, #0]
}
 800800e:	bf00      	nop
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20002714 	.word	0x20002714
 800801c:	20000020 	.word	0x20000020

08008020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  return uwTick;
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <HAL_GetTick+0x14>)
 8008026:	681b      	ldr	r3, [r3, #0]
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20002714 	.word	0x20002714

08008038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008040:	f7ff ffee 	bl	8008020 <HAL_GetTick>
 8008044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d004      	beq.n	800805c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008052:	4b09      	ldr	r3, [pc, #36]	; (8008078 <HAL_Delay+0x40>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800805c:	bf00      	nop
 800805e:	f7ff ffdf 	bl	8008020 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	429a      	cmp	r2, r3
 800806c:	d8f7      	bhi.n	800805e <HAL_Delay+0x26>
  {
  }
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000020 	.word	0x20000020

0800807c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800808c:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <__NVIC_SetPriorityGrouping+0x44>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008098:	4013      	ands	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080ae:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <__NVIC_SetPriorityGrouping+0x44>)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	60d3      	str	r3, [r2, #12]
}
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	e000ed00 	.word	0xe000ed00

080080c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <__NVIC_GetPriorityGrouping+0x18>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	f003 0307 	and.w	r3, r3, #7
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	db0b      	blt.n	800810a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	f003 021f 	and.w	r2, r3, #31
 80080f8:	4907      	ldr	r1, [pc, #28]	; (8008118 <__NVIC_EnableIRQ+0x38>)
 80080fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	2001      	movs	r0, #1
 8008102:	fa00 f202 	lsl.w	r2, r0, r2
 8008106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	e000e100 	.word	0xe000e100

0800811c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812c:	2b00      	cmp	r3, #0
 800812e:	db0a      	blt.n	8008146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	490c      	ldr	r1, [pc, #48]	; (8008168 <__NVIC_SetPriority+0x4c>)
 8008136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813a:	0112      	lsls	r2, r2, #4
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	440b      	add	r3, r1
 8008140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008144:	e00a      	b.n	800815c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4908      	ldr	r1, [pc, #32]	; (800816c <__NVIC_SetPriority+0x50>)
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	3b04      	subs	r3, #4
 8008154:	0112      	lsls	r2, r2, #4
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	440b      	add	r3, r1
 800815a:	761a      	strb	r2, [r3, #24]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	e000e100 	.word	0xe000e100
 800816c:	e000ed00 	.word	0xe000ed00

08008170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008170:	b480      	push	{r7}
 8008172:	b089      	sub	sp, #36	; 0x24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	f1c3 0307 	rsb	r3, r3, #7
 800818a:	2b04      	cmp	r3, #4
 800818c:	bf28      	it	cs
 800818e:	2304      	movcs	r3, #4
 8008190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3304      	adds	r3, #4
 8008196:	2b06      	cmp	r3, #6
 8008198:	d902      	bls.n	80081a0 <NVIC_EncodePriority+0x30>
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3b03      	subs	r3, #3
 800819e:	e000      	b.n	80081a2 <NVIC_EncodePriority+0x32>
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	43da      	mvns	r2, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	401a      	ands	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081b8:	f04f 31ff 	mov.w	r1, #4294967295
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	fa01 f303 	lsl.w	r3, r1, r3
 80081c2:	43d9      	mvns	r1, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081c8:	4313      	orrs	r3, r2
         );
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3724      	adds	r7, #36	; 0x24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
	...

080081d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081e8:	d301      	bcc.n	80081ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00f      	b.n	800820e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081ee:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <SysTick_Config+0x40>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081f6:	210f      	movs	r1, #15
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	f7ff ff8e 	bl	800811c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008200:	4b05      	ldr	r3, [pc, #20]	; (8008218 <SysTick_Config+0x40>)
 8008202:	2200      	movs	r2, #0
 8008204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008206:	4b04      	ldr	r3, [pc, #16]	; (8008218 <SysTick_Config+0x40>)
 8008208:	2207      	movs	r2, #7
 800820a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	e000e010 	.word	0xe000e010

0800821c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ff29 	bl	800807c <__NVIC_SetPriorityGrouping>
}
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	4603      	mov	r3, r0
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008240:	f7ff ff40 	bl	80080c4 <__NVIC_GetPriorityGrouping>
 8008244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	6978      	ldr	r0, [r7, #20]
 800824c:	f7ff ff90 	bl	8008170 <NVIC_EncodePriority>
 8008250:	4602      	mov	r2, r0
 8008252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff5f 	bl	800811c <__NVIC_SetPriority>
}
 800825e:	bf00      	nop
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	4603      	mov	r3, r0
 800826e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff ff33 	bl	80080e0 <__NVIC_EnableIRQ>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ffa4 	bl	80081d8 <SysTick_Config>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e08d      	b.n	80083ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <HAL_DMA_Init+0x138>)
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d80f      	bhi.n	80082da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	4b45      	ldr	r3, [pc, #276]	; (80083d8 <HAL_DMA_Init+0x13c>)
 80082c2:	4413      	add	r3, r2
 80082c4:	4a45      	ldr	r2, [pc, #276]	; (80083dc <HAL_DMA_Init+0x140>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	091b      	lsrs	r3, r3, #4
 80082cc:	009a      	lsls	r2, r3, #2
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a42      	ldr	r2, [pc, #264]	; (80083e0 <HAL_DMA_Init+0x144>)
 80082d6:	641a      	str	r2, [r3, #64]	; 0x40
 80082d8:	e00e      	b.n	80082f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	4b40      	ldr	r3, [pc, #256]	; (80083e4 <HAL_DMA_Init+0x148>)
 80082e2:	4413      	add	r3, r2
 80082e4:	4a3d      	ldr	r2, [pc, #244]	; (80083dc <HAL_DMA_Init+0x140>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	091b      	lsrs	r3, r3, #4
 80082ec:	009a      	lsls	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <HAL_DMA_Init+0x14c>)
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800830e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008312:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800831c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9b6 	bl	80086bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008358:	d102      	bne.n	8008360 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008374:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_DMA_Init+0x104>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d80c      	bhi.n	80083a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9d6 	bl	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	e008      	b.n	80083b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40020407 	.word	0x40020407
 80083d8:	bffdfff8 	.word	0xbffdfff8
 80083dc:	cccccccd 	.word	0xcccccccd
 80083e0:	40020000 	.word	0x40020000
 80083e4:	bffdfbf8 	.word	0xbffdfbf8
 80083e8:	40020400 	.word	0x40020400

080083ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_DMA_Start_IT+0x20>
 8008408:	2302      	movs	r3, #2
 800840a:	e066      	b.n	80084da <HAL_DMA_Start_IT+0xee>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d155      	bne.n	80084cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f8fb 	bl	8008640 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 020e 	orr.w	r2, r2, #14
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e00f      	b.n	8008484 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0204 	bic.w	r2, r2, #4
 8008472:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 020a 	orr.w	r2, r2, #10
 8008482:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0201 	orr.w	r2, r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e005      	b.n	80084d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
 80084d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fe:	f003 031f 	and.w	r3, r3, #31
 8008502:	2204      	movs	r2, #4
 8008504:	409a      	lsls	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d026      	beq.n	800855c <HAL_DMA_IRQHandler+0x7a>
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d021      	beq.n	800855c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d107      	bne.n	8008536 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0204 	bic.w	r2, r2, #4
 8008534:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	f003 021f 	and.w	r2, r3, #31
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	2104      	movs	r1, #4
 8008544:	fa01 f202 	lsl.w	r2, r1, r2
 8008548:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	2b00      	cmp	r3, #0
 8008550:	d071      	beq.n	8008636 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800855a:	e06c      	b.n	8008636 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2202      	movs	r2, #2
 8008566:	409a      	lsls	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d02e      	beq.n	80085ce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d029      	beq.n	80085ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 020a 	bic.w	r2, r2, #10
 8008596:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a4:	f003 021f 	and.w	r2, r3, #31
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	2102      	movs	r1, #2
 80085ae:	fa01 f202 	lsl.w	r2, r1, r2
 80085b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d038      	beq.n	8008636 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80085cc:	e033      	b.n	8008636 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	2208      	movs	r2, #8
 80085d8:	409a      	lsls	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4013      	ands	r3, r2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d02a      	beq.n	8008638 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d025      	beq.n	8008638 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 020e 	bic.w	r2, r2, #14
 80085fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	f003 021f 	and.w	r2, r3, #31
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	2101      	movs	r1, #1
 800860a:	fa01 f202 	lsl.w	r2, r1, r2
 800860e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008636:	bf00      	nop
 8008638:	bf00      	nop
}
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008656:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008668:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	f003 021f 	and.w	r2, r3, #31
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	2101      	movs	r1, #1
 8008678:	fa01 f202 	lsl.w	r2, r1, r2
 800867c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2b10      	cmp	r3, #16
 800868c:	d108      	bne.n	80086a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800869e:	e007      	b.n	80086b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	60da      	str	r2, [r3, #12]
}
 80086b0:	bf00      	nop
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	4b16      	ldr	r3, [pc, #88]	; (8008724 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d802      	bhi.n	80086d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80086d2:	617b      	str	r3, [r7, #20]
 80086d4:	e001      	b.n	80086da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80086d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	3b08      	subs	r3, #8
 80086e6:	4a12      	ldr	r2, [pc, #72]	; (8008730 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80086e8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f4:	089b      	lsrs	r3, r3, #2
 80086f6:	009a      	lsls	r2, r3, #2
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	461a      	mov	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008706:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 031f 	and.w	r3, r3, #31
 800870e:	2201      	movs	r2, #1
 8008710:	409a      	lsls	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40020407 	.word	0x40020407
 8008728:	40020800 	.word	0x40020800
 800872c:	40020820 	.word	0x40020820
 8008730:	cccccccd 	.word	0xcccccccd
 8008734:	40020880 	.word	0x40020880

08008738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	461a      	mov	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a08      	ldr	r2, [pc, #32]	; (800877c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800875a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3b01      	subs	r3, #1
 8008760:	f003 031f 	and.w	r3, r3, #31
 8008764:	2201      	movs	r2, #1
 8008766:	409a      	lsls	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	1000823f 	.word	0x1000823f
 800877c:	40020940 	.word	0x40020940

08008780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800878e:	e15a      	b.n	8008a46 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	2101      	movs	r1, #1
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	fa01 f303 	lsl.w	r3, r1, r3
 800879c:	4013      	ands	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 814c 	beq.w	8008a40 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d00b      	beq.n	80087c8 <HAL_GPIO_Init+0x48>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d007      	beq.n	80087c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80087bc:	2b11      	cmp	r3, #17
 80087be:	d003      	beq.n	80087c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	2b12      	cmp	r3, #18
 80087c6:	d130      	bne.n	800882a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	2203      	movs	r2, #3
 80087d4:	fa02 f303 	lsl.w	r3, r2, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4013      	ands	r3, r2
 80087de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087fe:	2201      	movs	r2, #1
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	43db      	mvns	r3, r3
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4013      	ands	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	091b      	lsrs	r3, r3, #4
 8008814:	f003 0201 	and.w	r2, r3, #1
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	2203      	movs	r2, #3
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	43db      	mvns	r3, r3
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4013      	ands	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d003      	beq.n	800886a <HAL_GPIO_Init+0xea>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b12      	cmp	r3, #18
 8008868:	d123      	bne.n	80088b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	08da      	lsrs	r2, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3208      	adds	r2, #8
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f003 0307 	and.w	r3, r3, #7
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	220f      	movs	r2, #15
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43db      	mvns	r3, r3
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4013      	ands	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	691a      	ldr	r2, [r3, #16]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	08da      	lsrs	r2, r3, #3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3208      	adds	r2, #8
 80088ac:	6939      	ldr	r1, [r7, #16]
 80088ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	2203      	movs	r2, #3
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	43db      	mvns	r3, r3
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	4013      	ands	r3, r2
 80088c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f003 0203 	and.w	r2, r3, #3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	005b      	lsls	r3, r3, #1
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 80a6 	beq.w	8008a40 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088f4:	4b5b      	ldr	r3, [pc, #364]	; (8008a64 <HAL_GPIO_Init+0x2e4>)
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	4a5a      	ldr	r2, [pc, #360]	; (8008a64 <HAL_GPIO_Init+0x2e4>)
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	6613      	str	r3, [r2, #96]	; 0x60
 8008900:	4b58      	ldr	r3, [pc, #352]	; (8008a64 <HAL_GPIO_Init+0x2e4>)
 8008902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	60bb      	str	r3, [r7, #8]
 800890a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800890c:	4a56      	ldr	r2, [pc, #344]	; (8008a68 <HAL_GPIO_Init+0x2e8>)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	089b      	lsrs	r3, r3, #2
 8008912:	3302      	adds	r3, #2
 8008914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	220f      	movs	r2, #15
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4013      	ands	r3, r2
 800892e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008936:	d01f      	beq.n	8008978 <HAL_GPIO_Init+0x1f8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a4c      	ldr	r2, [pc, #304]	; (8008a6c <HAL_GPIO_Init+0x2ec>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d019      	beq.n	8008974 <HAL_GPIO_Init+0x1f4>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a4b      	ldr	r2, [pc, #300]	; (8008a70 <HAL_GPIO_Init+0x2f0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d013      	beq.n	8008970 <HAL_GPIO_Init+0x1f0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a4a      	ldr	r2, [pc, #296]	; (8008a74 <HAL_GPIO_Init+0x2f4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00d      	beq.n	800896c <HAL_GPIO_Init+0x1ec>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a49      	ldr	r2, [pc, #292]	; (8008a78 <HAL_GPIO_Init+0x2f8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <HAL_GPIO_Init+0x1e8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a48      	ldr	r2, [pc, #288]	; (8008a7c <HAL_GPIO_Init+0x2fc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d101      	bne.n	8008964 <HAL_GPIO_Init+0x1e4>
 8008960:	2305      	movs	r3, #5
 8008962:	e00a      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 8008964:	2306      	movs	r3, #6
 8008966:	e008      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 8008968:	2304      	movs	r3, #4
 800896a:	e006      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 800896c:	2303      	movs	r3, #3
 800896e:	e004      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 8008970:	2302      	movs	r3, #2
 8008972:	e002      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <HAL_GPIO_Init+0x1fa>
 8008978:	2300      	movs	r3, #0
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	f002 0203 	and.w	r2, r2, #3
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4093      	lsls	r3, r2
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800898a:	4937      	ldr	r1, [pc, #220]	; (8008a68 <HAL_GPIO_Init+0x2e8>)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	3302      	adds	r3, #2
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008998:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <HAL_GPIO_Init+0x300>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	43db      	mvns	r3, r3
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4013      	ands	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80089bc:	4a30      	ldr	r2, [pc, #192]	; (8008a80 <HAL_GPIO_Init+0x300>)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80089c2:	4b2f      	ldr	r3, [pc, #188]	; (8008a80 <HAL_GPIO_Init+0x300>)
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	43db      	mvns	r3, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4013      	ands	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80089e6:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <HAL_GPIO_Init+0x300>)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089ec:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <HAL_GPIO_Init+0x300>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	43db      	mvns	r3, r3
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4013      	ands	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008a10:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <HAL_GPIO_Init+0x300>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008a16:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <HAL_GPIO_Init+0x300>)
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	43db      	mvns	r3, r3
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4013      	ands	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008a3a:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <HAL_GPIO_Init+0x300>)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3301      	adds	r3, #1
 8008a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f47f ae9d 	bne.w	8008790 <HAL_GPIO_Init+0x10>
  }
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	40021000 	.word	0x40021000
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	48000400 	.word	0x48000400
 8008a70:	48000800 	.word	0x48000800
 8008a74:	48000c00 	.word	0x48000c00
 8008a78:	48001000 	.word	0x48001000
 8008a7c:	48001400 	.word	0x48001400
 8008a80:	40010400 	.word	0x40010400

08008a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	807b      	strh	r3, [r7, #2]
 8008a90:	4613      	mov	r3, r2
 8008a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a94:	787b      	ldrb	r3, [r7, #1]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a9a:	887a      	ldrh	r2, [r7, #2]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008aa0:	e002      	b.n	8008aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008aa2:	887a      	ldrh	r2, [r7, #2]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e081      	b.n	8008bca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe fed6 	bl	800788c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2224      	movs	r2, #36	; 0x24
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d107      	bne.n	8008b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b2a:	609a      	str	r2, [r3, #8]
 8008b2c:	e006      	b.n	8008b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d104      	bne.n	8008b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	ea42 0103 	orr.w	r1, r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	021a      	lsls	r2, r3, #8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	69d9      	ldr	r1, [r3, #28]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1a      	ldr	r2, [r3, #32]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	817b      	strh	r3, [r7, #10]
 8008be6:	460b      	mov	r3, r1
 8008be8:	813b      	strh	r3, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	f040 80f9 	bne.w	8008dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <HAL_I2C_Mem_Write+0x34>
 8008c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0ed      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_I2C_Mem_Write+0x4e>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e0e6      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c2a:	f7ff f9f9 	bl	8008020 <HAL_GetTick>
 8008c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	2319      	movs	r3, #25
 8008c36:	2201      	movs	r2, #1
 8008c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fac3 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0d1      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2221      	movs	r2, #33	; 0x21
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2240      	movs	r2, #64	; 0x40
 8008c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6a3a      	ldr	r2, [r7, #32]
 8008c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c74:	88f8      	ldrh	r0, [r7, #6]
 8008c76:	893a      	ldrh	r2, [r7, #8]
 8008c78:	8979      	ldrh	r1, [r7, #10]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	4603      	mov	r3, r0
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f9d3 	bl	8009030 <I2C_RequestMemoryWrite>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d005      	beq.n	8008c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a9      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	2bff      	cmp	r3, #255	; 0xff
 8008ca4:	d90e      	bls.n	8008cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	22ff      	movs	r2, #255	; 0xff
 8008caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	8979      	ldrh	r1, [r7, #10]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fba5 	bl	800940c <I2C_TransferConfig>
 8008cc2:	e00f      	b.n	8008ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	8979      	ldrh	r1, [r7, #10]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fb94 	bl	800940c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 faad 	bl	8009248 <I2C_WaitOnTXISFlagUntilTimeout>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e07b      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d20:	3b01      	subs	r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d034      	beq.n	8008d9c <HAL_I2C_Mem_Write+0x1c8>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d130      	bne.n	8008d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	2200      	movs	r2, #0
 8008d42:	2180      	movs	r1, #128	; 0x80
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fa3f 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e04d      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2bff      	cmp	r3, #255	; 0xff
 8008d5c:	d90e      	bls.n	8008d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	22ff      	movs	r2, #255	; 0xff
 8008d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	8979      	ldrh	r1, [r7, #10]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fb49 	bl	800940c <I2C_TransferConfig>
 8008d7a:	e00f      	b.n	8008d9c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d8a:	b2da      	uxtb	r2, r3
 8008d8c:	8979      	ldrh	r1, [r7, #10]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 fb38 	bl	800940c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d19e      	bne.n	8008ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 fa8c 	bl	80092c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e01a      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6859      	ldr	r1, [r3, #4]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <HAL_I2C_Mem_Write+0x224>)
 8008dce:	400b      	ands	r3, r1
 8008dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e000      	b.n	8008df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008dee:	2302      	movs	r3, #2
  }
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	fe00e800 	.word	0xfe00e800

08008dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	817b      	strh	r3, [r7, #10]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	813b      	strh	r3, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b20      	cmp	r3, #32
 8008e20:	f040 80fd 	bne.w	800901e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_I2C_Mem_Read+0x34>
 8008e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d105      	bne.n	8008e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e0f1      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_I2C_Mem_Read+0x4e>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e0ea      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e52:	f7ff f8e5 	bl	8008020 <HAL_GetTick>
 8008e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	2319      	movs	r3, #25
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f9af 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e0d5      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2222      	movs	r2, #34	; 0x22
 8008e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2240      	movs	r2, #64	; 0x40
 8008e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e9c:	88f8      	ldrh	r0, [r7, #6]
 8008e9e:	893a      	ldrh	r2, [r7, #8]
 8008ea0:	8979      	ldrh	r1, [r7, #10]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4603      	mov	r3, r0
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 f913 	bl	80090d8 <I2C_RequestMemoryRead>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e0ad      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2bff      	cmp	r3, #255	; 0xff
 8008ecc:	d90e      	bls.n	8008eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	8979      	ldrh	r1, [r7, #10]
 8008edc:	4b52      	ldr	r3, [pc, #328]	; (8009028 <HAL_I2C_Mem_Read+0x22c>)
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fa91 	bl	800940c <I2C_TransferConfig>
 8008eea:	e00f      	b.n	8008f0c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	8979      	ldrh	r1, [r7, #10]
 8008efe:	4b4a      	ldr	r3, [pc, #296]	; (8009028 <HAL_I2C_Mem_Read+0x22c>)
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fa80 	bl	800940c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	2200      	movs	r2, #0
 8008f14:	2104      	movs	r1, #4
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f956 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07c      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b01      	subs	r3, #1
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d034      	beq.n	8008fcc <HAL_I2C_Mem_Read+0x1d0>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d130      	bne.n	8008fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	2200      	movs	r2, #0
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 f927 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e04d      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2bff      	cmp	r3, #255	; 0xff
 8008f8c:	d90e      	bls.n	8008fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	22ff      	movs	r2, #255	; 0xff
 8008f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	8979      	ldrh	r1, [r7, #10]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fa31 	bl	800940c <I2C_TransferConfig>
 8008faa:	e00f      	b.n	8008fcc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	8979      	ldrh	r1, [r7, #10]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fa20 	bl	800940c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d19a      	bne.n	8008f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 f974 	bl	80092c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e01a      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6859      	ldr	r1, [r3, #4]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	; (800902c <HAL_I2C_Mem_Read+0x230>)
 8008ffe:	400b      	ands	r3, r1
 8009000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
  }
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	80002400 	.word	0x80002400
 800902c:	fe00e800 	.word	0xfe00e800

08009030 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	4608      	mov	r0, r1
 800903a:	4611      	mov	r1, r2
 800903c:	461a      	mov	r2, r3
 800903e:	4603      	mov	r3, r0
 8009040:	817b      	strh	r3, [r7, #10]
 8009042:	460b      	mov	r3, r1
 8009044:	813b      	strh	r3, [r7, #8]
 8009046:	4613      	mov	r3, r2
 8009048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	8979      	ldrh	r1, [r7, #10]
 8009050:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <I2C_RequestMemoryWrite+0xa4>)
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f9d7 	bl	800940c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	69b9      	ldr	r1, [r7, #24]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 f8f0 	bl	8009248 <I2C_WaitOnTXISFlagUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d001      	beq.n	8009072 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e02c      	b.n	80090cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d105      	bne.n	8009084 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009078:	893b      	ldrh	r3, [r7, #8]
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	629a      	str	r2, [r3, #40]	; 0x28
 8009082:	e015      	b.n	80090b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009084:	893b      	ldrh	r3, [r7, #8]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	b29b      	uxth	r3, r3
 800908a:	b2da      	uxtb	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	69b9      	ldr	r1, [r7, #24]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 f8d6 	bl	8009248 <I2C_WaitOnTXISFlagUntilTimeout>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e012      	b.n	80090cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090a6:	893b      	ldrh	r3, [r7, #8]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2200      	movs	r2, #0
 80090b8:	2180      	movs	r1, #128	; 0x80
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f884 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	80002000 	.word	0x80002000

080090d8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	4608      	mov	r0, r1
 80090e2:	4611      	mov	r1, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	817b      	strh	r3, [r7, #10]
 80090ea:	460b      	mov	r3, r1
 80090ec:	813b      	strh	r3, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	8979      	ldrh	r1, [r7, #10]
 80090f8:	4b20      	ldr	r3, [pc, #128]	; (800917c <I2C_RequestMemoryRead+0xa4>)
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	2300      	movs	r3, #0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f984 	bl	800940c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	69b9      	ldr	r1, [r7, #24]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f89d 	bl	8009248 <I2C_WaitOnTXISFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e02c      	b.n	8009172 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d105      	bne.n	800912a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800911e:	893b      	ldrh	r3, [r7, #8]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	629a      	str	r2, [r3, #40]	; 0x28
 8009128:	e015      	b.n	8009156 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800912a:	893b      	ldrh	r3, [r7, #8]
 800912c:	0a1b      	lsrs	r3, r3, #8
 800912e:	b29b      	uxth	r3, r3
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009138:	69fa      	ldr	r2, [r7, #28]
 800913a:	69b9      	ldr	r1, [r7, #24]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f883 	bl	8009248 <I2C_WaitOnTXISFlagUntilTimeout>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e012      	b.n	8009172 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800914c:	893b      	ldrh	r3, [r7, #8]
 800914e:	b2da      	uxtb	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2200      	movs	r2, #0
 800915e:	2140      	movs	r1, #64	; 0x40
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f831 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	80002000 	.word	0x80002000

08009180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b02      	cmp	r3, #2
 8009194:	d103      	bne.n	800919e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2200      	movs	r2, #0
 800919c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d007      	beq.n	80091bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	619a      	str	r2, [r3, #24]
  }
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091d8:	e022      	b.n	8009220 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d01e      	beq.n	8009220 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091e2:	f7fe ff1d 	bl	8008020 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d302      	bcc.n	80091f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d113      	bne.n	8009220 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	f043 0220 	orr.w	r2, r3, #32
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e00f      	b.n	8009240 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4013      	ands	r3, r2
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	429a      	cmp	r2, r3
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	461a      	mov	r2, r3
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	429a      	cmp	r2, r3
 800923c:	d0cd      	beq.n	80091da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009254:	e02c      	b.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f870 	bl	8009340 <I2C_IsAcknowledgeFailed>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e02a      	b.n	80092c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009270:	d01e      	beq.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009272:	f7fe fed5 	bl	8008020 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	429a      	cmp	r2, r3
 8009280:	d302      	bcc.n	8009288 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d113      	bne.n	80092b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	f043 0220 	orr.w	r2, r3, #32
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2220      	movs	r2, #32
 8009298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e007      	b.n	80092c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d1cb      	bne.n	8009256 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092d4:	e028      	b.n	8009328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	68b9      	ldr	r1, [r7, #8]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f830 	bl	8009340 <I2C_IsAcknowledgeFailed>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e026      	b.n	8009338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ea:	f7fe fe99 	bl	8008020 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d302      	bcc.n	8009300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d113      	bne.n	8009328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009304:	f043 0220 	orr.w	r2, r3, #32
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e007      	b.n	8009338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b20      	cmp	r3, #32
 8009334:	d1cf      	bne.n	80092d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b10      	cmp	r3, #16
 8009358:	d151      	bne.n	80093fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800935a:	e022      	b.n	80093a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d01e      	beq.n	80093a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009364:	f7fe fe5c 	bl	8008020 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	429a      	cmp	r2, r3
 8009372:	d302      	bcc.n	800937a <I2C_IsAcknowledgeFailed+0x3a>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d113      	bne.n	80093a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937e:	f043 0220 	orr.w	r2, r3, #32
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e02e      	b.n	8009400 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f003 0320 	and.w	r3, r3, #32
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	d1d5      	bne.n	800935c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2210      	movs	r2, #16
 80093b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2220      	movs	r2, #32
 80093be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fedd 	bl	8009180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6859      	ldr	r1, [r3, #4]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <I2C_IsAcknowledgeFailed+0xc8>)
 80093d2:	400b      	ands	r3, r1
 80093d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093da:	f043 0204 	orr.w	r2, r3, #4
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	fe00e800 	.word	0xfe00e800

0800940c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	817b      	strh	r3, [r7, #10]
 800941a:	4613      	mov	r3, r2
 800941c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	0d5b      	lsrs	r3, r3, #21
 8009428:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800942c:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <I2C_TransferConfig+0x58>)
 800942e:	430b      	orrs	r3, r1
 8009430:	43db      	mvns	r3, r3
 8009432:	ea02 0103 	and.w	r1, r2, r3
 8009436:	897b      	ldrh	r3, [r7, #10]
 8009438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800943c:	7a7b      	ldrb	r3, [r7, #9]
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	431a      	orrs	r2, r3
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	03ff63ff 	.word	0x03ff63ff

08009468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b20      	cmp	r3, #32
 800947c:	d138      	bne.n	80094f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009488:	2302      	movs	r3, #2
 800948a:	e032      	b.n	80094f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2224      	movs	r2, #36	; 0x24
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0201 	orr.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e000      	b.n	80094f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b20      	cmp	r3, #32
 8009512:	d139      	bne.n	8009588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800951e:	2302      	movs	r3, #2
 8009520:	e033      	b.n	800958a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2224      	movs	r2, #36	; 0x24
 800952e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0201 	bic.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4313      	orrs	r3, r2
 800955a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	e000      	b.n	800958a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009588:	2302      	movs	r3, #2
  }
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009598:	b08b      	sub	sp, #44	; 0x2c
 800959a:	af06      	add	r7, sp, #24
 800959c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0d7      	b.n	8009758 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f008 f957 	bl	8011870 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2203      	movs	r2, #3
 80095c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f004 f8ab 	bl	800d72a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095d4:	2300      	movs	r3, #0
 80095d6:	73fb      	strb	r3, [r7, #15]
 80095d8:	e04c      	b.n	8009674 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	440b      	add	r3, r1
 80095ea:	3301      	adds	r3, #1
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	440b      	add	r3, r1
 8009600:	7bfa      	ldrb	r2, [r7, #15]
 8009602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009604:	7bfa      	ldrb	r2, [r7, #15]
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	b298      	uxth	r0, r3
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	440b      	add	r3, r1
 8009616:	3336      	adds	r3, #54	; 0x36
 8009618:	4602      	mov	r2, r0
 800961a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	440b      	add	r3, r1
 800962c:	3303      	adds	r3, #3
 800962e:	2200      	movs	r2, #0
 8009630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009632:	7bfa      	ldrb	r2, [r7, #15]
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	440b      	add	r3, r1
 8009640:	3338      	adds	r3, #56	; 0x38
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009646:	7bfa      	ldrb	r2, [r7, #15]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	440b      	add	r3, r1
 8009654:	333c      	adds	r3, #60	; 0x3c
 8009656:	2200      	movs	r2, #0
 8009658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800965a:	7bfa      	ldrb	r2, [r7, #15]
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	00db      	lsls	r3, r3, #3
 8009666:	440b      	add	r3, r1
 8009668:	3340      	adds	r3, #64	; 0x40
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	3301      	adds	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
 8009674:	7bfa      	ldrb	r2, [r7, #15]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	429a      	cmp	r2, r3
 800967c:	d3ad      	bcc.n	80095da <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e044      	b.n	800970e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009684:	7bfa      	ldrb	r2, [r7, #15]
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	440b      	add	r3, r1
 8009692:	f203 1369 	addw	r3, r3, #361	; 0x169
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800969a:	7bfa      	ldrb	r2, [r7, #15]
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	440b      	add	r3, r1
 80096a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80096ac:	7bfa      	ldrb	r2, [r7, #15]
 80096ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096b0:	7bfa      	ldrb	r2, [r7, #15]
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	440b      	add	r3, r1
 80096be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096c6:	7bfa      	ldrb	r2, [r7, #15]
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	440b      	add	r3, r1
 80096d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096dc:	7bfa      	ldrb	r2, [r7, #15]
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4613      	mov	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	440b      	add	r3, r1
 80096ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096f2:	7bfa      	ldrb	r2, [r7, #15]
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	440b      	add	r3, r1
 8009700:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	3301      	adds	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]
 800970e:	7bfa      	ldrb	r2, [r7, #15]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d3b5      	bcc.n	8009684 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	603b      	str	r3, [r7, #0]
 800971e:	687e      	ldr	r6, [r7, #4]
 8009720:	466d      	mov	r5, sp
 8009722:	f106 0410 	add.w	r4, r6, #16
 8009726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	1d33      	adds	r3, r6, #4
 8009730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009732:	6838      	ldr	r0, [r7, #0]
 8009734:	f004 f814 	bl	800d760 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d102      	bne.n	8009756 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fb8a 	bl	800ae6a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009760 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800976e:	2b01      	cmp	r3, #1
 8009770:	d101      	bne.n	8009776 <HAL_PCD_Start+0x16>
 8009772:	2302      	movs	r3, #2
 8009774:	e012      	b.n	800979c <HAL_PCD_Start+0x3c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f003 ffba 	bl	800d6fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4618      	mov	r0, r3
 800978e:	f006 f96e 	bl	800fa6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f006 f973 	bl	800fa9c <USB_ReadInterrupts>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c0:	d102      	bne.n	80097c8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb4d 	bl	8009e62 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f006 f965 	bl	800fa9c <USB_ReadInterrupts>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097dc:	d112      	bne.n	8009804 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f0:	b292      	uxth	r2, r2
 80097f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f008 f8b5 	bl	8011966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f91e 	bl	8009a40 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f006 f947 	bl	800fa9c <USB_ReadInterrupts>
 800980e:	4603      	mov	r3, r0
 8009810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009818:	d10b      	bne.n	8009832 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009822:	b29a      	uxth	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800982c:	b292      	uxth	r2, r2
 800982e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f006 f930 	bl	800fa9c <USB_ReadInterrupts>
 800983c:	4603      	mov	r3, r0
 800983e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009846:	d10b      	bne.n	8009860 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009850:	b29a      	uxth	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800985a:	b292      	uxth	r2, r2
 800985c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f006 f919 	bl	800fa9c <USB_ReadInterrupts>
 800986a:	4603      	mov	r3, r0
 800986c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009874:	d133      	bne.n	80098de <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0204 	bic.w	r2, r2, #4
 8009888:	b292      	uxth	r2, r2
 800988a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0208 	bic.w	r2, r2, #8
 80098a0:	b292      	uxth	r2, r2
 80098a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d107      	bne.n	80098c0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80098b8:	2100      	movs	r1, #0
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f008 fa48 	bl	8011d50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f008 f889 	bl	80119d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098d8:	b292      	uxth	r2, r2
 80098da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f006 f8da 	bl	800fa9c <USB_ReadInterrupts>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f2:	d126      	bne.n	8009942 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0208 	orr.w	r2, r2, #8
 8009906:	b292      	uxth	r2, r2
 8009908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800991e:	b292      	uxth	r2, r2
 8009920:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0204 	orr.w	r2, r2, #4
 8009936:	b292      	uxth	r2, r2
 8009938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f008 f831 	bl	80119a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f006 f8a8 	bl	800fa9c <USB_ReadInterrupts>
 800994c:	4603      	mov	r3, r0
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b80      	cmp	r3, #128	; 0x80
 8009954:	d13f      	bne.n	80099d6 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009968:	b292      	uxth	r2, r2
 800996a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d12b      	bne.n	80099d0 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0204 	orr.w	r2, r2, #4
 800998a:	b292      	uxth	r2, r2
 800998c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0208 	orr.w	r2, r2, #8
 80099a2:	b292      	uxth	r2, r2
 80099a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	089b      	lsrs	r3, r3, #2
 80099bc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80099c6:	2101      	movs	r1, #1
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f008 f9c1 	bl	8011d50 <HAL_PCDEx_LPM_Callback>
 80099ce:	e002      	b.n	80099d6 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f007 ffe7 	bl	80119a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f006 f85e 	bl	800fa9c <USB_ReadInterrupts>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ea:	d10e      	bne.n	8009a0a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80099fe:	b292      	uxth	r2, r2
 8009a00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f007 ffa0 	bl	801194a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f006 f844 	bl	800fa9c <USB_ReadInterrupts>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1e:	d10b      	bne.n	8009a38 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a32:	b292      	uxth	r2, r2
 8009a34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_PCD_SetAddress+0x1a>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e013      	b.n	8009a82 <HAL_PCD_SetAddress+0x42>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	4611      	mov	r1, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f005 ffe7 	bl	800fa46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	4608      	mov	r0, r1
 8009a94:	4611      	mov	r1, r2
 8009a96:	461a      	mov	r2, r3
 8009a98:	4603      	mov	r3, r0
 8009a9a:	70fb      	strb	r3, [r7, #3]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	803b      	strh	r3, [r7, #0]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	da0e      	bge.n	8009ace <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	00db      	lsls	r3, r3, #3
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	705a      	strb	r2, [r3, #1]
 8009acc:	e00e      	b.n	8009aec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ace:	78fb      	ldrb	r3, [r7, #3]
 8009ad0:	f003 0207 	and.w	r2, r3, #7
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	f003 0307 	and.w	r3, r3, #7
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009af8:	883a      	ldrh	r2, [r7, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	78ba      	ldrb	r2, [r7, #2]
 8009b02:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009b16:	78bb      	ldrb	r3, [r7, #2]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d102      	bne.n	8009b22 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_PCD_EP_Open+0xa6>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e00e      	b.n	8009b4e <HAL_PCD_EP_Open+0xc4>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68f9      	ldr	r1, [r7, #12]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f003 fe30 	bl	800d7a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009b4c:	7afb      	ldrb	r3, [r7, #11]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	da0e      	bge.n	8009b88 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	f003 0307 	and.w	r3, r3, #7
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	705a      	strb	r2, [r3, #1]
 8009b86:	e00e      	b.n	8009ba6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	f003 0207 	and.w	r2, r3, #7
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_PCD_EP_Close+0x6a>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e00e      	b.n	8009bde <HAL_PCD_EP_Close+0x88>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f004 f956 	bl	800de80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b086      	sub	sp, #24
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	f003 0207 	and.w	r2, r3, #7
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2200      	movs	r2, #0
 8009c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c32:	7afb      	ldrb	r3, [r7, #11]
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f004 fb09 	bl	800e25a <USB_EPStartXfer>
 8009c48:	e005      	b.n	8009c56 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6979      	ldr	r1, [r7, #20]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f004 fb02 	bl	800e25a <USB_EPStartXfer>
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	f003 0207 	and.w	r2, r3, #7
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009c82:	681b      	ldr	r3, [r3, #0]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	603b      	str	r3, [r7, #0]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cdc:	7afb      	ldrb	r3, [r7, #11]
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	f003 0307 	and.w	r3, r3, #7
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d106      	bne.n	8009d00 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f004 faae 	bl	800e25a <USB_EPStartXfer>
 8009cfe:	e005      	b.n	8009d0c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f004 faa7 	bl	800e25a <USB_EPStartXfer>
  }

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3718      	adds	r7, #24
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	f003 0207 	and.w	r2, r3, #7
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d901      	bls.n	8009d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e03e      	b.n	8009db2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da0e      	bge.n	8009d5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4413      	add	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2201      	movs	r2, #1
 8009d56:	705a      	strb	r2, [r3, #1]
 8009d58:	e00c      	b.n	8009d74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	00db      	lsls	r3, r3, #3
 8009d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2201      	movs	r2, #1
 8009d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	f003 0307 	and.w	r3, r3, #7
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_PCD_EP_SetStall+0x7e>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e00e      	b.n	8009db2 <HAL_PCD_EP_SetStall+0x9c>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f005 fd50 	bl	800f848 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009dc6:	78fb      	ldrb	r3, [r7, #3]
 8009dc8:	f003 020f 	and.w	r2, r3, #15
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d901      	bls.n	8009dd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e040      	b.n	8009e5a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da0e      	bge.n	8009dfe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	4413      	add	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	705a      	strb	r2, [r3, #1]
 8009dfc:	e00e      	b.n	8009e1c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dfe:	78fb      	ldrb	r3, [r7, #3]
 8009e00:	f003 0207 	and.w	r2, r3, #7
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_PCD_EP_ClrStall+0x82>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e00e      	b.n	8009e5a <HAL_PCD_EP_ClrStall+0xa0>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68f9      	ldr	r1, [r7, #12]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f005 fd4d 	bl	800f8ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b08e      	sub	sp, #56	; 0x38
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009e6a:	e2d6      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e74:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 030f 	and.w	r3, r3, #15
 8009e7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8009e82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f040 815b 	bne.w	800a142 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009e8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d150      	bne.n	8009f38 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea6:	81fb      	strh	r3, [r7, #14]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	89fb      	ldrh	r3, [r7, #14]
 8009eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3328      	adds	r3, #40	; 0x28
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	4413      	add	r3, r2
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6812      	ldr	r2, [r2, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	695a      	ldr	r2, [r3, #20]
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	441a      	add	r2, r3
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f007 fd0c 	bl	8011916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 8287 	beq.w	800a41a <PCD_EP_ISR_Handler+0x5b8>
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8282 	bne.w	800a41a <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009f36:	e270      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d032      	beq.n	8009fb8 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4413      	add	r3, r2
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f005 fdd7 	bl	800fb40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	823b      	strh	r3, [r7, #16]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	8a3a      	ldrh	r2, [r7, #16]
 8009fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fac:	b292      	uxth	r2, r2
 8009fae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f007 fc83 	bl	80118bc <HAL_PCD_SetupStageCallback>
 8009fb6:	e230      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009fb8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f280 822c 	bge.w	800a41a <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009fce:	4013      	ands	r3, r2
 8009fd0:	83bb      	strh	r3, [r7, #28]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	8bba      	ldrh	r2, [r7, #28]
 8009fd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009fdc:	b292      	uxth	r2, r2
 8009fde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	6812      	ldr	r2, [r2, #0]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d019      	beq.n	800a044 <PCD_EP_ISR_Handler+0x1e2>
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d015      	beq.n	800a044 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	6959      	ldr	r1, [r3, #20]
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f005 fd89 	bl	800fb40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	695a      	ldr	r2, [r3, #20]
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	441a      	add	r2, r3
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f007 fc4e 	bl	80118e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 81e2 	bne.w	800a41a <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a064:	b29b      	uxth	r3, r3
 800a066:	461a      	mov	r2, r3
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	4413      	add	r3, r2
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d112      	bne.n	800a0a4 <PCD_EP_ISR_Handler+0x242>
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	b29b      	uxth	r3, r3
 800a084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a088:	b29a      	uxth	r2, r3
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	b29b      	uxth	r3, r3
 800a094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	801a      	strh	r2, [r3, #0]
 800a0a2:	e02f      	b.n	800a104 <PCD_EP_ISR_Handler+0x2a2>
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b3e      	cmp	r3, #62	; 0x3e
 800a0aa:	d813      	bhi.n	800a0d4 <PCD_EP_ISR_Handler+0x272>
 800a0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <PCD_EP_ISR_Handler+0x264>
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	029b      	lsls	r3, r3, #10
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e017      	b.n	800a104 <PCD_EP_ISR_Handler+0x2a2>
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	095b      	lsrs	r3, r3, #5
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d102      	bne.n	800a0ee <PCD_EP_ISR_Handler+0x28c>
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	029b      	lsls	r3, r3, #10
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a114:	827b      	strh	r3, [r7, #18]
 800a116:	8a7b      	ldrh	r3, [r7, #18]
 800a118:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a11c:	827b      	strh	r3, [r7, #18]
 800a11e:	8a7b      	ldrh	r3, [r7, #18]
 800a120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a124:	827b      	strh	r3, [r7, #18]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	8a7b      	ldrh	r3, [r7, #18]
 800a12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	8013      	strh	r3, [r2, #0]
 800a140:	e16b      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4413      	add	r3, r2
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a154:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f280 80e4 	bge.w	800a326 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a174:	4013      	ands	r3, r2
 800a176:	853b      	strh	r3, [r7, #40]	; 0x28
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a18c:	b292      	uxth	r2, r2
 800a18e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a190:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	7b1b      	ldrb	r3, [r3, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d120      	bne.n	800a1f0 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	00db      	lsls	r3, r3, #3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6812      	ldr	r2, [r2, #0]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1d2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800a1d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8083 	beq.w	800a2e2 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	6959      	ldr	r1, [r3, #20]
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	88da      	ldrh	r2, [r3, #6]
 800a1e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1ea:	f005 fca9 	bl	800fb40 <USB_ReadPMA>
 800a1ee:	e078      	b.n	800a2e2 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	78db      	ldrb	r3, [r3, #3]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d108      	bne.n	800a20a <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a1f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f919 	bl	800a436 <HAL_PCD_EP_DB_Receive>
 800a204:	4603      	mov	r3, r0
 800a206:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a208:	e06b      	b.n	800a2e2 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a224:	847b      	strh	r3, [r7, #34]	; 0x22
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	441a      	add	r2, r3
 800a234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a246:	b29b      	uxth	r3, r3
 800a248:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01f      	beq.n	800a2a4 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	461a      	mov	r2, r3
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	4413      	add	r3, r2
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	4413      	add	r3, r2
 800a27e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a288:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800a28a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d028      	beq.n	800a2e2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	6959      	ldr	r1, [r3, #20]
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	891a      	ldrh	r2, [r3, #8]
 800a29c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a29e:	f005 fc4f 	bl	800fb40 <USB_ReadPMA>
 800a2a2:	e01e      	b.n	800a2e2 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6812      	ldr	r2, [r2, #0]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2c8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800a2ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	6959      	ldr	r1, [r3, #20]
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	895a      	ldrh	r2, [r3, #10]
 800a2dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2de:	f005 fc2f 	bl	800fb40 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	69da      	ldr	r2, [r3, #28]
 800a2e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2e8:	441a      	add	r2, r3
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	695a      	ldr	r2, [r3, #20]
 800a2f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2f4:	441a      	add	r2, r3
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d004      	beq.n	800a30c <PCD_EP_ISR_Handler+0x4aa>
 800a302:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d206      	bcs.n	800a31a <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f007 fae4 	bl	80118e0 <HAL_PCD_DataOutStageCallback>
 800a318:	e005      	b.n	800a326 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a320:	4618      	mov	r0, r3
 800a322:	f003 ff9a 	bl	800e25a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d074      	beq.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800a330:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	4413      	add	r3, r2
 800a342:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	461a      	mov	r2, r3
 800a34a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a35a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35e:	843b      	strh	r3, [r7, #32]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	441a      	add	r2, r3
 800a36e:	8c3b      	ldrh	r3, [r7, #32]
 800a370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a378:	b29b      	uxth	r3, r3
 800a37a:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d144      	bne.n	800a40e <PCD_EP_ISR_Handler+0x5ac>
 800a384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d13f      	bne.n	800a40e <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a396:	b29b      	uxth	r3, r3
 800a398:	461a      	mov	r2, r3
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	8bfb      	ldrh	r3, [r7, #30]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d906      	bls.n	800a3cc <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	8bfb      	ldrh	r3, [r7, #30]
 800a3c4:	1ad2      	subs	r2, r2, r3
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	619a      	str	r2, [r3, #24]
 800a3ca:	e002      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d106      	bne.n	800a3e8 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f007 fa98 	bl	8011916 <HAL_PCD_DataInStageCallback>
 800a3e6:	e018      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	695a      	ldr	r2, [r3, #20]
 800a3ec:	8bfb      	ldrh	r3, [r7, #30]
 800a3ee:	441a      	add	r2, r3
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	69da      	ldr	r2, [r3, #28]
 800a3f8:	8bfb      	ldrh	r3, [r7, #30]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a406:	4618      	mov	r0, r3
 800a408:	f003 ff27 	bl	800e25a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800a40c:	e005      	b.n	800a41a <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a40e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a410:	461a      	mov	r2, r3
 800a412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f917 	bl	800a648 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a422:	b29b      	uxth	r3, r3
 800a424:	b21b      	sxth	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	f6ff ad20 	blt.w	8009e6c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3738      	adds	r7, #56	; 0x38
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b088      	sub	sp, #32
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	60f8      	str	r0, [r7, #12]
 800a43e:	60b9      	str	r1, [r7, #8]
 800a440:	4613      	mov	r3, r2
 800a442:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a444:	88fb      	ldrh	r3, [r7, #6]
 800a446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d07c      	beq.n	800a548 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	6812      	ldr	r2, [r2, #0]
 800a466:	4413      	add	r3, r2
 800a468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a472:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	699a      	ldr	r2, [r3, #24]
 800a478:	8b7b      	ldrh	r3, [r7, #26]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d306      	bcc.n	800a48c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	8b7b      	ldrh	r3, [r7, #26]
 800a484:	1ad2      	subs	r2, r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	619a      	str	r2, [r3, #24]
 800a48a:	e002      	b.n	800a492 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2200      	movs	r2, #0
 800a490:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d123      	bne.n	800a4e2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4b4:	833b      	strh	r3, [r7, #24]
 800a4b6:	8b3b      	ldrh	r3, [r7, #24]
 800a4b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4bc:	833b      	strh	r3, [r7, #24]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	441a      	add	r2, r3
 800a4cc:	8b3b      	ldrh	r3, [r7, #24]
 800a4ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01f      	beq.n	800a52c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4413      	add	r3, r2
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a506:	82fb      	strh	r3, [r7, #22]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	441a      	add	r2, r3
 800a516:	8afb      	ldrh	r3, [r7, #22]
 800a518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a51c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a528:	b29b      	uxth	r3, r3
 800a52a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a52c:	8b7b      	ldrh	r3, [r7, #26]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 8085 	beq.w	800a63e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6959      	ldr	r1, [r3, #20]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	891a      	ldrh	r2, [r3, #8]
 800a540:	8b7b      	ldrh	r3, [r7, #26]
 800a542:	f005 fafd 	bl	800fb40 <USB_ReadPMA>
 800a546:	e07a      	b.n	800a63e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a550:	b29b      	uxth	r3, r3
 800a552:	461a      	mov	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	4413      	add	r3, r2
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	4413      	add	r3, r2
 800a562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a56c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	8b7b      	ldrh	r3, [r7, #26]
 800a574:	429a      	cmp	r2, r3
 800a576:	d306      	bcc.n	800a586 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	8b7b      	ldrh	r3, [r7, #26]
 800a57e:	1ad2      	subs	r2, r2, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	619a      	str	r2, [r3, #24]
 800a584:	e002      	b.n	800a58c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2200      	movs	r2, #0
 800a58a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d123      	bne.n	800a5dc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ae:	83fb      	strh	r3, [r7, #30]
 800a5b0:	8bfb      	ldrh	r3, [r7, #30]
 800a5b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5b6:	83fb      	strh	r3, [r7, #30]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	441a      	add	r2, r3
 800a5c6:	8bfb      	ldrh	r3, [r7, #30]
 800a5c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a5dc:	88fb      	ldrh	r3, [r7, #6]
 800a5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d11f      	bne.n	800a626 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a600:	83bb      	strh	r3, [r7, #28]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	461a      	mov	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	441a      	add	r2, r3
 800a610:	8bbb      	ldrh	r3, [r7, #28]
 800a612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a61a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a622:	b29b      	uxth	r3, r3
 800a624:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a626:	8b7b      	ldrh	r3, [r7, #26]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6818      	ldr	r0, [r3, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	6959      	ldr	r1, [r3, #20]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	895a      	ldrh	r2, [r3, #10]
 800a638:	8b7b      	ldrh	r3, [r7, #26]
 800a63a:	f005 fa81 	bl	800fb40 <USB_ReadPMA>
    }
  }

  return count;
 800a63e:	8b7b      	ldrh	r3, [r7, #26]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b0a2      	sub	sp, #136	; 0x88
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	4613      	mov	r3, r2
 800a654:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a656:	88fb      	ldrh	r3, [r7, #6]
 800a658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 81c5 	beq.w	800a9ec <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	4413      	add	r3, r2
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a686:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a692:	429a      	cmp	r2, r3
 800a694:	d907      	bls.n	800a6a6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	699a      	ldr	r2, [r3, #24]
 800a69a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	619a      	str	r2, [r3, #24]
 800a6a4:	e002      	b.n	800a6ac <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 80b9 	bne.w	800a828 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d126      	bne.n	800a70c <HAL_PCD_EP_DB_Transmit+0xc4>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	4413      	add	r3, r2
 800a6d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	00da      	lsls	r2, r3, #3
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	4413      	add	r3, r2
 800a6e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	801a      	strh	r2, [r3, #0]
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a704:	b29a      	uxth	r2, r3
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	801a      	strh	r2, [r3, #0]
 800a70a:	e01a      	b.n	800a742 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	785b      	ldrb	r3, [r3, #1]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d116      	bne.n	800a742 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	633b      	str	r3, [r7, #48]	; 0x30
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a722:	b29b      	uxth	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	4413      	add	r3, r2
 800a72a:	633b      	str	r3, [r7, #48]	; 0x30
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	00da      	lsls	r2, r3, #3
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	4413      	add	r3, r2
 800a736:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a73a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	2200      	movs	r2, #0
 800a740:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	623b      	str	r3, [r7, #32]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d126      	bne.n	800a79e <HAL_PCD_EP_DB_Transmit+0x156>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	61bb      	str	r3, [r7, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a75e:	b29b      	uxth	r3, r3
 800a760:	461a      	mov	r2, r3
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	4413      	add	r3, r2
 800a766:	61bb      	str	r3, [r7, #24]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	00da      	lsls	r2, r3, #3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	4413      	add	r3, r2
 800a772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a782:	b29a      	uxth	r2, r3
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	801a      	strh	r2, [r3, #0]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a796:	b29a      	uxth	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	801a      	strh	r2, [r3, #0]
 800a79c:	e017      	b.n	800a7ce <HAL_PCD_EP_DB_Transmit+0x186>
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d113      	bne.n	800a7ce <HAL_PCD_EP_DB_Transmit+0x186>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	623b      	str	r3, [r7, #32]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	00da      	lsls	r2, r3, #3
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f007 f89e 	bl	8011916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7da:	88fb      	ldrh	r3, [r7, #6]
 800a7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 82d2 	beq.w	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a800:	827b      	strh	r3, [r7, #18]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	441a      	add	r2, r3
 800a810:	8a7b      	ldrh	r3, [r7, #18]
 800a812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a81a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a81e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a822:	b29b      	uxth	r3, r3
 800a824:	8013      	strh	r3, [r2, #0]
 800a826:	e2b0      	b.n	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d021      	beq.n	800a876 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	b29b      	uxth	r3, r3
 800a844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a84c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	441a      	add	r2, r3
 800a85e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a86a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a872:	b29b      	uxth	r3, r3
 800a874:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	f040 8284 	bne.w	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	695a      	ldr	r2, [r3, #20]
 800a886:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a88a:	441a      	add	r2, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	69da      	ldr	r2, [r3, #28]
 800a894:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a898:	441a      	add	r2, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	6a1a      	ldr	r2, [r3, #32]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d309      	bcc.n	800a8be <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6a1a      	ldr	r2, [r3, #32]
 800a8b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	621a      	str	r2, [r3, #32]
 800a8bc:	e015      	b.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d107      	bne.n	800a8d6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 800a8c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a8ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a8d4:	e009      	b.n	800a8ea <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	785b      	ldrb	r3, [r3, #1]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d155      	bne.n	800a99e <HAL_PCD_EP_DB_Transmit+0x356>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a900:	b29b      	uxth	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	4413      	add	r3, r2
 800a908:	63bb      	str	r3, [r7, #56]	; 0x38
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	00da      	lsls	r2, r3, #3
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	4413      	add	r3, r2
 800a914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a918:	637b      	str	r3, [r7, #52]	; 0x34
 800a91a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d112      	bne.n	800a946 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800a920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92e:	801a      	strh	r2, [r3, #0]
 800a930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a93a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a93e:	b29a      	uxth	r2, r3
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	e047      	b.n	800a9d6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	2b3e      	cmp	r3, #62	; 0x3e
 800a94a:	d811      	bhi.n	800a970 <HAL_PCD_EP_DB_Transmit+0x328>
 800a94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	64bb      	str	r3, [r7, #72]	; 0x48
 800a952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <HAL_PCD_EP_DB_Transmit+0x31a>
 800a95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95e:	3301      	adds	r3, #1
 800a960:	64bb      	str	r3, [r7, #72]	; 0x48
 800a962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a964:	b29b      	uxth	r3, r3
 800a966:	029b      	lsls	r3, r3, #10
 800a968:	b29a      	uxth	r2, r3
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	e032      	b.n	800a9d6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a972:	095b      	lsrs	r3, r3, #5
 800a974:	64bb      	str	r3, [r7, #72]	; 0x48
 800a976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a978:	f003 031f 	and.w	r3, r3, #31
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <HAL_PCD_EP_DB_Transmit+0x33e>
 800a980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a982:	3b01      	subs	r3, #1
 800a984:	64bb      	str	r3, [r7, #72]	; 0x48
 800a986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a988:	b29b      	uxth	r3, r3
 800a98a:	029b      	lsls	r3, r3, #10
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a996:	b29a      	uxth	r2, r3
 800a998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e01b      	b.n	800a9d6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	785b      	ldrb	r3, [r3, #1]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d117      	bne.n	800a9d6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ba:	4413      	add	r3, r2
 800a9bc:	643b      	str	r3, [r7, #64]	; 0x40
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	00da      	lsls	r2, r3, #3
 800a9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6959      	ldr	r1, [r3, #20]
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	891a      	ldrh	r2, [r3, #8]
 800a9e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	f005 f869 	bl	800fabc <USB_WritePMA>
 800a9ea:	e1ce      	b.n	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	4413      	add	r3, r2
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa0a:	881b      	ldrh	r3, [r3, #0]
 800aa0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d307      	bcc.n	800aa30 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	699a      	ldr	r2, [r3, #24]
 800aa24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa28:	1ad2      	subs	r2, r2, r3
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	619a      	str	r2, [r3, #24]
 800aa2e:	e002      	b.n	800aa36 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2200      	movs	r2, #0
 800aa34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f040 80c4 	bne.w	800abc8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	785b      	ldrb	r3, [r3, #1]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d126      	bne.n	800aa96 <HAL_PCD_EP_DB_Transmit+0x44e>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	00da      	lsls	r2, r3, #3
 800aa66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa68:	4413      	add	r3, r2
 800aa6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa6e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	e01a      	b.n	800aacc <HAL_PCD_EP_DB_Transmit+0x484>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	785b      	ldrb	r3, [r3, #1]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d116      	bne.n	800aacc <HAL_PCD_EP_DB_Transmit+0x484>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	677b      	str	r3, [r7, #116]	; 0x74
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	461a      	mov	r2, r3
 800aab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab2:	4413      	add	r3, r2
 800aab4:	677b      	str	r3, [r7, #116]	; 0x74
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	00da      	lsls	r2, r3, #3
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aabe:	4413      	add	r3, r2
 800aac0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aac4:	673b      	str	r3, [r7, #112]	; 0x70
 800aac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aac8:	2200      	movs	r2, #0
 800aaca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	785b      	ldrb	r3, [r3, #1]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d12f      	bne.n	800ab3a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	00da      	lsls	r2, r3, #3
 800aafe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab02:	4413      	add	r3, r2
 800ab04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab36:	801a      	strh	r2, [r3, #0]
 800ab38:	e017      	b.n	800ab6a <HAL_PCD_EP_DB_Transmit+0x522>
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d113      	bne.n	800ab6a <HAL_PCD_EP_DB_Transmit+0x522>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab50:	4413      	add	r3, r2
 800ab52:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	00da      	lsls	r2, r3, #3
 800ab5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab62:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab66:	2200      	movs	r2, #0
 800ab68:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f006 fed0 	bl	8011916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ab76:	88fb      	ldrh	r3, [r7, #6]
 800ab78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f040 8104 	bne.w	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	461a      	mov	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	441a      	add	r2, r3
 800abae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800abb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	8013      	strh	r3, [r2, #0]
 800abc6:	e0e0      	b.n	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800abc8:	88fb      	ldrh	r3, [r7, #6]
 800abca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d121      	bne.n	800ac16 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	441a      	add	r2, r3
 800abfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ac02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	f040 80b4 	bne.w	800ad8a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	695a      	ldr	r2, [r3, #20]
 800ac26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac2a:	441a      	add	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	69da      	ldr	r2, [r3, #28]
 800ac34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac38:	441a      	add	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6a1a      	ldr	r2, [r3, #32]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d309      	bcc.n	800ac5e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	6a1a      	ldr	r2, [r3, #32]
 800ac54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac56:	1ad2      	subs	r2, r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	621a      	str	r2, [r3, #32]
 800ac5c:	e015      	b.n	800ac8a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d107      	bne.n	800ac76 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 800ac66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ac74:	e009      	b.n	800ac8a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	667b      	str	r3, [r7, #100]	; 0x64
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d155      	bne.n	800ad44 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	461a      	mov	r2, r3
 800acaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acac:	4413      	add	r3, r2
 800acae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	00da      	lsls	r2, r3, #3
 800acb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acb8:	4413      	add	r3, r2
 800acba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800acc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d112      	bne.n	800acec <HAL_PCD_EP_DB_Transmit+0x6a4>
 800acc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	b29b      	uxth	r3, r3
 800accc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd4:	801a      	strh	r2, [r3, #0]
 800acd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ace0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ace8:	801a      	strh	r2, [r3, #0]
 800acea:	e044      	b.n	800ad76 <HAL_PCD_EP_DB_Transmit+0x72e>
 800acec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acee:	2b3e      	cmp	r3, #62	; 0x3e
 800acf0:	d811      	bhi.n	800ad16 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800acf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf4:	085b      	lsrs	r3, r3, #1
 800acf6:	657b      	str	r3, [r7, #84]	; 0x54
 800acf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <HAL_PCD_EP_DB_Transmit+0x6c0>
 800ad02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad04:	3301      	adds	r3, #1
 800ad06:	657b      	str	r3, [r7, #84]	; 0x54
 800ad08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	029b      	lsls	r3, r3, #10
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad12:	801a      	strh	r2, [r3, #0]
 800ad14:	e02f      	b.n	800ad76 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ad16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad18:	095b      	lsrs	r3, r3, #5
 800ad1a:	657b      	str	r3, [r7, #84]	; 0x54
 800ad1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad1e:	f003 031f 	and.w	r3, r3, #31
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <HAL_PCD_EP_DB_Transmit+0x6e4>
 800ad26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	657b      	str	r3, [r7, #84]	; 0x54
 800ad2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	029b      	lsls	r3, r3, #10
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad40:	801a      	strh	r2, [r3, #0]
 800ad42:	e018      	b.n	800ad76 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d114      	bne.n	800ad76 <HAL_PCD_EP_DB_Transmit+0x72e>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	461a      	mov	r2, r3
 800ad58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad5a:	4413      	add	r3, r2
 800ad5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	00da      	lsls	r2, r3, #3
 800ad64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad66:	4413      	add	r3, r2
 800ad68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad6c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	6959      	ldr	r1, [r3, #20]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	895a      	ldrh	r2, [r3, #10]
 800ad82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f004 fe99 	bl	800fabc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ada0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada4:	823b      	strh	r3, [r7, #16]
 800ada6:	8a3b      	ldrh	r3, [r7, #16]
 800ada8:	f083 0310 	eor.w	r3, r3, #16
 800adac:	823b      	strh	r3, [r7, #16]
 800adae:	8a3b      	ldrh	r3, [r7, #16]
 800adb0:	f083 0320 	eor.w	r3, r3, #32
 800adb4:	823b      	strh	r3, [r7, #16]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	441a      	add	r2, r3
 800adc4:	8a3b      	ldrh	r3, [r7, #16]
 800adc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add6:	b29b      	uxth	r3, r3
 800add8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3788      	adds	r7, #136	; 0x88
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	607b      	str	r3, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	817b      	strh	r3, [r7, #10]
 800adf2:	4613      	mov	r3, r2
 800adf4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800adf6:	897b      	ldrh	r3, [r7, #10]
 800adf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae02:	897b      	ldrh	r3, [r7, #10]
 800ae04:	f003 0307 	and.w	r3, r3, #7
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e009      	b.n	800ae2e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ae1a:	897a      	ldrh	r2, [r7, #10]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ae2e:	893b      	ldrh	r3, [r7, #8]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d107      	bne.n	800ae44 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2200      	movs	r2, #0
 800ae38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	80da      	strh	r2, [r3, #6]
 800ae42:	e00b      	b.n	800ae5c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	2201      	movs	r2, #1
 800ae48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0c1b      	lsrs	r3, r3, #16
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	371c      	adds	r7, #28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f043 0301 	orr.w	r3, r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
	...

0800aec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d141      	bne.n	800af52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aece:	4b4b      	ldr	r3, [pc, #300]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeda:	d131      	bne.n	800af40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aedc:	4b47      	ldr	r3, [pc, #284]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aee2:	4a46      	ldr	r2, [pc, #280]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aeec:	4b43      	ldr	r3, [pc, #268]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aef4:	4a41      	ldr	r2, [pc, #260]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aefa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aefc:	4b40      	ldr	r3, [pc, #256]	; (800b000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2232      	movs	r2, #50	; 0x32
 800af02:	fb02 f303 	mul.w	r3, r2, r3
 800af06:	4a3f      	ldr	r2, [pc, #252]	; (800b004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	0c9b      	lsrs	r3, r3, #18
 800af0e:	3301      	adds	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af12:	e002      	b.n	800af1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3b01      	subs	r3, #1
 800af18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af1a:	4b38      	ldr	r3, [pc, #224]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af26:	d102      	bne.n	800af2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f2      	bne.n	800af14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af2e:	4b33      	ldr	r3, [pc, #204]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af3a:	d158      	bne.n	800afee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e057      	b.n	800aff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af40:	4b2e      	ldr	r3, [pc, #184]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af46:	4a2d      	ldr	r2, [pc, #180]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800af50:	e04d      	b.n	800afee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af58:	d141      	bne.n	800afde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af5a:	4b28      	ldr	r3, [pc, #160]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af66:	d131      	bne.n	800afcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af68:	4b24      	ldr	r3, [pc, #144]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6e:	4a23      	ldr	r2, [pc, #140]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800af78:	4b20      	ldr	r3, [pc, #128]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af80:	4a1e      	ldr	r2, [pc, #120]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af88:	4b1d      	ldr	r3, [pc, #116]	; (800b000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2232      	movs	r2, #50	; 0x32
 800af8e:	fb02 f303 	mul.w	r3, r2, r3
 800af92:	4a1c      	ldr	r2, [pc, #112]	; (800b004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af94:	fba2 2303 	umull	r2, r3, r2, r3
 800af98:	0c9b      	lsrs	r3, r3, #18
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af9e:	e002      	b.n	800afa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800afa6:	4b15      	ldr	r3, [pc, #84]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afb2:	d102      	bne.n	800afba <HAL_PWREx_ControlVoltageScaling+0xfa>
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1f2      	bne.n	800afa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afc6:	d112      	bne.n	800afee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e011      	b.n	800aff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd2:	4a0a      	ldr	r2, [pc, #40]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800afdc:	e007      	b.n	800afee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800afde:	4b07      	ldr	r3, [pc, #28]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800afe6:	4a05      	ldr	r2, [pc, #20]	; (800affc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	40007000 	.word	0x40007000
 800b000:	20000018 	.word	0x20000018
 800b004:	431bde83 	.word	0x431bde83

0800b008 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	4a04      	ldr	r2, [pc, #16]	; (800b024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b016:	6093      	str	r3, [r2, #8]
}
 800b018:	bf00      	nop
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	40007000 	.word	0x40007000

0800b028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e308      	b.n	800b64c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d075      	beq.n	800b132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b046:	4ba3      	ldr	r3, [pc, #652]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f003 030c 	and.w	r3, r3, #12
 800b04e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b050:	4ba0      	ldr	r3, [pc, #640]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0303 	and.w	r3, r3, #3
 800b058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b0c      	cmp	r3, #12
 800b05e:	d102      	bne.n	800b066 <HAL_RCC_OscConfig+0x3e>
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b03      	cmp	r3, #3
 800b064:	d002      	beq.n	800b06c <HAL_RCC_OscConfig+0x44>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b08      	cmp	r3, #8
 800b06a:	d10b      	bne.n	800b084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b06c:	4b99      	ldr	r3, [pc, #612]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d05b      	beq.n	800b130 <HAL_RCC_OscConfig+0x108>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d157      	bne.n	800b130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e2e3      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b08c:	d106      	bne.n	800b09c <HAL_RCC_OscConfig+0x74>
 800b08e:	4b91      	ldr	r3, [pc, #580]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a90      	ldr	r2, [pc, #576]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	e01d      	b.n	800b0d8 <HAL_RCC_OscConfig+0xb0>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0a4:	d10c      	bne.n	800b0c0 <HAL_RCC_OscConfig+0x98>
 800b0a6:	4b8b      	ldr	r3, [pc, #556]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a8a      	ldr	r2, [pc, #552]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	4b88      	ldr	r3, [pc, #544]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a87      	ldr	r2, [pc, #540]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	e00b      	b.n	800b0d8 <HAL_RCC_OscConfig+0xb0>
 800b0c0:	4b84      	ldr	r3, [pc, #528]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a83      	ldr	r2, [pc, #524]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	4b81      	ldr	r3, [pc, #516]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a80      	ldr	r2, [pc, #512]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d013      	beq.n	800b108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e0:	f7fc ff9e 	bl	8008020 <HAL_GetTick>
 800b0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0e6:	e008      	b.n	800b0fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0e8:	f7fc ff9a 	bl	8008020 <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b64      	cmp	r3, #100	; 0x64
 800b0f4:	d901      	bls.n	800b0fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e2a8      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0fa:	4b76      	ldr	r3, [pc, #472]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <HAL_RCC_OscConfig+0xc0>
 800b106:	e014      	b.n	800b132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b108:	f7fc ff8a 	bl	8008020 <HAL_GetTick>
 800b10c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b10e:	e008      	b.n	800b122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b110:	f7fc ff86 	bl	8008020 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	2b64      	cmp	r3, #100	; 0x64
 800b11c:	d901      	bls.n	800b122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e294      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b122:	4b6c      	ldr	r3, [pc, #432]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1f0      	bne.n	800b110 <HAL_RCC_OscConfig+0xe8>
 800b12e:	e000      	b.n	800b132 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0302 	and.w	r3, r3, #2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d075      	beq.n	800b22a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b13e:	4b65      	ldr	r3, [pc, #404]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f003 030c 	and.w	r3, r3, #12
 800b146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b148:	4b62      	ldr	r3, [pc, #392]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f003 0303 	and.w	r3, r3, #3
 800b150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2b0c      	cmp	r3, #12
 800b156:	d102      	bne.n	800b15e <HAL_RCC_OscConfig+0x136>
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d002      	beq.n	800b164 <HAL_RCC_OscConfig+0x13c>
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	2b04      	cmp	r3, #4
 800b162:	d11f      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b164:	4b5b      	ldr	r3, [pc, #364]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <HAL_RCC_OscConfig+0x154>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e267      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b17c:	4b55      	ldr	r3, [pc, #340]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	061b      	lsls	r3, r3, #24
 800b18a:	4952      	ldr	r1, [pc, #328]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b18c:	4313      	orrs	r3, r2
 800b18e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b190:	4b51      	ldr	r3, [pc, #324]	; (800b2d8 <HAL_RCC_OscConfig+0x2b0>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc fef7 	bl	8007f88 <HAL_InitTick>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d043      	beq.n	800b228 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e253      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d023      	beq.n	800b1f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1ac:	4b49      	ldr	r3, [pc, #292]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a48      	ldr	r2, [pc, #288]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b8:	f7fc ff32 	bl	8008020 <HAL_GetTick>
 800b1bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1be:	e008      	b.n	800b1d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1c0:	f7fc ff2e 	bl	8008020 <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d901      	bls.n	800b1d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e23c      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b1d2:	4b40      	ldr	r3, [pc, #256]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0f0      	beq.n	800b1c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1de:	4b3d      	ldr	r3, [pc, #244]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	061b      	lsls	r3, r3, #24
 800b1ec:	4939      	ldr	r1, [pc, #228]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	604b      	str	r3, [r1, #4]
 800b1f2:	e01a      	b.n	800b22a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1f4:	4b37      	ldr	r3, [pc, #220]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a36      	ldr	r2, [pc, #216]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b1fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b200:	f7fc ff0e 	bl	8008020 <HAL_GetTick>
 800b204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b206:	e008      	b.n	800b21a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b208:	f7fc ff0a 	bl	8008020 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b02      	cmp	r3, #2
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e218      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b21a:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1f0      	bne.n	800b208 <HAL_RCC_OscConfig+0x1e0>
 800b226:	e000      	b.n	800b22a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d03c      	beq.n	800b2b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01c      	beq.n	800b278 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b23e:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b244:	4a23      	ldr	r2, [pc, #140]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b24e:	f7fc fee7 	bl	8008020 <HAL_GetTick>
 800b252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b254:	e008      	b.n	800b268 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b256:	f7fc fee3 	bl	8008020 <HAL_GetTick>
 800b25a:	4602      	mov	r2, r0
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	1ad3      	subs	r3, r2, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d901      	bls.n	800b268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e1f1      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b26a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0ef      	beq.n	800b256 <HAL_RCC_OscConfig+0x22e>
 800b276:	e01b      	b.n	800b2b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b278:	4b16      	ldr	r3, [pc, #88]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b27a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b27e:	4a15      	ldr	r2, [pc, #84]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b288:	f7fc feca 	bl	8008020 <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b290:	f7fc fec6 	bl	8008020 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e1d4      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b2a2:	4b0c      	ldr	r3, [pc, #48]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b2a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1ef      	bne.n	800b290 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 80ab 	beq.w	800b414 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b2c2:	4b04      	ldr	r3, [pc, #16]	; (800b2d4 <HAL_RCC_OscConfig+0x2ac>)
 800b2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <HAL_RCC_OscConfig+0x2b4>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e005      	b.n	800b2de <HAL_RCC_OscConfig+0x2b6>
 800b2d2:	bf00      	nop
 800b2d4:	40021000 	.word	0x40021000
 800b2d8:	2000001c 	.word	0x2000001c
 800b2dc:	2300      	movs	r3, #0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00d      	beq.n	800b2fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2e2:	4baf      	ldr	r3, [pc, #700]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2e6:	4aae      	ldr	r2, [pc, #696]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b2e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b2ee:	4bac      	ldr	r3, [pc, #688]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2fe:	4ba9      	ldr	r3, [pc, #676]	; (800b5a4 <HAL_RCC_OscConfig+0x57c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d118      	bne.n	800b33c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b30a:	4ba6      	ldr	r3, [pc, #664]	; (800b5a4 <HAL_RCC_OscConfig+0x57c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4aa5      	ldr	r2, [pc, #660]	; (800b5a4 <HAL_RCC_OscConfig+0x57c>)
 800b310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b316:	f7fc fe83 	bl	8008020 <HAL_GetTick>
 800b31a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b31c:	e008      	b.n	800b330 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b31e:	f7fc fe7f 	bl	8008020 <HAL_GetTick>
 800b322:	4602      	mov	r2, r0
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d901      	bls.n	800b330 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e18d      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b330:	4b9c      	ldr	r3, [pc, #624]	; (800b5a4 <HAL_RCC_OscConfig+0x57c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0f0      	beq.n	800b31e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d108      	bne.n	800b356 <HAL_RCC_OscConfig+0x32e>
 800b344:	4b96      	ldr	r3, [pc, #600]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34a:	4a95      	ldr	r2, [pc, #596]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b34c:	f043 0301 	orr.w	r3, r3, #1
 800b350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b354:	e024      	b.n	800b3a0 <HAL_RCC_OscConfig+0x378>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d110      	bne.n	800b380 <HAL_RCC_OscConfig+0x358>
 800b35e:	4b90      	ldr	r3, [pc, #576]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b364:	4a8e      	ldr	r2, [pc, #568]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b366:	f043 0304 	orr.w	r3, r3, #4
 800b36a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b36e:	4b8c      	ldr	r3, [pc, #560]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b374:	4a8a      	ldr	r2, [pc, #552]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b376:	f043 0301 	orr.w	r3, r3, #1
 800b37a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b37e:	e00f      	b.n	800b3a0 <HAL_RCC_OscConfig+0x378>
 800b380:	4b87      	ldr	r3, [pc, #540]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b386:	4a86      	ldr	r2, [pc, #536]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b388:	f023 0301 	bic.w	r3, r3, #1
 800b38c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b390:	4b83      	ldr	r3, [pc, #524]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b396:	4a82      	ldr	r2, [pc, #520]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b398:	f023 0304 	bic.w	r3, r3, #4
 800b39c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d016      	beq.n	800b3d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3a8:	f7fc fe3a 	bl	8008020 <HAL_GetTick>
 800b3ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3ae:	e00a      	b.n	800b3c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3b0:	f7fc fe36 	bl	8008020 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e142      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3c6:	4b76      	ldr	r3, [pc, #472]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3cc:	f003 0302 	and.w	r3, r3, #2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0ed      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x388>
 800b3d4:	e015      	b.n	800b402 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3d6:	f7fc fe23 	bl	8008020 <HAL_GetTick>
 800b3da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b3dc:	e00a      	b.n	800b3f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3de:	f7fc fe1f 	bl	8008020 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d901      	bls.n	800b3f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e12b      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b3f4:	4b6a      	ldr	r3, [pc, #424]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1ed      	bne.n	800b3de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b402:	7ffb      	ldrb	r3, [r7, #31]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d105      	bne.n	800b414 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b408:	4b65      	ldr	r3, [pc, #404]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40c:	4a64      	ldr	r2, [pc, #400]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b40e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b412:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0320 	and.w	r3, r3, #32
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d03c      	beq.n	800b49a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	699b      	ldr	r3, [r3, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d01c      	beq.n	800b462 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b428:	4b5d      	ldr	r3, [pc, #372]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b42a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b42e:	4a5c      	ldr	r2, [pc, #368]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b430:	f043 0301 	orr.w	r3, r3, #1
 800b434:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b438:	f7fc fdf2 	bl	8008020 <HAL_GetTick>
 800b43c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b43e:	e008      	b.n	800b452 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b440:	f7fc fdee 	bl	8008020 <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d901      	bls.n	800b452 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e0fc      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b452:	4b53      	ldr	r3, [pc, #332]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0ef      	beq.n	800b440 <HAL_RCC_OscConfig+0x418>
 800b460:	e01b      	b.n	800b49a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b462:	4b4f      	ldr	r3, [pc, #316]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b468:	4a4d      	ldr	r2, [pc, #308]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b46a:	f023 0301 	bic.w	r3, r3, #1
 800b46e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b472:	f7fc fdd5 	bl	8008020 <HAL_GetTick>
 800b476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b478:	e008      	b.n	800b48c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b47a:	f7fc fdd1 	bl	8008020 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	2b02      	cmp	r3, #2
 800b486:	d901      	bls.n	800b48c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e0df      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b48c:	4b44      	ldr	r3, [pc, #272]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b48e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1ef      	bne.n	800b47a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 80d3 	beq.w	800b64a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b4a4:	4b3e      	ldr	r3, [pc, #248]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f003 030c 	and.w	r3, r3, #12
 800b4ac:	2b0c      	cmp	r3, #12
 800b4ae:	f000 808d 	beq.w	800b5cc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d15a      	bne.n	800b570 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ba:	4b39      	ldr	r3, [pc, #228]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a38      	ldr	r2, [pc, #224]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b4c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c6:	f7fc fdab 	bl	8008020 <HAL_GetTick>
 800b4ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4cc:	e008      	b.n	800b4e0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ce:	f7fc fda7 	bl	8008020 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d901      	bls.n	800b4e0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e0b5      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b4e0:	4b2f      	ldr	r3, [pc, #188]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1f0      	bne.n	800b4ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4ec:	4b2c      	ldr	r3, [pc, #176]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b4ee:	68da      	ldr	r2, [r3, #12]
 800b4f0:	4b2d      	ldr	r3, [pc, #180]	; (800b5a8 <HAL_RCC_OscConfig+0x580>)
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6a11      	ldr	r1, [r2, #32]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4fc:	3a01      	subs	r2, #1
 800b4fe:	0112      	lsls	r2, r2, #4
 800b500:	4311      	orrs	r1, r2
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b506:	0212      	lsls	r2, r2, #8
 800b508:	4311      	orrs	r1, r2
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b50e:	0852      	lsrs	r2, r2, #1
 800b510:	3a01      	subs	r2, #1
 800b512:	0552      	lsls	r2, r2, #21
 800b514:	4311      	orrs	r1, r2
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b51a:	0852      	lsrs	r2, r2, #1
 800b51c:	3a01      	subs	r2, #1
 800b51e:	0652      	lsls	r2, r2, #25
 800b520:	4311      	orrs	r1, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b526:	06d2      	lsls	r2, r2, #27
 800b528:	430a      	orrs	r2, r1
 800b52a:	491d      	ldr	r1, [pc, #116]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b530:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a1a      	ldr	r2, [pc, #104]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b53a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b53c:	4b18      	ldr	r3, [pc, #96]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b546:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b548:	f7fc fd6a 	bl	8008020 <HAL_GetTick>
 800b54c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b54e:	e008      	b.n	800b562 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b550:	f7fc fd66 	bl	8008020 <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d901      	bls.n	800b562 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e074      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b562:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0f0      	beq.n	800b550 <HAL_RCC_OscConfig+0x528>
 800b56e:	e06c      	b.n	800b64a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b570:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a0a      	ldr	r2, [pc, #40]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b57a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b57c:	4b08      	ldr	r3, [pc, #32]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	4a07      	ldr	r2, [pc, #28]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b582:	f023 0303 	bic.w	r3, r3, #3
 800b586:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_RCC_OscConfig+0x578>)
 800b58e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b596:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b598:	f7fc fd42 	bl	8008020 <HAL_GetTick>
 800b59c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b59e:	e00e      	b.n	800b5be <HAL_RCC_OscConfig+0x596>
 800b5a0:	40021000 	.word	0x40021000
 800b5a4:	40007000 	.word	0x40007000
 800b5a8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5ac:	f7fc fd38 	bl	8008020 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d901      	bls.n	800b5be <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e046      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b5be:	4b25      	ldr	r3, [pc, #148]	; (800b654 <HAL_RCC_OscConfig+0x62c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1f0      	bne.n	800b5ac <HAL_RCC_OscConfig+0x584>
 800b5ca:	e03e      	b.n	800b64a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e039      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b5d8:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <HAL_RCC_OscConfig+0x62c>)
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f003 0203 	and.w	r2, r3, #3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d12c      	bne.n	800b646 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d123      	bne.n	800b646 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b608:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d11b      	bne.n	800b646 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b618:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d113      	bne.n	800b646 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b628:	085b      	lsrs	r3, r3, #1
 800b62a:	3b01      	subs	r3, #1
 800b62c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b62e:	429a      	cmp	r2, r3
 800b630:	d109      	bne.n	800b646 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b63c:	085b      	lsrs	r3, r3, #1
 800b63e:	3b01      	subs	r3, #1
 800b640:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b642:	429a      	cmp	r2, r3
 800b644:	d001      	beq.n	800b64a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e000      	b.n	800b64c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3720      	adds	r7, #32
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	40021000 	.word	0x40021000

0800b658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e11e      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b670:	4b91      	ldr	r3, [pc, #580]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d910      	bls.n	800b6a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b67e:	4b8e      	ldr	r3, [pc, #568]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f023 020f 	bic.w	r2, r3, #15
 800b686:	498c      	ldr	r1, [pc, #560]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b68e:	4b8a      	ldr	r3, [pc, #552]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 030f 	and.w	r3, r3, #15
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d001      	beq.n	800b6a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e106      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d073      	beq.n	800b794 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d129      	bne.n	800b708 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6b4:	4b81      	ldr	r3, [pc, #516]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e0f4      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b6c4:	f000 f966 	bl	800b994 <RCC_GetSysClockFreqFromPLLSource>
 800b6c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	4a7c      	ldr	r2, [pc, #496]	; (800b8c0 <HAL_RCC_ClockConfig+0x268>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d93f      	bls.n	800b752 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b6d2:	4b7a      	ldr	r3, [pc, #488]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d009      	beq.n	800b6f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d033      	beq.n	800b752 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d12f      	bne.n	800b752 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6f2:	4b72      	ldr	r3, [pc, #456]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6fa:	4a70      	ldr	r2, [pc, #448]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b700:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b702:	2380      	movs	r3, #128	; 0x80
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	e024      	b.n	800b752 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d107      	bne.n	800b720 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b710:	4b6a      	ldr	r3, [pc, #424]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d109      	bne.n	800b730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e0c6      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b720:	4b66      	ldr	r3, [pc, #408]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e0be      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b730:	f000 f8ce 	bl	800b8d0 <HAL_RCC_GetSysClockFreq>
 800b734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	4a61      	ldr	r2, [pc, #388]	; (800b8c0 <HAL_RCC_ClockConfig+0x268>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d909      	bls.n	800b752 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b73e:	4b5f      	ldr	r3, [pc, #380]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b746:	4a5d      	ldr	r2, [pc, #372]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b74e:	2380      	movs	r3, #128	; 0x80
 800b750:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b752:	4b5a      	ldr	r3, [pc, #360]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f023 0203 	bic.w	r2, r3, #3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	4957      	ldr	r1, [pc, #348]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b760:	4313      	orrs	r3, r2
 800b762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b764:	f7fc fc5c 	bl	8008020 <HAL_GetTick>
 800b768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b76a:	e00a      	b.n	800b782 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b76c:	f7fc fc58 	bl	8008020 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d901      	bls.n	800b782 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e095      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b782:	4b4e      	ldr	r3, [pc, #312]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 020c 	and.w	r2, r3, #12
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	429a      	cmp	r2, r3
 800b792:	d1eb      	bne.n	800b76c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0302 	and.w	r3, r3, #2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d023      	beq.n	800b7e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0304 	and.w	r3, r3, #4
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7ac:	4b43      	ldr	r3, [pc, #268]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	4a42      	ldr	r2, [pc, #264]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b7b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0308 	and.w	r3, r3, #8
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d007      	beq.n	800b7d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b7c4:	4b3d      	ldr	r3, [pc, #244]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b7cc:	4a3b      	ldr	r2, [pc, #236]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b7d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7d4:	4b39      	ldr	r3, [pc, #228]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	4936      	ldr	r1, [pc, #216]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	608b      	str	r3, [r1, #8]
 800b7e6:	e008      	b.n	800b7fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	2b80      	cmp	r3, #128	; 0x80
 800b7ec:	d105      	bne.n	800b7fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b7ee:	4b33      	ldr	r3, [pc, #204]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	4a32      	ldr	r2, [pc, #200]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b7f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b7fa:	4b2f      	ldr	r3, [pc, #188]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 030f 	and.w	r3, r3, #15
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d21d      	bcs.n	800b844 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b808:	4b2b      	ldr	r3, [pc, #172]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f023 020f 	bic.w	r2, r3, #15
 800b810:	4929      	ldr	r1, [pc, #164]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	4313      	orrs	r3, r2
 800b816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b818:	f7fc fc02 	bl	8008020 <HAL_GetTick>
 800b81c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b81e:	e00a      	b.n	800b836 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b820:	f7fc fbfe 	bl	8008020 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82e:	4293      	cmp	r3, r2
 800b830:	d901      	bls.n	800b836 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b832:	2303      	movs	r3, #3
 800b834:	e03b      	b.n	800b8ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <HAL_RCC_ClockConfig+0x260>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 030f 	and.w	r3, r3, #15
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d1ed      	bne.n	800b820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0304 	and.w	r3, r3, #4
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d008      	beq.n	800b862 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b850:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	4917      	ldr	r1, [pc, #92]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0308 	and.w	r3, r3, #8
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d009      	beq.n	800b882 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	490f      	ldr	r1, [pc, #60]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b882:	f000 f825 	bl	800b8d0 <HAL_RCC_GetSysClockFreq>
 800b886:	4602      	mov	r2, r0
 800b888:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <HAL_RCC_ClockConfig+0x264>)
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	091b      	lsrs	r3, r3, #4
 800b88e:	f003 030f 	and.w	r3, r3, #15
 800b892:	490c      	ldr	r1, [pc, #48]	; (800b8c4 <HAL_RCC_ClockConfig+0x26c>)
 800b894:	5ccb      	ldrb	r3, [r1, r3]
 800b896:	f003 031f 	and.w	r3, r3, #31
 800b89a:	fa22 f303 	lsr.w	r3, r2, r3
 800b89e:	4a0a      	ldr	r2, [pc, #40]	; (800b8c8 <HAL_RCC_ClockConfig+0x270>)
 800b8a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b8a2:	4b0a      	ldr	r3, [pc, #40]	; (800b8cc <HAL_RCC_ClockConfig+0x274>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fc fb6e 	bl	8007f88 <HAL_InitTick>
 800b8ac:	4603      	mov	r3, r0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	40022000 	.word	0x40022000
 800b8bc:	40021000 	.word	0x40021000
 800b8c0:	04c4b400 	.word	0x04c4b400
 800b8c4:	08016cd8 	.word	0x08016cd8
 800b8c8:	20000018 	.word	0x20000018
 800b8cc:	2000001c 	.word	0x2000001c

0800b8d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b8d6:	4b2c      	ldr	r3, [pc, #176]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 030c 	and.w	r3, r3, #12
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d102      	bne.n	800b8e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b8e2:	4b2a      	ldr	r3, [pc, #168]	; (800b98c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b8e4:	613b      	str	r3, [r7, #16]
 800b8e6:	e047      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b8e8:	4b27      	ldr	r3, [pc, #156]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 030c 	and.w	r3, r3, #12
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d102      	bne.n	800b8fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b8f4:	4b26      	ldr	r3, [pc, #152]	; (800b990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	e03e      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b8fa:	4b23      	ldr	r3, [pc, #140]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f003 030c 	and.w	r3, r3, #12
 800b902:	2b0c      	cmp	r3, #12
 800b904:	d136      	bne.n	800b974 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b906:	4b20      	ldr	r3, [pc, #128]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b910:	4b1d      	ldr	r3, [pc, #116]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	091b      	lsrs	r3, r3, #4
 800b916:	f003 030f 	and.w	r3, r3, #15
 800b91a:	3301      	adds	r3, #1
 800b91c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b03      	cmp	r3, #3
 800b922:	d10c      	bne.n	800b93e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b924:	4a1a      	ldr	r2, [pc, #104]	; (800b990 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92c:	4a16      	ldr	r2, [pc, #88]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b92e:	68d2      	ldr	r2, [r2, #12]
 800b930:	0a12      	lsrs	r2, r2, #8
 800b932:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	617b      	str	r3, [r7, #20]
      break;
 800b93c:	e00c      	b.n	800b958 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b93e:	4a13      	ldr	r2, [pc, #76]	; (800b98c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	fbb2 f3f3 	udiv	r3, r2, r3
 800b946:	4a10      	ldr	r2, [pc, #64]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b948:	68d2      	ldr	r2, [r2, #12]
 800b94a:	0a12      	lsrs	r2, r2, #8
 800b94c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b950:	fb02 f303 	mul.w	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
      break;
 800b956:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b958:	4b0b      	ldr	r3, [pc, #44]	; (800b988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	0e5b      	lsrs	r3, r3, #25
 800b95e:	f003 0303 	and.w	r3, r3, #3
 800b962:	3301      	adds	r3, #1
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	e001      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b978:	693b      	ldr	r3, [r7, #16]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	371c      	adds	r7, #28
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	40021000 	.word	0x40021000
 800b98c:	00f42400 	.word	0x00f42400
 800b990:	007a1200 	.word	0x007a1200

0800b994 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b99a:	4b1e      	ldr	r3, [pc, #120]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b9a4:	4b1b      	ldr	r3, [pc, #108]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	091b      	lsrs	r3, r3, #4
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d10c      	bne.n	800b9d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9b8:	4a17      	ldr	r2, [pc, #92]	; (800ba18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c0:	4a14      	ldr	r2, [pc, #80]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9c2:	68d2      	ldr	r2, [r2, #12]
 800b9c4:	0a12      	lsrs	r2, r2, #8
 800b9c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9ca:	fb02 f303 	mul.w	r3, r2, r3
 800b9ce:	617b      	str	r3, [r7, #20]
    break;
 800b9d0:	e00c      	b.n	800b9ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9d2:	4a12      	ldr	r2, [pc, #72]	; (800ba1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9da:	4a0e      	ldr	r2, [pc, #56]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9dc:	68d2      	ldr	r2, [r2, #12]
 800b9de:	0a12      	lsrs	r2, r2, #8
 800b9e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9e4:	fb02 f303 	mul.w	r3, r2, r3
 800b9e8:	617b      	str	r3, [r7, #20]
    break;
 800b9ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9ec:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	0e5b      	lsrs	r3, r3, #25
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ba06:	687b      	ldr	r3, [r7, #4]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	371c      	adds	r7, #28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	40021000 	.word	0x40021000
 800ba18:	007a1200 	.word	0x007a1200
 800ba1c:	00f42400 	.word	0x00f42400

0800ba20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ba28:	2300      	movs	r3, #0
 800ba2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 8098 	beq.w	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba42:	4b43      	ldr	r3, [pc, #268]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10d      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba4e:	4b40      	ldr	r3, [pc, #256]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba52:	4a3f      	ldr	r2, [pc, #252]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba58:	6593      	str	r3, [r2, #88]	; 0x58
 800ba5a:	4b3d      	ldr	r3, [pc, #244]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba62:	60bb      	str	r3, [r7, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba66:	2301      	movs	r3, #1
 800ba68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba6a:	4b3a      	ldr	r3, [pc, #232]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a39      	ldr	r2, [pc, #228]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba76:	f7fc fad3 	bl	8008020 <HAL_GetTick>
 800ba7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba7c:	e009      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba7e:	f7fc facf 	bl	8008020 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d902      	bls.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	74fb      	strb	r3, [r7, #19]
        break;
 800ba90:	e005      	b.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba92:	4b30      	ldr	r3, [pc, #192]	; (800bb54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d0ef      	beq.n	800ba7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ba9e:	7cfb      	ldrb	r3, [r7, #19]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d159      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800baa4:	4b2a      	ldr	r3, [pc, #168]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01e      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	429a      	cmp	r2, r3
 800babe:	d019      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bac0:	4b23      	ldr	r3, [pc, #140]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bacc:	4b20      	ldr	r3, [pc, #128]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad2:	4a1f      	ldr	r2, [pc, #124]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800badc:	4b1c      	ldr	r3, [pc, #112]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bae2:	4a1b      	ldr	r2, [pc, #108]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800baec:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d016      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bafe:	f7fc fa8f 	bl	8008020 <HAL_GetTick>
 800bb02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb04:	e00b      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb06:	f7fc fa8b 	bl	8008020 <HAL_GetTick>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d902      	bls.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	74fb      	strb	r3, [r7, #19]
            break;
 800bb1c:	e006      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0ec      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bb2c:	7cfb      	ldrb	r3, [r7, #19]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10b      	bne.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb32:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb40:	4903      	ldr	r1, [pc, #12]	; (800bb50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb48:	e008      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb4a:	7cfb      	ldrb	r3, [r7, #19]
 800bb4c:	74bb      	strb	r3, [r7, #18]
 800bb4e:	e005      	b.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bb50:	40021000 	.word	0x40021000
 800bb54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	7cfb      	ldrb	r3, [r7, #19]
 800bb5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb5c:	7c7b      	ldrb	r3, [r7, #17]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d105      	bne.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb62:	4baf      	ldr	r3, [pc, #700]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb66:	4aae      	ldr	r2, [pc, #696]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb7a:	4ba9      	ldr	r3, [pc, #676]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb80:	f023 0203 	bic.w	r2, r3, #3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	49a5      	ldr	r1, [pc, #660]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb9c:	4ba0      	ldr	r3, [pc, #640]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba2:	f023 020c 	bic.w	r2, r3, #12
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	499d      	ldr	r1, [pc, #628]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbac:	4313      	orrs	r3, r2
 800bbae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0304 	and.w	r3, r3, #4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00a      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bbbe:	4b98      	ldr	r3, [pc, #608]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	4994      	ldr	r1, [pc, #592]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0308 	and.w	r3, r3, #8
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00a      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbe0:	4b8f      	ldr	r3, [pc, #572]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	498c      	ldr	r1, [pc, #560]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0310 	and.w	r3, r3, #16
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bc02:	4b87      	ldr	r3, [pc, #540]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	4983      	ldr	r1, [pc, #524]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc12:	4313      	orrs	r3, r2
 800bc14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 0320 	and.w	r3, r3, #32
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00a      	beq.n	800bc3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc24:	4b7e      	ldr	r3, [pc, #504]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	497b      	ldr	r1, [pc, #492]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00a      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc46:	4b76      	ldr	r3, [pc, #472]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	4972      	ldr	r1, [pc, #456]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00a      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc68:	4b6d      	ldr	r3, [pc, #436]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	496a      	ldr	r1, [pc, #424]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00a      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc8a:	4b65      	ldr	r3, [pc, #404]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	4961      	ldr	r1, [pc, #388]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00a      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcac:	4b5c      	ldr	r3, [pc, #368]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcb2:	f023 0203 	bic.w	r2, r3, #3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcba:	4959      	ldr	r1, [pc, #356]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcce:	4b54      	ldr	r3, [pc, #336]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	4950      	ldr	r1, [pc, #320]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcde:	4313      	orrs	r3, r2
 800bce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d015      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcf0:	4b4b      	ldr	r3, [pc, #300]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	4948      	ldr	r1, [pc, #288]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd00:	4313      	orrs	r3, r2
 800bd02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd0e:	d105      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd10:	4b43      	ldr	r3, [pc, #268]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	4a42      	ldr	r2, [pc, #264]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d015      	beq.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd28:	4b3d      	ldr	r3, [pc, #244]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	493a      	ldr	r1, [pc, #232]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd46:	d105      	bne.n	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd48:	4b35      	ldr	r3, [pc, #212]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	4a34      	ldr	r2, [pc, #208]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d015      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd60:	4b2f      	ldr	r3, [pc, #188]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6e:	492c      	ldr	r1, [pc, #176]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd7e:	d105      	bne.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd80:	4b27      	ldr	r3, [pc, #156]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	4a26      	ldr	r2, [pc, #152]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d015      	beq.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd98:	4b21      	ldr	r3, [pc, #132]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda6:	491e      	ldr	r1, [pc, #120]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdb6:	d105      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdb8:	4b19      	ldr	r3, [pc, #100]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	4a18      	ldr	r2, [pc, #96]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d015      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdd0:	4b13      	ldr	r3, [pc, #76]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	4910      	ldr	r1, [pc, #64]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdee:	d105      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	4a0a      	ldr	r2, [pc, #40]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d018      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800be08:	4b05      	ldr	r3, [pc, #20]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	4902      	ldr	r1, [pc, #8]	; (800be20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be18:	4313      	orrs	r3, r2
 800be1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800be1e:	e001      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800be20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be2c:	d105      	bne.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be2e:	4b21      	ldr	r3, [pc, #132]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	4a20      	ldr	r2, [pc, #128]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d015      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800be46:	4b1b      	ldr	r3, [pc, #108]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be54:	4917      	ldr	r1, [pc, #92]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be56:	4313      	orrs	r3, r2
 800be58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be64:	d105      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be66:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	4a12      	ldr	r2, [pc, #72]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d015      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be8c:	4909      	ldr	r1, [pc, #36]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be9c:	d105      	bne.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800beaa:	7cbb      	ldrb	r3, [r7, #18]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	40021000 	.word	0x40021000

0800beb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e09d      	b.n	800c006 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d108      	bne.n	800bee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800beda:	d009      	beq.n	800bef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	61da      	str	r2, [r3, #28]
 800bee2:	e005      	b.n	800bef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d106      	bne.n	800bf10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7fb fd02 	bl	8007914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2202      	movs	r2, #2
 800bf14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf30:	d902      	bls.n	800bf38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
 800bf36:	e002      	b.n	800bf3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bf46:	d007      	beq.n	800bf58 <HAL_SPI_Init+0xa0>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf50:	d002      	beq.n	800bf58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bf68:	431a      	orrs	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf86:	431a      	orrs	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf90:	431a      	orrs	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9a:	ea42 0103 	orr.w	r1, r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	430a      	orrs	r2, r1
 800bfac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	0c1b      	lsrs	r3, r3, #16
 800bfb4:	f003 0204 	and.w	r2, r3, #4
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	f003 0310 	and.w	r3, r3, #16
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfc6:	f003 0308 	and.w	r3, r3, #8
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bfd4:	ea42 0103 	orr.w	r1, r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	69da      	ldr	r2, [r3, #28]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	4613      	mov	r3, r2
 800c01c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d101      	bne.n	800c030 <HAL_SPI_Transmit_DMA+0x20>
 800c02c:	2302      	movs	r3, #2
 800c02e:	e0d8      	b.n	800c1e2 <HAL_SPI_Transmit_DMA+0x1d2>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b01      	cmp	r3, #1
 800c042:	d002      	beq.n	800c04a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c044:	2302      	movs	r3, #2
 800c046:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c048:	e0c6      	b.n	800c1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <HAL_SPI_Transmit_DMA+0x46>
 800c050:	88fb      	ldrh	r3, [r7, #6]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d102      	bne.n	800c05c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c05a:	e0bd      	b.n	800c1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2203      	movs	r2, #3
 800c060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	88fa      	ldrh	r2, [r7, #6]
 800c074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	88fa      	ldrh	r2, [r7, #6]
 800c07a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2200      	movs	r2, #0
 800c086:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0a6:	d10f      	bne.n	800c0c8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0cc:	4a47      	ldr	r2, [pc, #284]	; (800c1ec <HAL_SPI_Transmit_DMA+0x1dc>)
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d4:	4a46      	ldr	r2, [pc, #280]	; (800c1f0 <HAL_SPI_Transmit_DMA+0x1e0>)
 800c0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0dc:	4a45      	ldr	r2, [pc, #276]	; (800c1f4 <HAL_SPI_Transmit_DMA+0x1e4>)
 800c0de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c0f6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c100:	d82d      	bhi.n	800c15e <HAL_SPI_Transmit_DMA+0x14e>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c10c:	d127      	bne.n	800c15e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c112:	b29b      	uxth	r3, r3
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10f      	bne.n	800c13c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c12a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c130:	b29b      	uxth	r3, r3
 800c132:	085b      	lsrs	r3, r3, #1
 800c134:	b29a      	uxth	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c13a:	e010      	b.n	800c15e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c14a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c150:	b29b      	uxth	r3, r3
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	b29b      	uxth	r3, r3
 800c156:	3301      	adds	r3, #1
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c166:	4619      	mov	r1, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	330c      	adds	r3, #12
 800c16e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c174:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c176:	f7fc f939 	bl	80083ec <HAL_DMA_Start_IT>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00c      	beq.n	800c19a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c184:	f043 0210 	orr.w	r2, r3, #16
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c198:	e01e      	b.n	800c1d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a4:	2b40      	cmp	r3, #64	; 0x40
 800c1a6:	d007      	beq.n	800c1b8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0220 	orr.w	r2, r2, #32
 800c1c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0202 	orr.w	r2, r2, #2
 800c1d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800c9c3 	.word	0x0800c9c3
 800c1f0:	0800c7e5 	.word	0x0800c7e5
 800c1f4:	0800ca17 	.word	0x0800ca17

0800c1f8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	4613      	mov	r3, r2
 800c204:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d110      	bne.n	800c234 <HAL_SPI_Receive_DMA+0x3c>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c21a:	d10b      	bne.n	800c234 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2204      	movs	r2, #4
 800c220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c224:	88fb      	ldrh	r3, [r7, #6]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f908 	bl	800c440 <HAL_SPI_TransmitReceive_DMA>
 800c230:	4603      	mov	r3, r0
 800c232:	e0fb      	b.n	800c42c <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d101      	bne.n	800c242 <HAL_SPI_Receive_DMA+0x4a>
 800c23e:	2302      	movs	r3, #2
 800c240:	e0f4      	b.n	800c42c <HAL_SPI_Receive_DMA+0x234>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b01      	cmp	r3, #1
 800c254:	d002      	beq.n	800c25c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800c256:	2302      	movs	r3, #2
 800c258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c25a:	e0e2      	b.n	800c422 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <HAL_SPI_Receive_DMA+0x70>
 800c262:	88fb      	ldrh	r3, [r7, #6]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c26c:	e0d9      	b.n	800c422 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2204      	movs	r2, #4
 800c272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2200      	movs	r2, #0
 800c27a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	88fa      	ldrh	r2, [r7, #6]
 800c286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	88fa      	ldrh	r2, [r7, #6]
 800c28e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b2:	d10f      	bne.n	800c2d4 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c2d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2e2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c2ec:	d908      	bls.n	800c300 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	e042      	b.n	800c386 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c30e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c31a:	d134      	bne.n	800c386 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c32a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c332:	b29b      	uxth	r3, r3
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d111      	bne.n	800c360 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c34a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c352:	b29b      	uxth	r3, r3
 800c354:	085b      	lsrs	r3, r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c35e:	e012      	b.n	800c386 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c36e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c376:	b29b      	uxth	r3, r3
 800c378:	085b      	lsrs	r3, r3, #1
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	3301      	adds	r3, #1
 800c37e:	b29a      	uxth	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38a:	4a2a      	ldr	r2, [pc, #168]	; (800c434 <HAL_SPI_Receive_DMA+0x23c>)
 800c38c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	4a29      	ldr	r2, [pc, #164]	; (800c438 <HAL_SPI_Receive_DMA+0x240>)
 800c394:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39a:	4a28      	ldr	r2, [pc, #160]	; (800c43c <HAL_SPI_Receive_DMA+0x244>)
 800c39c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	330c      	adds	r3, #12
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c3be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c3c0:	f7fc f814 	bl	80083ec <HAL_DMA_Start_IT>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00c      	beq.n	800c3e4 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ce:	f043 0210 	orr.w	r2, r3, #16
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c3e2:	e01e      	b.n	800c422 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d007      	beq.n	800c402 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c400:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0220 	orr.w	r2, r2, #32
 800c410:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f042 0201 	orr.w	r2, r2, #1
 800c420:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3718      	adds	r7, #24
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	0800c9df 	.word	0x0800c9df
 800c438:	0800c88b 	.word	0x0800c88b
 800c43c:	0800ca17 	.word	0x0800ca17

0800c440 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d101      	bne.n	800c460 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e16c      	b.n	800c73a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c46e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c476:	7dbb      	ldrb	r3, [r7, #22]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d00d      	beq.n	800c498 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c482:	d106      	bne.n	800c492 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d102      	bne.n	800c492 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c48c:	7dbb      	ldrb	r3, [r7, #22]
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d002      	beq.n	800c498 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c492:	2302      	movs	r3, #2
 800c494:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c496:	e14b      	b.n	800c730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d005      	beq.n	800c4aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c4a4:	887b      	ldrh	r3, [r7, #2]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d102      	bne.n	800c4b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c4ae:	e13f      	b.n	800c730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d003      	beq.n	800c4c4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2205      	movs	r2, #5
 800c4c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	887a      	ldrh	r2, [r7, #2]
 800c4d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	887a      	ldrh	r2, [r7, #2]
 800c4da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	887a      	ldrh	r2, [r7, #2]
 800c4e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	887a      	ldrh	r2, [r7, #2]
 800c4ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c50c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c516:	d908      	bls.n	800c52a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c526:	605a      	str	r2, [r3, #4]
 800c528:	e06f      	b.n	800c60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c538:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c544:	d126      	bne.n	800c594 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10f      	bne.n	800c572 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	685a      	ldr	r2, [r3, #4]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c560:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c566:	b29b      	uxth	r3, r3
 800c568:	085b      	lsrs	r3, r3, #1
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c570:	e010      	b.n	800c594 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c580:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c586:	b29b      	uxth	r3, r3
 800c588:	085b      	lsrs	r3, r3, #1
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	3301      	adds	r3, #1
 800c58e:	b29a      	uxth	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c59e:	d134      	bne.n	800c60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5ae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d111      	bne.n	800c5e4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	085b      	lsrs	r3, r3, #1
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c5e2:	e012      	b.n	800c60a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	085b      	lsrs	r3, r3, #1
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	3301      	adds	r3, #1
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b04      	cmp	r3, #4
 800c614:	d108      	bne.n	800c628 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61a:	4a4a      	ldr	r2, [pc, #296]	; (800c744 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c61c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c622:	4a49      	ldr	r2, [pc, #292]	; (800c748 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800c624:	62da      	str	r2, [r3, #44]	; 0x2c
 800c626:	e007      	b.n	800c638 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62c:	4a47      	ldr	r2, [pc, #284]	; (800c74c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800c62e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c634:	4a46      	ldr	r2, [pc, #280]	; (800c750 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800c636:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c63c:	4a45      	ldr	r2, [pc, #276]	; (800c754 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800c63e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c644:	2200      	movs	r2, #0
 800c646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	330c      	adds	r3, #12
 800c652:	4619      	mov	r1, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c660:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c662:	f7fb fec3 	bl	80083ec <HAL_DMA_Start_IT>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00c      	beq.n	800c686 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c670:	f043 0210 	orr.w	r2, r3, #16
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c678:	2301      	movs	r3, #1
 800c67a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c684:	e054      	b.n	800c730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f042 0201 	orr.w	r2, r2, #1
 800c694:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c69a:	2200      	movs	r2, #0
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c6ce:	f7fb fe8d 	bl	80083ec <HAL_DMA_Start_IT>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00c      	beq.n	800c6f2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6dc:	f043 0210 	orr.w	r2, r3, #16
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c6f0:	e01e      	b.n	800c730 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6fc:	2b40      	cmp	r3, #64	; 0x40
 800c6fe:	d007      	beq.n	800c710 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c70e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f042 0220 	orr.w	r2, r2, #32
 800c71e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f042 0202 	orr.w	r2, r2, #2
 800c72e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0800c9df 	.word	0x0800c9df
 800c748:	0800c88b 	.word	0x0800c88b
 800c74c:	0800c9fb 	.word	0x0800c9fb
 800c750:	0800c933 	.word	0x0800c933
 800c754:	0800ca17 	.word	0x0800ca17

0800c758 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7f2:	f7fb fc15 	bl	8008020 <HAL_GetTick>
 800c7f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f003 0320 	and.w	r3, r3, #32
 800c802:	2b20      	cmp	r3, #32
 800c804:	d03b      	beq.n	800c87e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 0220 	bic.w	r2, r2, #32
 800c814:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f022 0202 	bic.w	r2, r2, #2
 800c824:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	2164      	movs	r1, #100	; 0x64
 800c82a:	6978      	ldr	r0, [r7, #20]
 800c82c:	f000 fa86 	bl	800cd3c <SPI_EndRxTxTransaction>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c83a:	f043 0220 	orr.w	r2, r3, #32
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10a      	bne.n	800c860 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c84a:	2300      	movs	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c876:	6978      	ldr	r0, [r7, #20]
 800c878:	f7ff ffaa 	bl	800c7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c87c:	e002      	b.n	800c884 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c87e:	6978      	ldr	r0, [r7, #20]
 800c880:	f7ff ff6a 	bl	800c758 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c896:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c898:	f7fb fbc2 	bl	8008020 <HAL_GetTick>
 800c89c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0320 	and.w	r3, r3, #32
 800c8a8:	2b20      	cmp	r3, #32
 800c8aa:	d03c      	beq.n	800c926 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f022 0220 	bic.w	r2, r2, #32
 800c8ba:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10d      	bne.n	800c8e0 <SPI_DMAReceiveCplt+0x56>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8cc:	d108      	bne.n	800c8e0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	685a      	ldr	r2, [r3, #4]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 0203 	bic.w	r2, r2, #3
 800c8dc:	605a      	str	r2, [r3, #4]
 800c8de:	e007      	b.n	800c8f0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f022 0201 	bic.w	r2, r2, #1
 800c8ee:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	2164      	movs	r1, #100	; 0x64
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 f9c9 	bl	800cc8c <SPI_EndRxTransaction>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2220      	movs	r2, #32
 800c904:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff ff56 	bl	800c7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c924:	e002      	b.n	800c92c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff ff20 	bl	800c76c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c940:	f7fb fb6e 	bl	8008020 <HAL_GetTick>
 800c944:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 0320 	and.w	r3, r3, #32
 800c950:	2b20      	cmp	r3, #32
 800c952:	d030      	beq.n	800c9b6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 0220 	bic.w	r2, r2, #32
 800c962:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	2164      	movs	r1, #100	; 0x64
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f9e7 	bl	800cd3c <SPI_EndRxTxTransaction>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d005      	beq.n	800c980 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c978:	f043 0220 	orr.w	r2, r3, #32
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0203 	bic.w	r2, r2, #3
 800c98e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f7ff ff0e 	bl	800c7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c9b4:	e002      	b.n	800c9bc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7ff fee2 	bl	800c780 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f7ff fedf 	bl	800c794 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9d6:	bf00      	nop
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff fedb 	bl	800c7a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9f2:	bf00      	nop
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca06:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7ff fed7 	bl	800c7bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca22:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f022 0203 	bic.w	r2, r2, #3
 800ca32:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca38:	f043 0210 	orr.w	r2, r3, #16
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff fec1 	bl	800c7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca68:	f7fb fada 	bl	8008020 <HAL_GetTick>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4413      	add	r3, r2
 800ca76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ca78:	f7fb fad2 	bl	8008020 <HAL_GetTick>
 800ca7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ca7e:	4b39      	ldr	r3, [pc, #228]	; (800cb64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	015b      	lsls	r3, r3, #5
 800ca84:	0d1b      	lsrs	r3, r3, #20
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	fb02 f303 	mul.w	r3, r2, r3
 800ca8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca8e:	e054      	b.n	800cb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d050      	beq.n	800cb3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca98:	f7fb fac2 	bl	8008020 <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d902      	bls.n	800caae <SPI_WaitFlagStateUntilTimeout+0x56>
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d13d      	bne.n	800cb2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cabc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cac6:	d111      	bne.n	800caec <SPI_WaitFlagStateUntilTimeout+0x94>
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad0:	d004      	beq.n	800cadc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cada:	d107      	bne.n	800caec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caf4:	d10f      	bne.n	800cb16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e017      	b.n	800cb5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	4013      	ands	r3, r2
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	bf0c      	ite	eq
 800cb4a:	2301      	moveq	r3, #1
 800cb4c:	2300      	movne	r3, #0
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d19b      	bne.n	800ca90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000018 	.word	0x20000018

0800cb68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b088      	sub	sp, #32
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cb76:	f7fb fa53 	bl	8008020 <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	1a9b      	subs	r3, r3, r2
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	4413      	add	r3, r2
 800cb84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cb86:	f7fb fa4b 	bl	8008020 <HAL_GetTick>
 800cb8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cb8c:	4b3e      	ldr	r3, [pc, #248]	; (800cc88 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	4613      	mov	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	00da      	lsls	r2, r3, #3
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	0d1b      	lsrs	r3, r3, #20
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	fb02 f303 	mul.w	r3, r2, r3
 800cba2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800cba4:	e062      	b.n	800cc6c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cbac:	d109      	bne.n	800cbc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	330c      	adds	r3, #12
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800cbc0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbc8:	d050      	beq.n	800cc6c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cbca:	f7fb fa29 	bl	8008020 <HAL_GetTick>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	69fa      	ldr	r2, [r7, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d902      	bls.n	800cbe0 <SPI_WaitFifoStateUntilTimeout+0x78>
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d13d      	bne.n	800cc5c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cbee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbf8:	d111      	bne.n	800cc1e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc02:	d004      	beq.n	800cc0e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc0c:	d107      	bne.n	800cc1e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc26:	d10f      	bne.n	800cc48 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e010      	b.n	800cc7e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689a      	ldr	r2, [r3, #8]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	4013      	ands	r3, r2
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d194      	bne.n	800cba6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3720      	adds	r7, #32
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20000018 	.word	0x20000018

0800cc8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b086      	sub	sp, #24
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cca0:	d111      	bne.n	800ccc6 <SPI_EndRxTransaction+0x3a>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccaa:	d004      	beq.n	800ccb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccb4:	d107      	bne.n	800ccc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccc4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2200      	movs	r2, #0
 800ccce:	2180      	movs	r1, #128	; 0x80
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7ff fec1 	bl	800ca58 <SPI_WaitFlagStateUntilTimeout>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d007      	beq.n	800ccec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cce0:	f043 0220 	orr.w	r2, r3, #32
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e023      	b.n	800cd34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccf4:	d11d      	bne.n	800cd32 <SPI_EndRxTransaction+0xa6>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccfe:	d004      	beq.n	800cd0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd08:	d113      	bne.n	800cd32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7ff ff26 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd26:	f043 0220 	orr.w	r2, r3, #32
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e000      	b.n	800cd34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f7ff ff07 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d007      	beq.n	800cd70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd64:	f043 0220 	orr.w	r2, r3, #32
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e027      	b.n	800cdc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2200      	movs	r2, #0
 800cd78:	2180      	movs	r1, #128	; 0x80
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f7ff fe6c 	bl	800ca58 <SPI_WaitFlagStateUntilTimeout>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd8a:	f043 0220 	orr.w	r2, r3, #32
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd92:	2303      	movs	r3, #3
 800cd94:	e014      	b.n	800cdc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fee0 	bl	800cb68 <SPI_WaitFifoStateUntilTimeout>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d007      	beq.n	800cdbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdb2:	f043 0220 	orr.w	r2, r3, #32
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e000      	b.n	800cdc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e049      	b.n	800ce6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7fa feea 	bl	8007bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4619      	mov	r1, r3
 800ce06:	4610      	mov	r0, r2
 800ce08:	f000 faf4 	bl	800d3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d001      	beq.n	800ce90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e04c      	b.n	800cf2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a26      	ldr	r2, [pc, #152]	; (800cf38 <HAL_TIM_Base_Start+0xc0>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d022      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceaa:	d01d      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a22      	ldr	r2, [pc, #136]	; (800cf3c <HAL_TIM_Base_Start+0xc4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d018      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a21      	ldr	r2, [pc, #132]	; (800cf40 <HAL_TIM_Base_Start+0xc8>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d013      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a1f      	ldr	r2, [pc, #124]	; (800cf44 <HAL_TIM_Base_Start+0xcc>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d00e      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a1e      	ldr	r2, [pc, #120]	; (800cf48 <HAL_TIM_Base_Start+0xd0>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d009      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a1c      	ldr	r2, [pc, #112]	; (800cf4c <HAL_TIM_Base_Start+0xd4>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d004      	beq.n	800cee8 <HAL_TIM_Base_Start+0x70>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a1b      	ldr	r2, [pc, #108]	; (800cf50 <HAL_TIM_Base_Start+0xd8>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d115      	bne.n	800cf14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689a      	ldr	r2, [r3, #8]
 800ceee:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <HAL_TIM_Base_Start+0xdc>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b06      	cmp	r3, #6
 800cef8:	d015      	beq.n	800cf26 <HAL_TIM_Base_Start+0xae>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf00:	d011      	beq.n	800cf26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f042 0201 	orr.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf12:	e008      	b.n	800cf26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f042 0201 	orr.w	r2, r2, #1
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	e000      	b.n	800cf28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	40012c00 	.word	0x40012c00
 800cf3c:	40000400 	.word	0x40000400
 800cf40:	40000800 	.word	0x40000800
 800cf44:	40000c00 	.word	0x40000c00
 800cf48:	40013400 	.word	0x40013400
 800cf4c:	40014000 	.word	0x40014000
 800cf50:	40015000 	.word	0x40015000
 800cf54:	00010007 	.word	0x00010007

0800cf58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d001      	beq.n	800cf70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e054      	b.n	800d01a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2202      	movs	r2, #2
 800cf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68da      	ldr	r2, [r3, #12]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f042 0201 	orr.w	r2, r2, #1
 800cf86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a26      	ldr	r2, [pc, #152]	; (800d028 <HAL_TIM_Base_Start_IT+0xd0>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d022      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf9a:	d01d      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a22      	ldr	r2, [pc, #136]	; (800d02c <HAL_TIM_Base_Start_IT+0xd4>)
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d018      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a21      	ldr	r2, [pc, #132]	; (800d030 <HAL_TIM_Base_Start_IT+0xd8>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d013      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a1f      	ldr	r2, [pc, #124]	; (800d034 <HAL_TIM_Base_Start_IT+0xdc>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d00e      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a1e      	ldr	r2, [pc, #120]	; (800d038 <HAL_TIM_Base_Start_IT+0xe0>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d009      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a1c      	ldr	r2, [pc, #112]	; (800d03c <HAL_TIM_Base_Start_IT+0xe4>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d004      	beq.n	800cfd8 <HAL_TIM_Base_Start_IT+0x80>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a1b      	ldr	r2, [pc, #108]	; (800d040 <HAL_TIM_Base_Start_IT+0xe8>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d115      	bne.n	800d004 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	689a      	ldr	r2, [r3, #8]
 800cfde:	4b19      	ldr	r3, [pc, #100]	; (800d044 <HAL_TIM_Base_Start_IT+0xec>)
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2b06      	cmp	r3, #6
 800cfe8:	d015      	beq.n	800d016 <HAL_TIM_Base_Start_IT+0xbe>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff0:	d011      	beq.n	800d016 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f042 0201 	orr.w	r2, r2, #1
 800d000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d002:	e008      	b.n	800d016 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f042 0201 	orr.w	r2, r2, #1
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	e000      	b.n	800d018 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d016:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	40012c00 	.word	0x40012c00
 800d02c:	40000400 	.word	0x40000400
 800d030:	40000800 	.word	0x40000800
 800d034:	40000c00 	.word	0x40000c00
 800d038:	40013400 	.word	0x40013400
 800d03c:	40014000 	.word	0x40014000
 800d040:	40015000 	.word	0x40015000
 800d044:	00010007 	.word	0x00010007

0800d048 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68da      	ldr	r2, [r3, #12]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f022 0201 	bic.w	r2, r2, #1
 800d05e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6a1a      	ldr	r2, [r3, #32]
 800d066:	f241 1311 	movw	r3, #4369	; 0x1111
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10f      	bne.n	800d090 <HAL_TIM_Base_Stop_IT+0x48>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6a1a      	ldr	r2, [r3, #32]
 800d076:	f244 4344 	movw	r3, #17476	; 0x4444
 800d07a:	4013      	ands	r3, r2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d107      	bne.n	800d090 <HAL_TIM_Base_Stop_IT+0x48>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f022 0201 	bic.w	r2, r2, #1
 800d08e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	370c      	adds	r7, #12
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b082      	sub	sp, #8
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d122      	bne.n	800d102 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d11b      	bne.n	800d102 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f06f 0202 	mvn.w	r2, #2
 800d0d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d003      	beq.n	800d0f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f965 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800d0ee:	e005      	b.n	800d0fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f957 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f968 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d122      	bne.n	800d156 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f003 0304 	and.w	r3, r3, #4
 800d11a:	2b04      	cmp	r3, #4
 800d11c:	d11b      	bne.n	800d156 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f06f 0204 	mvn.w	r2, #4
 800d126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2202      	movs	r2, #2
 800d12c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d003      	beq.n	800d144 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f93b 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800d142:	e005      	b.n	800d150 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f92d 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f93e 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	f003 0308 	and.w	r3, r3, #8
 800d160:	2b08      	cmp	r3, #8
 800d162:	d122      	bne.n	800d1aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f003 0308 	and.w	r3, r3, #8
 800d16e:	2b08      	cmp	r3, #8
 800d170:	d11b      	bne.n	800d1aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f06f 0208 	mvn.w	r2, #8
 800d17a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2204      	movs	r2, #4
 800d180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d003      	beq.n	800d198 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 f911 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800d196:	e005      	b.n	800d1a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f903 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f914 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	691b      	ldr	r3, [r3, #16]
 800d1b0:	f003 0310 	and.w	r3, r3, #16
 800d1b4:	2b10      	cmp	r3, #16
 800d1b6:	d122      	bne.n	800d1fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	f003 0310 	and.w	r3, r3, #16
 800d1c2:	2b10      	cmp	r3, #16
 800d1c4:	d11b      	bne.n	800d1fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f06f 0210 	mvn.w	r2, #16
 800d1ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2208      	movs	r2, #8
 800d1d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f8e7 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800d1ea:	e005      	b.n	800d1f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f8d9 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f8ea 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d10e      	bne.n	800d22a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	f003 0301 	and.w	r3, r3, #1
 800d216:	2b01      	cmp	r3, #1
 800d218:	d107      	bne.n	800d22a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f06f 0201 	mvn.w	r2, #1
 800d222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7f8 fdf1 	bl	8005e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d234:	2b80      	cmp	r3, #128	; 0x80
 800d236:	d10e      	bne.n	800d256 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d242:	2b80      	cmp	r3, #128	; 0x80
 800d244:	d107      	bne.n	800d256 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fa17 	bl	800d684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d264:	d10e      	bne.n	800d284 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d270:	2b80      	cmp	r3, #128	; 0x80
 800d272:	d107      	bne.n	800d284 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fa0a 	bl	800d698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d28e:	2b40      	cmp	r3, #64	; 0x40
 800d290:	d10e      	bne.n	800d2b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d29c:	2b40      	cmp	r3, #64	; 0x40
 800d29e:	d107      	bne.n	800d2b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 f898 	bl	800d3e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	f003 0320 	and.w	r3, r3, #32
 800d2ba:	2b20      	cmp	r3, #32
 800d2bc:	d10e      	bne.n	800d2dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	f003 0320 	and.w	r3, r3, #32
 800d2c8:	2b20      	cmp	r3, #32
 800d2ca:	d107      	bne.n	800d2dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f06f 0220 	mvn.w	r2, #32
 800d2d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 f9ca 	bl	800d670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2ea:	d10f      	bne.n	800d30c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2fa:	d107      	bne.n	800d30c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f9d0 	bl	800d6ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d31a:	d10f      	bne.n	800d33c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d32a:	d107      	bne.n	800d33c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f9c2 	bl	800d6c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d34a:	d10f      	bne.n	800d36c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d35a:	d107      	bne.n	800d36c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f9b4 	bl	800d6d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d376:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d37a:	d10f      	bne.n	800d39c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d38a:	d107      	bne.n	800d39c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f9a6 	bl	800d6e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a46      	ldr	r2, [pc, #280]	; (800d520 <TIM_Base_SetConfig+0x12c>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d017      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d412:	d013      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a43      	ldr	r2, [pc, #268]	; (800d524 <TIM_Base_SetConfig+0x130>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d00f      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a42      	ldr	r2, [pc, #264]	; (800d528 <TIM_Base_SetConfig+0x134>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d00b      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a41      	ldr	r2, [pc, #260]	; (800d52c <TIM_Base_SetConfig+0x138>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d007      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a40      	ldr	r2, [pc, #256]	; (800d530 <TIM_Base_SetConfig+0x13c>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_Base_SetConfig+0x48>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a3f      	ldr	r2, [pc, #252]	; (800d534 <TIM_Base_SetConfig+0x140>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d108      	bne.n	800d44e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	4313      	orrs	r3, r2
 800d44c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a33      	ldr	r2, [pc, #204]	; (800d520 <TIM_Base_SetConfig+0x12c>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d023      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d45c:	d01f      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a30      	ldr	r2, [pc, #192]	; (800d524 <TIM_Base_SetConfig+0x130>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d01b      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a2f      	ldr	r2, [pc, #188]	; (800d528 <TIM_Base_SetConfig+0x134>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d017      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a2e      	ldr	r2, [pc, #184]	; (800d52c <TIM_Base_SetConfig+0x138>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d013      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a2d      	ldr	r2, [pc, #180]	; (800d530 <TIM_Base_SetConfig+0x13c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00f      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a2d      	ldr	r2, [pc, #180]	; (800d538 <TIM_Base_SetConfig+0x144>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d00b      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a2c      	ldr	r2, [pc, #176]	; (800d53c <TIM_Base_SetConfig+0x148>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d007      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a2b      	ldr	r2, [pc, #172]	; (800d540 <TIM_Base_SetConfig+0x14c>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d003      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a26      	ldr	r2, [pc, #152]	; (800d534 <TIM_Base_SetConfig+0x140>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d108      	bne.n	800d4b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a12      	ldr	r2, [pc, #72]	; (800d520 <TIM_Base_SetConfig+0x12c>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d013      	beq.n	800d504 <TIM_Base_SetConfig+0x110>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a14      	ldr	r2, [pc, #80]	; (800d530 <TIM_Base_SetConfig+0x13c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d00f      	beq.n	800d504 <TIM_Base_SetConfig+0x110>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a14      	ldr	r2, [pc, #80]	; (800d538 <TIM_Base_SetConfig+0x144>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d00b      	beq.n	800d504 <TIM_Base_SetConfig+0x110>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a13      	ldr	r2, [pc, #76]	; (800d53c <TIM_Base_SetConfig+0x148>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d007      	beq.n	800d504 <TIM_Base_SetConfig+0x110>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a12      	ldr	r2, [pc, #72]	; (800d540 <TIM_Base_SetConfig+0x14c>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d003      	beq.n	800d504 <TIM_Base_SetConfig+0x110>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a0d      	ldr	r2, [pc, #52]	; (800d534 <TIM_Base_SetConfig+0x140>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d103      	bne.n	800d50c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	691a      	ldr	r2, [r3, #16]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	615a      	str	r2, [r3, #20]
}
 800d512:	bf00      	nop
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	40012c00 	.word	0x40012c00
 800d524:	40000400 	.word	0x40000400
 800d528:	40000800 	.word	0x40000800
 800d52c:	40000c00 	.word	0x40000c00
 800d530:	40013400 	.word	0x40013400
 800d534:	40015000 	.word	0x40015000
 800d538:	40014000 	.word	0x40014000
 800d53c:	40014400 	.word	0x40014400
 800d540:	40014800 	.word	0x40014800

0800d544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d554:	2b01      	cmp	r3, #1
 800d556:	d101      	bne.n	800d55c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d558:	2302      	movs	r3, #2
 800d55a:	e074      	b.n	800d646 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2202      	movs	r2, #2
 800d568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a34      	ldr	r2, [pc, #208]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d009      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a33      	ldr	r2, [pc, #204]	; (800d658 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d004      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a31      	ldr	r2, [pc, #196]	; (800d65c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d108      	bne.n	800d5ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a21      	ldr	r2, [pc, #132]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d022      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5dc:	d01d      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d018      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a1d      	ldr	r2, [pc, #116]	; (800d664 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d013      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a1c      	ldr	r2, [pc, #112]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d00e      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a15      	ldr	r2, [pc, #84]	; (800d658 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d009      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a18      	ldr	r2, [pc, #96]	; (800d66c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d004      	beq.n	800d61a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a11      	ldr	r2, [pc, #68]	; (800d65c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d10c      	bne.n	800d634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	4313      	orrs	r3, r2
 800d62a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	40012c00 	.word	0x40012c00
 800d658:	40013400 	.word	0x40013400
 800d65c:	40015000 	.word	0x40015000
 800d660:	40000400 	.word	0x40000400
 800d664:	40000800 	.word	0x40000800
 800d668:	40000c00 	.word	0x40000c00
 800d66c:	40014000 	.word	0x40014000

0800d670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d6c8:	bf00      	nop
 800d6ca:	370c      	adds	r7, #12
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b083      	sub	sp, #12
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d70c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d710:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d72a:	b480      	push	{r7}
 800d72c:	b085      	sub	sp, #20
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d732:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d736:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d73e:	b29a      	uxth	r2, r3
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	b29b      	uxth	r3, r3
 800d744:	43db      	mvns	r3, r3
 800d746:	b29b      	uxth	r3, r3
 800d748:	4013      	ands	r3, r2
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d760:	b084      	sub	sp, #16
 800d762:	b480      	push	{r7}
 800d764:	b083      	sub	sp, #12
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	f107 0014 	add.w	r0, r7, #20
 800d76e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2201      	movs	r2, #1
 800d776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d792:	2300      	movs	r3, #0
}
 800d794:	4618      	mov	r0, r3
 800d796:	370c      	adds	r7, #12
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	b004      	add	sp, #16
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b09b      	sub	sp, #108	; 0x6c
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	78db      	ldrb	r3, [r3, #3]
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d81f      	bhi.n	800d816 <USB_ActivateEndpoint+0x72>
 800d7d6:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <USB_ActivateEndpoint+0x38>)
 800d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7dc:	0800d7ed 	.word	0x0800d7ed
 800d7e0:	0800d809 	.word	0x0800d809
 800d7e4:	0800d81f 	.word	0x0800d81f
 800d7e8:	0800d7fb 	.word	0x0800d7fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d7ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d7f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800d7f8:	e012      	b.n	800d820 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d7fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d7fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d802:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800d806:	e00b      	b.n	800d820 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d808:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d80c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d810:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800d814:	e004      	b.n	800d820 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800d81c:	e000      	b.n	800d820 <USB_ActivateEndpoint+0x7c>
      break;
 800d81e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	441a      	add	r2, r3
 800d82a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d82e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d83e:	b29b      	uxth	r3, r3
 800d840:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	b21b      	sxth	r3, r3
 800d852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d85a:	b21a      	sxth	r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	b21b      	sxth	r3, r3
 800d862:	4313      	orrs	r3, r2
 800d864:	b21b      	sxth	r3, r3
 800d866:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	441a      	add	r2, r3
 800d874:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800d878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d87c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d888:	b29b      	uxth	r3, r3
 800d88a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	7b1b      	ldrb	r3, [r3, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	f040 8149 	bne.w	800db28 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	785b      	ldrb	r3, [r3, #1]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 8084 	beq.w	800d9a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	617b      	str	r3, [r7, #20]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	00da      	lsls	r2, r3, #3
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8c2:	613b      	str	r3, [r7, #16]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	88db      	ldrh	r3, [r3, #6]
 800d8c8:	085b      	lsrs	r3, r3, #1
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	005b      	lsls	r3, r3, #1
 800d8ce:	b29a      	uxth	r2, r3
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	81fb      	strh	r3, [r7, #14]
 800d8e2:	89fb      	ldrh	r3, [r7, #14]
 800d8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01b      	beq.n	800d924 <USB_ActivateEndpoint+0x180>
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d902:	81bb      	strh	r3, [r7, #12]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	441a      	add	r2, r3
 800d90e:	89bb      	ldrh	r3, [r7, #12]
 800d910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d91c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d920:	b29b      	uxth	r3, r3
 800d922:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	78db      	ldrb	r3, [r3, #3]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d020      	beq.n	800d96e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	b29b      	uxth	r3, r3
 800d93a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d93e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d942:	813b      	strh	r3, [r7, #8]
 800d944:	893b      	ldrh	r3, [r7, #8]
 800d946:	f083 0320 	eor.w	r3, r3, #32
 800d94a:	813b      	strh	r3, [r7, #8]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	441a      	add	r2, r3
 800d956:	893b      	ldrh	r3, [r7, #8]
 800d958:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d95c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d968:	b29b      	uxth	r3, r3
 800d96a:	8013      	strh	r3, [r2, #0]
 800d96c:	e27f      	b.n	800de6e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d984:	817b      	strh	r3, [r7, #10]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	441a      	add	r2, r3
 800d990:	897b      	ldrh	r3, [r7, #10]
 800d992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8013      	strh	r3, [r2, #0]
 800d9a6:	e262      	b.n	800de6e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	4413      	add	r3, r2
 800d9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	00da      	lsls	r2, r3, #3
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d9ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	88db      	ldrh	r3, [r3, #6]
 800d9d0:	085b      	lsrs	r3, r3, #1
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ec:	4413      	add	r3, r2
 800d9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	00da      	lsls	r2, r3, #3
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	4413      	add	r3, r2
 800d9fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d9fe:	623b      	str	r3, [r7, #32]
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d112      	bne.n	800da2e <USB_ActivateEndpoint+0x28a>
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800da12:	b29a      	uxth	r2, r3
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da26:	b29a      	uxth	r2, r3
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	801a      	strh	r2, [r3, #0]
 800da2c:	e02f      	b.n	800da8e <USB_ActivateEndpoint+0x2ea>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	2b3e      	cmp	r3, #62	; 0x3e
 800da34:	d813      	bhi.n	800da5e <USB_ActivateEndpoint+0x2ba>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	085b      	lsrs	r3, r3, #1
 800da3c:	663b      	str	r3, [r7, #96]	; 0x60
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	f003 0301 	and.w	r3, r3, #1
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <USB_ActivateEndpoint+0x2ac>
 800da4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da4c:	3301      	adds	r3, #1
 800da4e:	663b      	str	r3, [r7, #96]	; 0x60
 800da50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da52:	b29b      	uxth	r3, r3
 800da54:	029b      	lsls	r3, r3, #10
 800da56:	b29a      	uxth	r2, r3
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	801a      	strh	r2, [r3, #0]
 800da5c:	e017      	b.n	800da8e <USB_ActivateEndpoint+0x2ea>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	095b      	lsrs	r3, r3, #5
 800da64:	663b      	str	r3, [r7, #96]	; 0x60
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	f003 031f 	and.w	r3, r3, #31
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d102      	bne.n	800da78 <USB_ActivateEndpoint+0x2d4>
 800da72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da74:	3b01      	subs	r3, #1
 800da76:	663b      	str	r3, [r7, #96]	; 0x60
 800da78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	029b      	lsls	r3, r3, #10
 800da7e:	b29b      	uxth	r3, r3
 800da80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da88:	b29a      	uxth	r2, r3
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	83fb      	strh	r3, [r7, #30]
 800da9c:	8bfb      	ldrh	r3, [r7, #30]
 800da9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d01b      	beq.n	800dade <USB_ActivateEndpoint+0x33a>
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4413      	add	r3, r2
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dabc:	83bb      	strh	r3, [r7, #28]
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	441a      	add	r2, r3
 800dac8:	8bbb      	ldrh	r3, [r7, #28]
 800daca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dada:	b29b      	uxth	r3, r3
 800dadc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800daf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daf4:	837b      	strh	r3, [r7, #26]
 800daf6:	8b7b      	ldrh	r3, [r7, #26]
 800daf8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dafc:	837b      	strh	r3, [r7, #26]
 800dafe:	8b7b      	ldrh	r3, [r7, #26]
 800db00:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800db04:	837b      	strh	r3, [r7, #26]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	441a      	add	r2, r3
 800db10:	8b7b      	ldrh	r3, [r7, #26]
 800db12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db22:	b29b      	uxth	r3, r3
 800db24:	8013      	strh	r3, [r2, #0]
 800db26:	e1a2      	b.n	800de6e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	881b      	ldrh	r3, [r3, #0]
 800db34:	b29b      	uxth	r3, r3
 800db36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db3e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	441a      	add	r2, r3
 800db4c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800db50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800db5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db60:	b29b      	uxth	r3, r3
 800db62:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	65bb      	str	r3, [r7, #88]	; 0x58
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db6e:	b29b      	uxth	r3, r3
 800db70:	461a      	mov	r2, r3
 800db72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db74:	4413      	add	r3, r2
 800db76:	65bb      	str	r3, [r7, #88]	; 0x58
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	00da      	lsls	r2, r3, #3
 800db7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db80:	4413      	add	r3, r2
 800db82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db86:	657b      	str	r3, [r7, #84]	; 0x54
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	891b      	ldrh	r3, [r3, #8]
 800db8c:	085b      	lsrs	r3, r3, #1
 800db8e:	b29b      	uxth	r3, r3
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	b29a      	uxth	r2, r3
 800db94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db96:	801a      	strh	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	653b      	str	r3, [r7, #80]	; 0x50
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	461a      	mov	r2, r3
 800dba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba8:	4413      	add	r3, r2
 800dbaa:	653b      	str	r3, [r7, #80]	; 0x50
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	00da      	lsls	r2, r3, #3
 800dbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dbba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	895b      	ldrh	r3, [r3, #10]
 800dbc0:	085b      	lsrs	r3, r3, #1
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	785b      	ldrb	r3, [r3, #1]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f040 8091 	bne.w	800dcf8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800dbe4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dbe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d01b      	beq.n	800dc26 <USB_ActivateEndpoint+0x482>
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc04:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	441a      	add	r2, r3
 800dc10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	873b      	strh	r3, [r7, #56]	; 0x38
 800dc34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d01b      	beq.n	800dc76 <USB_ActivateEndpoint+0x4d2>
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc54:	86fb      	strh	r3, [r7, #54]	; 0x36
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	441a      	add	r2, r3
 800dc60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dc62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	4413      	add	r3, r2
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc8c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800dc8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dc90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dc94:	86bb      	strh	r3, [r7, #52]	; 0x34
 800dc96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dc98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dc9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	441a      	add	r2, r3
 800dca8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dcaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	4413      	add	r3, r2
 800dcc8:	881b      	ldrh	r3, [r3, #0]
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcd4:	867b      	strh	r3, [r7, #50]	; 0x32
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	441a      	add	r2, r3
 800dce0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	8013      	strh	r3, [r2, #0]
 800dcf6:	e0ba      	b.n	800de6e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dd08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dd0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01d      	beq.n	800dd50 <USB_ActivateEndpoint+0x5ac>
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	441a      	add	r2, r3
 800dd38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800dd3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	881b      	ldrh	r3, [r3, #0]
 800dd5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d01d      	beq.n	800dda8 <USB_ActivateEndpoint+0x604>
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	441a      	add	r2, r3
 800dd90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dd94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dda0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	78db      	ldrb	r3, [r3, #3]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d024      	beq.n	800ddfa <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ddca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ddce:	f083 0320 	eor.w	r3, r3, #32
 800ddd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	441a      	add	r2, r3
 800dde0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dde4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dde8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	8013      	strh	r3, [r2, #0]
 800ddf8:	e01d      	b.n	800de36 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	b29b      	uxth	r3, r3
 800de08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	009b      	lsls	r3, r3, #2
 800de1c:	441a      	add	r2, r3
 800de1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de32:	b29b      	uxth	r3, r3
 800de34:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	b29b      	uxth	r3, r3
 800de44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	441a      	add	r2, r3
 800de58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800de6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800de72:	4618      	mov	r0, r3
 800de74:	376c      	adds	r7, #108	; 0x6c
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop

0800de80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800de80:	b480      	push	{r7}
 800de82:	b08d      	sub	sp, #52	; 0x34
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	7b1b      	ldrb	r3, [r3, #12]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 808e 	bne.w	800dfb0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	785b      	ldrb	r3, [r3, #1]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d044      	beq.n	800df26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	4413      	add	r3, r2
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	81bb      	strh	r3, [r7, #12]
 800deaa:	89bb      	ldrh	r3, [r7, #12]
 800deac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d01b      	beq.n	800deec <USB_DeactivateEndpoint+0x6c>
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800deca:	817b      	strh	r3, [r7, #10]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	441a      	add	r2, r3
 800ded6:	897b      	ldrh	r3, [r7, #10]
 800ded8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dedc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dee8:	b29b      	uxth	r3, r3
 800deea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	b29b      	uxth	r3, r3
 800defa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800defe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df02:	813b      	strh	r3, [r7, #8]
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	441a      	add	r2, r3
 800df0e:	893b      	ldrh	r3, [r7, #8]
 800df10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df20:	b29b      	uxth	r3, r3
 800df22:	8013      	strh	r3, [r2, #0]
 800df24:	e192      	b.n	800e24c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	827b      	strh	r3, [r7, #18]
 800df34:	8a7b      	ldrh	r3, [r7, #18]
 800df36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01b      	beq.n	800df76 <USB_DeactivateEndpoint+0xf6>
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df54:	823b      	strh	r3, [r7, #16]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	441a      	add	r2, r3
 800df60:	8a3b      	ldrh	r3, [r7, #16]
 800df62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800df6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df72:	b29b      	uxth	r3, r3
 800df74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	b29b      	uxth	r3, r3
 800df84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df8c:	81fb      	strh	r3, [r7, #14]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	441a      	add	r2, r3
 800df98:	89fb      	ldrh	r3, [r7, #14]
 800df9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	8013      	strh	r3, [r2, #0]
 800dfae:	e14d      	b.n	800e24c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	785b      	ldrb	r3, [r3, #1]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 80a5 	bne.w	800e104 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4413      	add	r3, r2
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	843b      	strh	r3, [r7, #32]
 800dfc8:	8c3b      	ldrh	r3, [r7, #32]
 800dfca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d01b      	beq.n	800e00a <USB_DeactivateEndpoint+0x18a>
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfe8:	83fb      	strh	r3, [r7, #30]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	441a      	add	r2, r3
 800dff4:	8bfb      	ldrh	r3, [r7, #30]
 800dff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e006:	b29b      	uxth	r3, r3
 800e008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	83bb      	strh	r3, [r7, #28]
 800e018:	8bbb      	ldrh	r3, [r7, #28]
 800e01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d01b      	beq.n	800e05a <USB_DeactivateEndpoint+0x1da>
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e038:	837b      	strh	r3, [r7, #26]
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	441a      	add	r2, r3
 800e044:	8b7b      	ldrh	r3, [r7, #26]
 800e046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e04a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e04e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e056:	b29b      	uxth	r3, r3
 800e058:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	b29b      	uxth	r3, r3
 800e068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e06c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e070:	833b      	strh	r3, [r7, #24]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	441a      	add	r2, r3
 800e07c:	8b3b      	ldrh	r3, [r7, #24]
 800e07e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e08a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e08e:	b29b      	uxth	r3, r3
 800e090:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0a8:	82fb      	strh	r3, [r7, #22]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	441a      	add	r2, r3
 800e0b4:	8afb      	ldrh	r3, [r7, #22]
 800e0b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0e0:	82bb      	strh	r3, [r7, #20]
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	441a      	add	r2, r3
 800e0ec:	8abb      	ldrh	r3, [r7, #20]
 800e0ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	8013      	strh	r3, [r2, #0]
 800e102:	e0a3      	b.n	800e24c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e112:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d01b      	beq.n	800e154 <USB_DeactivateEndpoint+0x2d4>
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e132:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	441a      	add	r2, r3
 800e13e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e150:	b29b      	uxth	r3, r3
 800e152:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	881b      	ldrh	r3, [r3, #0]
 800e160:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e162:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01b      	beq.n	800e1a4 <USB_DeactivateEndpoint+0x324>
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e182:	853b      	strh	r3, [r7, #40]	; 0x28
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	441a      	add	r2, r3
 800e18e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e19c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4413      	add	r3, r2
 800e1ae:	881b      	ldrh	r3, [r3, #0]
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	441a      	add	r2, r3
 800e1c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	881b      	ldrh	r3, [r3, #0]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	441a      	add	r2, r3
 800e1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e210:	b29b      	uxth	r3, r3
 800e212:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29b      	uxth	r3, r3
 800e222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e22a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	441a      	add	r2, r3
 800e236:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e248:	b29b      	uxth	r3, r3
 800e24a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3734      	adds	r7, #52	; 0x34
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b0cc      	sub	sp, #304	; 0x130
 800e25e:	af00      	add	r7, sp, #0
 800e260:	1d3b      	adds	r3, r7, #4
 800e262:	6018      	str	r0, [r3, #0]
 800e264:	463b      	mov	r3, r7
 800e266:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e268:	463b      	mov	r3, r7
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	785b      	ldrb	r3, [r3, #1]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	f040 872e 	bne.w	800f0d0 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e274:	463b      	mov	r3, r7
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	699a      	ldr	r2, [r3, #24]
 800e27a:	463b      	mov	r3, r7
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	429a      	cmp	r2, r3
 800e282:	d905      	bls.n	800e290 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800e284:	463b      	mov	r3, r7
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800e28e:	e004      	b.n	800e29a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800e290:	463b      	mov	r3, r7
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	699b      	ldr	r3, [r3, #24]
 800e296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e29a:	463b      	mov	r3, r7
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	7b1b      	ldrb	r3, [r3, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d134      	bne.n	800e30e <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6959      	ldr	r1, [r3, #20]
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	88da      	ldrh	r2, [r3, #6]
 800e2b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	1d38      	adds	r0, r7, #4
 800e2b8:	6800      	ldr	r0, [r0, #0]
 800e2ba:	f001 fbff 	bl	800fabc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e2be:	f107 0310 	add.w	r3, r7, #16
 800e2c2:	1d3a      	adds	r2, r7, #4
 800e2c4:	6812      	ldr	r2, [r2, #0]
 800e2c6:	601a      	str	r2, [r3, #0]
 800e2c8:	1d3b      	adds	r3, r7, #4
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	f107 0310 	add.w	r3, r7, #16
 800e2d8:	f107 0210 	add.w	r2, r7, #16
 800e2dc:	6812      	ldr	r2, [r2, #0]
 800e2de:	440a      	add	r2, r1
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	463b      	mov	r3, r7
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	00da      	lsls	r2, r3, #3
 800e2ea:	f107 0310 	add.w	r3, r7, #16
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800e2f6:	f107 030c 	add.w	r3, r7, #12
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e300:	b29a      	uxth	r2, r3
 800e302:	f107 030c 	add.w	r3, r7, #12
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	801a      	strh	r2, [r3, #0]
 800e30a:	f000 beac 	b.w	800f066 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e30e:	463b      	mov	r3, r7
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	78db      	ldrb	r3, [r3, #3]
 800e314:	2b02      	cmp	r3, #2
 800e316:	f040 838c 	bne.w	800ea32 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e31a:	463b      	mov	r3, r7
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6a1a      	ldr	r2, [r3, #32]
 800e320:	463b      	mov	r3, r7
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	429a      	cmp	r2, r3
 800e328:	f240 8330 	bls.w	800e98c <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800e32c:	1d3b      	adds	r3, r7, #4
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	463b      	mov	r3, r7
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e346:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e34a:	1d3b      	adds	r3, r7, #4
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	463b      	mov	r3, r7
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	441a      	add	r2, r3
 800e358:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e35c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e364:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e370:	463b      	mov	r3, r7
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6a1a      	ldr	r2, [r3, #32]
 800e376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e37a:	1ad2      	subs	r2, r2, r3
 800e37c:	463b      	mov	r3, r7
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	463b      	mov	r3, r7
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	881b      	ldrh	r3, [r3, #0]
 800e392:	b29b      	uxth	r3, r3
 800e394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 819e 	beq.w	800e6da <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e39e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3a2:	1d3a      	adds	r2, r7, #4
 800e3a4:	6812      	ldr	r2, [r2, #0]
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	463b      	mov	r3, r7
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	785b      	ldrb	r3, [r3, #1]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d17a      	bne.n	800e4a8 <USB_EPStartXfer+0x24e>
 800e3b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3b6:	1d3a      	adds	r2, r7, #4
 800e3b8:	6812      	ldr	r2, [r2, #0]
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	1d3b      	adds	r3, r7, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	440a      	add	r2, r1
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	463b      	mov	r3, r7
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	00da      	lsls	r2, r3, #3
 800e3de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800e3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d11a      	bne.n	800e42e <USB_EPStartXfer+0x1d4>
 800e3f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	b29b      	uxth	r3, r3
 800e402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e406:	b29a      	uxth	r2, r3
 800e408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	801a      	strh	r2, [r3, #0]
 800e410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e41e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e422:	b29a      	uxth	r2, r3
 800e424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	801a      	strh	r2, [r3, #0]
 800e42c:	e062      	b.n	800e4f4 <USB_EPStartXfer+0x29a>
 800e42e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e432:	2b3e      	cmp	r3, #62	; 0x3e
 800e434:	d819      	bhi.n	800e46a <USB_EPStartXfer+0x210>
 800e436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e43a:	085b      	lsrs	r3, r3, #1
 800e43c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d004      	beq.n	800e456 <USB_EPStartXfer+0x1fc>
 800e44c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e450:	3301      	adds	r3, #1
 800e452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e456:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	029b      	lsls	r3, r3, #10
 800e45e:	b29a      	uxth	r2, r3
 800e460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	801a      	strh	r2, [r3, #0]
 800e468:	e044      	b.n	800e4f4 <USB_EPStartXfer+0x29a>
 800e46a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e46e:	095b      	lsrs	r3, r3, #5
 800e470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e478:	f003 031f 	and.w	r3, r3, #31
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d104      	bne.n	800e48a <USB_EPStartXfer+0x230>
 800e480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e484:	3b01      	subs	r3, #1
 800e486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e48e:	b29b      	uxth	r3, r3
 800e490:	029b      	lsls	r3, r3, #10
 800e492:	b29b      	uxth	r3, r3
 800e494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	801a      	strh	r2, [r3, #0]
 800e4a6:	e025      	b.n	800e4f4 <USB_EPStartXfer+0x29a>
 800e4a8:	463b      	mov	r3, r7
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	785b      	ldrb	r3, [r3, #1]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d120      	bne.n	800e4f4 <USB_EPStartXfer+0x29a>
 800e4b2:	1d3b      	adds	r3, r7, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	4619      	mov	r1, r3
 800e4be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e4c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e4c6:	6812      	ldr	r2, [r2, #0]
 800e4c8:	440a      	add	r2, r1
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	463b      	mov	r3, r7
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	00da      	lsls	r2, r3, #3
 800e4d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4413      	add	r3, r2
 800e4dc:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800e4e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4e4:	601a      	str	r2, [r3, #0]
 800e4e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e4f4:	463b      	mov	r3, r7
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	895b      	ldrh	r3, [r3, #10]
 800e4fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4fe:	463b      	mov	r3, r7
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6959      	ldr	r1, [r3, #20]
 800e504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e508:	b29b      	uxth	r3, r3
 800e50a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800e50e:	1d38      	adds	r0, r7, #4
 800e510:	6800      	ldr	r0, [r0, #0]
 800e512:	f001 fad3 	bl	800fabc <USB_WritePMA>
            ep->xfer_buff += len;
 800e516:	463b      	mov	r3, r7
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	695a      	ldr	r2, [r3, #20]
 800e51c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e520:	441a      	add	r2, r3
 800e522:	463b      	mov	r3, r7
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e528:	463b      	mov	r3, r7
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6a1a      	ldr	r2, [r3, #32]
 800e52e:	463b      	mov	r3, r7
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	691b      	ldr	r3, [r3, #16]
 800e534:	429a      	cmp	r2, r3
 800e536:	d909      	bls.n	800e54c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800e538:	463b      	mov	r3, r7
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6a1a      	ldr	r2, [r3, #32]
 800e53e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e542:	1ad2      	subs	r2, r2, r3
 800e544:	463b      	mov	r3, r7
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	621a      	str	r2, [r3, #32]
 800e54a:	e008      	b.n	800e55e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800e54c:	463b      	mov	r3, r7
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6a1b      	ldr	r3, [r3, #32]
 800e552:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800e556:	463b      	mov	r3, r7
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2200      	movs	r2, #0
 800e55c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e55e:	463b      	mov	r3, r7
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	785b      	ldrb	r3, [r3, #1]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d17a      	bne.n	800e65e <USB_EPStartXfer+0x404>
 800e568:	f107 0318 	add.w	r3, r7, #24
 800e56c:	1d3a      	adds	r2, r7, #4
 800e56e:	6812      	ldr	r2, [r2, #0]
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	1d3b      	adds	r3, r7, #4
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	f107 0318 	add.w	r3, r7, #24
 800e582:	f107 0218 	add.w	r2, r7, #24
 800e586:	6812      	ldr	r2, [r2, #0]
 800e588:	440a      	add	r2, r1
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	463b      	mov	r3, r7
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	00da      	lsls	r2, r3, #3
 800e594:	f107 0318 	add.w	r3, r7, #24
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4413      	add	r3, r2
 800e59c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800e5a0:	f107 0314 	add.w	r3, r7, #20
 800e5a4:	601a      	str	r2, [r3, #0]
 800e5a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d11a      	bne.n	800e5e4 <USB_EPStartXfer+0x38a>
 800e5ae:	f107 0314 	add.w	r3, r7, #20
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	f107 0314 	add.w	r3, r7, #20
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	801a      	strh	r2, [r3, #0]
 800e5c6:	f107 0314 	add.w	r3, r7, #20
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	801a      	strh	r2, [r3, #0]
 800e5e2:	e067      	b.n	800e6b4 <USB_EPStartXfer+0x45a>
 800e5e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5e8:	2b3e      	cmp	r3, #62	; 0x3e
 800e5ea:	d819      	bhi.n	800e620 <USB_EPStartXfer+0x3c6>
 800e5ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5f0:	085b      	lsrs	r3, r3, #1
 800e5f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e5f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <USB_EPStartXfer+0x3b2>
 800e602:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800e606:	3301      	adds	r3, #1
 800e608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e60c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800e610:	b29b      	uxth	r3, r3
 800e612:	029b      	lsls	r3, r3, #10
 800e614:	b29a      	uxth	r2, r3
 800e616:	f107 0314 	add.w	r3, r7, #20
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	801a      	strh	r2, [r3, #0]
 800e61e:	e049      	b.n	800e6b4 <USB_EPStartXfer+0x45a>
 800e620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e624:	095b      	lsrs	r3, r3, #5
 800e626:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e62a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e62e:	f003 031f 	and.w	r3, r3, #31
 800e632:	2b00      	cmp	r3, #0
 800e634:	d104      	bne.n	800e640 <USB_EPStartXfer+0x3e6>
 800e636:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800e63a:	3b01      	subs	r3, #1
 800e63c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e640:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800e644:	b29b      	uxth	r3, r3
 800e646:	029b      	lsls	r3, r3, #10
 800e648:	b29b      	uxth	r3, r3
 800e64a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e64e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e652:	b29a      	uxth	r2, r3
 800e654:	f107 0314 	add.w	r3, r7, #20
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	801a      	strh	r2, [r3, #0]
 800e65c:	e02a      	b.n	800e6b4 <USB_EPStartXfer+0x45a>
 800e65e:	463b      	mov	r3, r7
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	785b      	ldrb	r3, [r3, #1]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d125      	bne.n	800e6b4 <USB_EPStartXfer+0x45a>
 800e668:	f107 0320 	add.w	r3, r7, #32
 800e66c:	1d3a      	adds	r2, r7, #4
 800e66e:	6812      	ldr	r2, [r2, #0]
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	1d3b      	adds	r3, r7, #4
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	4619      	mov	r1, r3
 800e67e:	f107 0320 	add.w	r3, r7, #32
 800e682:	f107 0220 	add.w	r2, r7, #32
 800e686:	6812      	ldr	r2, [r2, #0]
 800e688:	440a      	add	r2, r1
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	463b      	mov	r3, r7
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	00da      	lsls	r2, r3, #3
 800e694:	f107 0320 	add.w	r3, r7, #32
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4413      	add	r3, r2
 800e69c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800e6a0:	f107 031c 	add.w	r3, r7, #28
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	f107 031c 	add.w	r3, r7, #28
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e6b4:	463b      	mov	r3, r7
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	891b      	ldrh	r3, [r3, #8]
 800e6ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6be:	463b      	mov	r3, r7
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6959      	ldr	r1, [r3, #20]
 800e6c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800e6ce:	1d38      	adds	r0, r7, #4
 800e6d0:	6800      	ldr	r0, [r0, #0]
 800e6d2:	f001 f9f3 	bl	800fabc <USB_WritePMA>
 800e6d6:	f000 bcc6 	b.w	800f066 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e6da:	463b      	mov	r3, r7
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d164      	bne.n	800e7ae <USB_EPStartXfer+0x554>
 800e6e4:	1d3b      	adds	r3, r7, #4
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ea:	1d3b      	adds	r3, r7, #4
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f8:	4413      	add	r3, r2
 800e6fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6fc:	463b      	mov	r3, r7
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	00da      	lsls	r2, r3, #3
 800e704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e706:	4413      	add	r3, r2
 800e708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e70c:	647b      	str	r3, [r7, #68]	; 0x44
 800e70e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e712:	2b00      	cmp	r3, #0
 800e714:	d112      	bne.n	800e73c <USB_EPStartXfer+0x4e2>
 800e716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e720:	b29a      	uxth	r2, r3
 800e722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e724:	801a      	strh	r2, [r3, #0]
 800e726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e728:	881b      	ldrh	r3, [r3, #0]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e734:	b29a      	uxth	r2, r3
 800e736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e738:	801a      	strh	r2, [r3, #0]
 800e73a:	e057      	b.n	800e7ec <USB_EPStartXfer+0x592>
 800e73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e740:	2b3e      	cmp	r3, #62	; 0x3e
 800e742:	d817      	bhi.n	800e774 <USB_EPStartXfer+0x51a>
 800e744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e748:	085b      	lsrs	r3, r3, #1
 800e74a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800e74e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e752:	f003 0301 	and.w	r3, r3, #1
 800e756:	2b00      	cmp	r3, #0
 800e758:	d004      	beq.n	800e764 <USB_EPStartXfer+0x50a>
 800e75a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e75e:	3301      	adds	r3, #1
 800e760:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800e764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e768:	b29b      	uxth	r3, r3
 800e76a:	029b      	lsls	r3, r3, #10
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e770:	801a      	strh	r2, [r3, #0]
 800e772:	e03b      	b.n	800e7ec <USB_EPStartXfer+0x592>
 800e774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e778:	095b      	lsrs	r3, r3, #5
 800e77a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800e77e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e782:	f003 031f 	and.w	r3, r3, #31
 800e786:	2b00      	cmp	r3, #0
 800e788:	d104      	bne.n	800e794 <USB_EPStartXfer+0x53a>
 800e78a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e78e:	3b01      	subs	r3, #1
 800e790:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800e794:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e798:	b29b      	uxth	r3, r3
 800e79a:	029b      	lsls	r3, r3, #10
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7aa:	801a      	strh	r2, [r3, #0]
 800e7ac:	e01e      	b.n	800e7ec <USB_EPStartXfer+0x592>
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	785b      	ldrb	r3, [r3, #1]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d119      	bne.n	800e7ec <USB_EPStartXfer+0x592>
 800e7b8:	1d3b      	adds	r3, r7, #4
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	653b      	str	r3, [r7, #80]	; 0x50
 800e7be:	1d3b      	adds	r3, r7, #4
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7cc:	4413      	add	r3, r2
 800e7ce:	653b      	str	r3, [r7, #80]	; 0x50
 800e7d0:	463b      	mov	r3, r7
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	00da      	lsls	r2, r3, #3
 800e7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7da:	4413      	add	r3, r2
 800e7dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e7ec:	463b      	mov	r3, r7
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	891b      	ldrh	r3, [r3, #8]
 800e7f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7f6:	463b      	mov	r3, r7
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6959      	ldr	r1, [r3, #20]
 800e7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e800:	b29b      	uxth	r3, r3
 800e802:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800e806:	1d38      	adds	r0, r7, #4
 800e808:	6800      	ldr	r0, [r0, #0]
 800e80a:	f001 f957 	bl	800fabc <USB_WritePMA>
            ep->xfer_buff += len;
 800e80e:	463b      	mov	r3, r7
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	695a      	ldr	r2, [r3, #20]
 800e814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e818:	441a      	add	r2, r3
 800e81a:	463b      	mov	r3, r7
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e820:	463b      	mov	r3, r7
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6a1a      	ldr	r2, [r3, #32]
 800e826:	463b      	mov	r3, r7
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d909      	bls.n	800e844 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800e830:	463b      	mov	r3, r7
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6a1a      	ldr	r2, [r3, #32]
 800e836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e83a:	1ad2      	subs	r2, r2, r3
 800e83c:	463b      	mov	r3, r7
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	621a      	str	r2, [r3, #32]
 800e842:	e008      	b.n	800e856 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800e844:	463b      	mov	r3, r7
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6a1b      	ldr	r3, [r3, #32]
 800e84a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800e84e:	463b      	mov	r3, r7
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2200      	movs	r2, #0
 800e854:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e856:	1d3b      	adds	r3, r7, #4
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	643b      	str	r3, [r7, #64]	; 0x40
 800e85c:	463b      	mov	r3, r7
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	785b      	ldrb	r3, [r3, #1]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d164      	bne.n	800e930 <USB_EPStartXfer+0x6d6>
 800e866:	1d3b      	adds	r3, r7, #4
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e86c:	1d3b      	adds	r3, r7, #4
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e874:	b29b      	uxth	r3, r3
 800e876:	461a      	mov	r2, r3
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	4413      	add	r3, r2
 800e87c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e87e:	463b      	mov	r3, r7
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	00da      	lsls	r2, r3, #3
 800e886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e888:	4413      	add	r3, r2
 800e88a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e88e:	637b      	str	r3, [r7, #52]	; 0x34
 800e890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d112      	bne.n	800e8be <USB_EPStartXfer+0x664>
 800e898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a6:	801a      	strh	r2, [r3, #0]
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ba:	801a      	strh	r2, [r3, #0]
 800e8bc:	e054      	b.n	800e968 <USB_EPStartXfer+0x70e>
 800e8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8c2:	2b3e      	cmp	r3, #62	; 0x3e
 800e8c4:	d817      	bhi.n	800e8f6 <USB_EPStartXfer+0x69c>
 800e8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8ca:	085b      	lsrs	r3, r3, #1
 800e8cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8d4:	f003 0301 	and.w	r3, r3, #1
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <USB_EPStartXfer+0x68c>
 800e8dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e8e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	029b      	lsls	r3, r3, #10
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f2:	801a      	strh	r2, [r3, #0]
 800e8f4:	e038      	b.n	800e968 <USB_EPStartXfer+0x70e>
 800e8f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8fa:	095b      	lsrs	r3, r3, #5
 800e8fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e904:	f003 031f 	and.w	r3, r3, #31
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d104      	bne.n	800e916 <USB_EPStartXfer+0x6bc>
 800e90c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e910:	3b01      	subs	r3, #1
 800e912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800e916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	029b      	lsls	r3, r3, #10
 800e91e:	b29b      	uxth	r3, r3
 800e920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e928:	b29a      	uxth	r2, r3
 800e92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92c:	801a      	strh	r2, [r3, #0]
 800e92e:	e01b      	b.n	800e968 <USB_EPStartXfer+0x70e>
 800e930:	463b      	mov	r3, r7
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	785b      	ldrb	r3, [r3, #1]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d116      	bne.n	800e968 <USB_EPStartXfer+0x70e>
 800e93a:	1d3b      	adds	r3, r7, #4
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e942:	b29b      	uxth	r3, r3
 800e944:	461a      	mov	r2, r3
 800e946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e948:	4413      	add	r3, r2
 800e94a:	643b      	str	r3, [r7, #64]	; 0x40
 800e94c:	463b      	mov	r3, r7
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	00da      	lsls	r2, r3, #3
 800e954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e956:	4413      	add	r3, r2
 800e958:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e95c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e95e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e962:	b29a      	uxth	r2, r3
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e968:	463b      	mov	r3, r7
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	895b      	ldrh	r3, [r3, #10]
 800e96e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e972:	463b      	mov	r3, r7
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	6959      	ldr	r1, [r3, #20]
 800e978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800e982:	1d38      	adds	r0, r7, #4
 800e984:	6800      	ldr	r0, [r0, #0]
 800e986:	f001 f899 	bl	800fabc <USB_WritePMA>
 800e98a:	e36c      	b.n	800f066 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e98c:	463b      	mov	r3, r7
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800e996:	1d3b      	adds	r3, r7, #4
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	463b      	mov	r3, r7
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	4413      	add	r3, r2
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e9ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e9b4:	1d3b      	adds	r3, r7, #4
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	463b      	mov	r3, r7
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	441a      	add	r2, r3
 800e9c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e9c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e9da:	1d3b      	adds	r3, r7, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9e0:	1d3b      	adds	r3, r7, #4
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9ee:	4413      	add	r3, r2
 800e9f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9f2:	463b      	mov	r3, r7
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	00da      	lsls	r2, r3, #3
 800e9fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9fc:	4413      	add	r3, r2
 800e9fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea02:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ea0e:	463b      	mov	r3, r7
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	891b      	ldrh	r3, [r3, #8]
 800ea14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea18:	463b      	mov	r3, r7
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6959      	ldr	r1, [r3, #20]
 800ea1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ea28:	1d38      	adds	r0, r7, #4
 800ea2a:	6800      	ldr	r0, [r0, #0]
 800ea2c:	f001 f846 	bl	800fabc <USB_WritePMA>
 800ea30:	e319      	b.n	800f066 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800ea32:	1d3b      	adds	r3, r7, #4
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	463b      	mov	r3, r7
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	4413      	add	r3, r2
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea4c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800ea50:	1d3b      	adds	r3, r7, #4
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	463b      	mov	r3, r7
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	441a      	add	r2, r3
 800ea5e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800ea62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea6a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ea6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ea76:	463b      	mov	r3, r7
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6a1a      	ldr	r2, [r3, #32]
 800ea7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea80:	1ad2      	subs	r2, r2, r3
 800ea82:	463b      	mov	r3, r7
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ea88:	1d3b      	adds	r3, r7, #4
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	463b      	mov	r3, r7
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8162 	beq.w	800ed68 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eaa4:	1d3b      	adds	r3, r7, #4
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eaac:	463b      	mov	r3, r7
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	785b      	ldrb	r3, [r3, #1]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d164      	bne.n	800eb80 <USB_EPStartXfer+0x926>
 800eab6:	1d3b      	adds	r3, r7, #4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	67bb      	str	r3, [r7, #120]	; 0x78
 800eabc:	1d3b      	adds	r3, r7, #4
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	461a      	mov	r2, r3
 800eac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaca:	4413      	add	r3, r2
 800eacc:	67bb      	str	r3, [r7, #120]	; 0x78
 800eace:	463b      	mov	r3, r7
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	00da      	lsls	r2, r3, #3
 800ead6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead8:	4413      	add	r3, r2
 800eada:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eade:	677b      	str	r3, [r7, #116]	; 0x74
 800eae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d112      	bne.n	800eb0e <USB_EPStartXfer+0x8b4>
 800eae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaea:	881b      	ldrh	r3, [r3, #0]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaf6:	801a      	strh	r2, [r3, #0]
 800eaf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb0a:	801a      	strh	r2, [r3, #0]
 800eb0c:	e057      	b.n	800ebbe <USB_EPStartXfer+0x964>
 800eb0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb12:	2b3e      	cmp	r3, #62	; 0x3e
 800eb14:	d817      	bhi.n	800eb46 <USB_EPStartXfer+0x8ec>
 800eb16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb1a:	085b      	lsrs	r3, r3, #1
 800eb1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eb20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d004      	beq.n	800eb36 <USB_EPStartXfer+0x8dc>
 800eb2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eb30:	3301      	adds	r3, #1
 800eb32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eb36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	029b      	lsls	r3, r3, #10
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb42:	801a      	strh	r2, [r3, #0]
 800eb44:	e03b      	b.n	800ebbe <USB_EPStartXfer+0x964>
 800eb46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb4a:	095b      	lsrs	r3, r3, #5
 800eb4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eb50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eb54:	f003 031f 	and.w	r3, r3, #31
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d104      	bne.n	800eb66 <USB_EPStartXfer+0x90c>
 800eb5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eb60:	3b01      	subs	r3, #1
 800eb62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800eb66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	029b      	lsls	r3, r3, #10
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb7c:	801a      	strh	r2, [r3, #0]
 800eb7e:	e01e      	b.n	800ebbe <USB_EPStartXfer+0x964>
 800eb80:	463b      	mov	r3, r7
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	785b      	ldrb	r3, [r3, #1]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d119      	bne.n	800ebbe <USB_EPStartXfer+0x964>
 800eb8a:	1d3b      	adds	r3, r7, #4
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	461a      	mov	r2, r3
 800eb96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eba0:	463b      	mov	r3, r7
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	00da      	lsls	r2, r3, #3
 800eba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebac:	4413      	add	r3, r2
 800ebae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ebb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ebb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ebbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ebbe:	463b      	mov	r3, r7
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	895b      	ldrh	r3, [r3, #10]
 800ebc4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebc8:	463b      	mov	r3, r7
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	6959      	ldr	r1, [r3, #20]
 800ebce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ebd8:	1d38      	adds	r0, r7, #4
 800ebda:	6800      	ldr	r0, [r0, #0]
 800ebdc:	f000 ff6e 	bl	800fabc <USB_WritePMA>
          ep->xfer_buff += len;
 800ebe0:	463b      	mov	r3, r7
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	695a      	ldr	r2, [r3, #20]
 800ebe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebea:	441a      	add	r2, r3
 800ebec:	463b      	mov	r3, r7
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800ebf2:	463b      	mov	r3, r7
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6a1a      	ldr	r2, [r3, #32]
 800ebf8:	463b      	mov	r3, r7
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d909      	bls.n	800ec16 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800ec02:	463b      	mov	r3, r7
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	6a1a      	ldr	r2, [r3, #32]
 800ec08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec0c:	1ad2      	subs	r2, r2, r3
 800ec0e:	463b      	mov	r3, r7
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	621a      	str	r2, [r3, #32]
 800ec14:	e008      	b.n	800ec28 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800ec16:	463b      	mov	r3, r7
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800ec20:	463b      	mov	r3, r7
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2200      	movs	r2, #0
 800ec26:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800ec28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f000 821a 	beq.w	800f066 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ec32:	463b      	mov	r3, r7
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	785b      	ldrb	r3, [r3, #1]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d164      	bne.n	800ed06 <USB_EPStartXfer+0xaac>
 800ec3c:	1d3b      	adds	r3, r7, #4
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec42:	1d3b      	adds	r3, r7, #4
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec50:	4413      	add	r3, r2
 800ec52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec54:	463b      	mov	r3, r7
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	00da      	lsls	r2, r3, #3
 800ec5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec5e:	4413      	add	r3, r2
 800ec60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ec64:	667b      	str	r3, [r7, #100]	; 0x64
 800ec66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d112      	bne.n	800ec94 <USB_EPStartXfer+0xa3a>
 800ec6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec7c:	801a      	strh	r2, [r3, #0]
 800ec7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec80:	881b      	ldrh	r3, [r3, #0]
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec90:	801a      	strh	r2, [r3, #0]
 800ec92:	e057      	b.n	800ed44 <USB_EPStartXfer+0xaea>
 800ec94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec98:	2b3e      	cmp	r3, #62	; 0x3e
 800ec9a:	d817      	bhi.n	800eccc <USB_EPStartXfer+0xa72>
 800ec9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eca0:	085b      	lsrs	r3, r3, #1
 800eca2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800eca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d004      	beq.n	800ecbc <USB_EPStartXfer+0xa62>
 800ecb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ecbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	029b      	lsls	r3, r3, #10
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecc8:	801a      	strh	r2, [r3, #0]
 800ecca:	e03b      	b.n	800ed44 <USB_EPStartXfer+0xaea>
 800eccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecd0:	095b      	lsrs	r3, r3, #5
 800ecd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ecd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ecda:	f003 031f 	and.w	r3, r3, #31
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d104      	bne.n	800ecec <USB_EPStartXfer+0xa92>
 800ece2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece6:	3b01      	subs	r3, #1
 800ece8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ecec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	029b      	lsls	r3, r3, #10
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed02:	801a      	strh	r2, [r3, #0]
 800ed04:	e01e      	b.n	800ed44 <USB_EPStartXfer+0xaea>
 800ed06:	463b      	mov	r3, r7
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	785b      	ldrb	r3, [r3, #1]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d119      	bne.n	800ed44 <USB_EPStartXfer+0xaea>
 800ed10:	1d3b      	adds	r3, r7, #4
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	673b      	str	r3, [r7, #112]	; 0x70
 800ed16:	1d3b      	adds	r3, r7, #4
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	461a      	mov	r2, r3
 800ed22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed24:	4413      	add	r3, r2
 800ed26:	673b      	str	r3, [r7, #112]	; 0x70
 800ed28:	463b      	mov	r3, r7
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	00da      	lsls	r2, r3, #3
 800ed30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed32:	4413      	add	r3, r2
 800ed34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ed44:	463b      	mov	r3, r7
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed4e:	463b      	mov	r3, r7
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6959      	ldr	r1, [r3, #20]
 800ed54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ed5e:	1d38      	adds	r0, r7, #4
 800ed60:	6800      	ldr	r0, [r0, #0]
 800ed62:	f000 feab 	bl	800fabc <USB_WritePMA>
 800ed66:	e17e      	b.n	800f066 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ed68:	463b      	mov	r3, r7
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	785b      	ldrb	r3, [r3, #1]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d16f      	bne.n	800ee52 <USB_EPStartXfer+0xbf8>
 800ed72:	1d3b      	adds	r3, r7, #4
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ed7a:	1d3b      	adds	r3, r7, #4
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	461a      	mov	r2, r3
 800ed86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ed90:	463b      	mov	r3, r7
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	00da      	lsls	r2, r3, #3
 800ed98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eda2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eda6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d116      	bne.n	800eddc <USB_EPStartXfer+0xb82>
 800edae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800edba:	b29a      	uxth	r2, r3
 800edbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800edc0:	801a      	strh	r2, [r3, #0]
 800edc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	b29b      	uxth	r3, r3
 800edca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800edd8:	801a      	strh	r2, [r3, #0]
 800edda:	e05f      	b.n	800ee9c <USB_EPStartXfer+0xc42>
 800eddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ede0:	2b3e      	cmp	r3, #62	; 0x3e
 800ede2:	d818      	bhi.n	800ee16 <USB_EPStartXfer+0xbbc>
 800ede4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ede8:	085b      	lsrs	r3, r3, #1
 800edea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800edee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d004      	beq.n	800ee04 <USB_EPStartXfer+0xbaa>
 800edfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800edfe:	3301      	adds	r3, #1
 800ee00:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ee04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	029b      	lsls	r3, r3, #10
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee12:	801a      	strh	r2, [r3, #0]
 800ee14:	e042      	b.n	800ee9c <USB_EPStartXfer+0xc42>
 800ee16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee1a:	095b      	lsrs	r3, r3, #5
 800ee1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ee20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee24:	f003 031f 	and.w	r3, r3, #31
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d104      	bne.n	800ee36 <USB_EPStartXfer+0xbdc>
 800ee2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee30:	3b01      	subs	r3, #1
 800ee32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ee36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	029b      	lsls	r3, r3, #10
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee4e:	801a      	strh	r2, [r3, #0]
 800ee50:	e024      	b.n	800ee9c <USB_EPStartXfer+0xc42>
 800ee52:	463b      	mov	r3, r7
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	785b      	ldrb	r3, [r3, #1]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d11f      	bne.n	800ee9c <USB_EPStartXfer+0xc42>
 800ee5c:	1d3b      	adds	r3, r7, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ee64:	1d3b      	adds	r3, r7, #4
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	461a      	mov	r2, r3
 800ee70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee74:	4413      	add	r3, r2
 800ee76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ee7a:	463b      	mov	r3, r7
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	00da      	lsls	r2, r3, #3
 800ee82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee86:	4413      	add	r3, r2
 800ee88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ee90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee9a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	891b      	ldrh	r3, [r3, #8]
 800eea2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eea6:	463b      	mov	r3, r7
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	6959      	ldr	r1, [r3, #20]
 800eeac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800eeb6:	1d38      	adds	r0, r7, #4
 800eeb8:	6800      	ldr	r0, [r0, #0]
 800eeba:	f000 fdff 	bl	800fabc <USB_WritePMA>
          ep->xfer_buff += len;
 800eebe:	463b      	mov	r3, r7
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	695a      	ldr	r2, [r3, #20]
 800eec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eec8:	441a      	add	r2, r3
 800eeca:	463b      	mov	r3, r7
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800eed0:	463b      	mov	r3, r7
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	6a1a      	ldr	r2, [r3, #32]
 800eed6:	463b      	mov	r3, r7
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d909      	bls.n	800eef4 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800eee0:	463b      	mov	r3, r7
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6a1a      	ldr	r2, [r3, #32]
 800eee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800eeea:	1ad2      	subs	r2, r2, r3
 800eeec:	463b      	mov	r3, r7
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	621a      	str	r2, [r3, #32]
 800eef2:	e008      	b.n	800ef06 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800eef4:	463b      	mov	r3, r7
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800eefe:	463b      	mov	r3, r7
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2200      	movs	r2, #0
 800ef04:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800ef06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 80ab 	beq.w	800f066 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ef10:	1d3b      	adds	r3, r7, #4
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef18:	463b      	mov	r3, r7
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	785b      	ldrb	r3, [r3, #1]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d16f      	bne.n	800f002 <USB_EPStartXfer+0xda8>
 800ef22:	1d3b      	adds	r3, r7, #4
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ef2a:	1d3b      	adds	r3, r7, #4
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	461a      	mov	r2, r3
 800ef36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ef40:	463b      	mov	r3, r7
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	00da      	lsls	r2, r3, #3
 800ef48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ef56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d116      	bne.n	800ef8c <USB_EPStartXfer+0xd32>
 800ef5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef70:	801a      	strh	r2, [r3, #0]
 800ef72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef88:	801a      	strh	r2, [r3, #0]
 800ef8a:	e05b      	b.n	800f044 <USB_EPStartXfer+0xdea>
 800ef8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef90:	2b3e      	cmp	r3, #62	; 0x3e
 800ef92:	d818      	bhi.n	800efc6 <USB_EPStartXfer+0xd6c>
 800ef94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef98:	085b      	lsrs	r3, r3, #1
 800ef9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ef9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d004      	beq.n	800efb4 <USB_EPStartXfer+0xd5a>
 800efaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efae:	3301      	adds	r3, #1
 800efb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800efb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efb8:	b29b      	uxth	r3, r3
 800efba:	029b      	lsls	r3, r3, #10
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800efc2:	801a      	strh	r2, [r3, #0]
 800efc4:	e03e      	b.n	800f044 <USB_EPStartXfer+0xdea>
 800efc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efca:	095b      	lsrs	r3, r3, #5
 800efcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800efd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efd4:	f003 031f 	and.w	r3, r3, #31
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d104      	bne.n	800efe6 <USB_EPStartXfer+0xd8c>
 800efdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efe0:	3b01      	subs	r3, #1
 800efe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800efe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800efea:	b29b      	uxth	r3, r3
 800efec:	029b      	lsls	r3, r3, #10
 800efee:	b29b      	uxth	r3, r3
 800eff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eff8:	b29a      	uxth	r2, r3
 800effa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800effe:	801a      	strh	r2, [r3, #0]
 800f000:	e020      	b.n	800f044 <USB_EPStartXfer+0xdea>
 800f002:	463b      	mov	r3, r7
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d11b      	bne.n	800f044 <USB_EPStartXfer+0xdea>
 800f00c:	1d3b      	adds	r3, r7, #4
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f014:	b29b      	uxth	r3, r3
 800f016:	461a      	mov	r2, r3
 800f018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f01c:	4413      	add	r3, r2
 800f01e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f022:	463b      	mov	r3, r7
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	00da      	lsls	r2, r3, #3
 800f02a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f02e:	4413      	add	r3, r2
 800f030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f034:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f042:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f044:	463b      	mov	r3, r7
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	895b      	ldrh	r3, [r3, #10]
 800f04a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f04e:	463b      	mov	r3, r7
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6959      	ldr	r1, [r3, #20]
 800f054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f058:	b29b      	uxth	r3, r3
 800f05a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800f05e:	1d38      	adds	r0, r7, #4
 800f060:	6800      	ldr	r0, [r0, #0]
 800f062:	f000 fd2b 	bl	800fabc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f066:	1d3b      	adds	r3, r7, #4
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	463b      	mov	r3, r7
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	b29b      	uxth	r3, r3
 800f078:	f107 020a 	add.w	r2, r7, #10
 800f07c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f084:	8013      	strh	r3, [r2, #0]
 800f086:	f107 030a 	add.w	r3, r7, #10
 800f08a:	f107 020a 	add.w	r2, r7, #10
 800f08e:	8812      	ldrh	r2, [r2, #0]
 800f090:	f082 0210 	eor.w	r2, r2, #16
 800f094:	801a      	strh	r2, [r3, #0]
 800f096:	f107 030a 	add.w	r3, r7, #10
 800f09a:	f107 020a 	add.w	r2, r7, #10
 800f09e:	8812      	ldrh	r2, [r2, #0]
 800f0a0:	f082 0220 	eor.w	r2, r2, #32
 800f0a4:	801a      	strh	r2, [r3, #0]
 800f0a6:	1d3b      	adds	r3, r7, #4
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	463b      	mov	r3, r7
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	441a      	add	r2, r3
 800f0b4:	f107 030a 	add.w	r3, r7, #10
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	8013      	strh	r3, [r2, #0]
 800f0ce:	e3b5      	b.n	800f83c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f0d0:	463b      	mov	r3, r7
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	7b1b      	ldrb	r3, [r3, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f040 8090 	bne.w	800f1fc <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f0dc:	463b      	mov	r3, r7
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	699a      	ldr	r2, [r3, #24]
 800f0e2:	463b      	mov	r3, r7
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d90e      	bls.n	800f10a <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800f0ec:	463b      	mov	r3, r7
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800f0f6:	463b      	mov	r3, r7
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	699a      	ldr	r2, [r3, #24]
 800f0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f100:	1ad2      	subs	r2, r2, r3
 800f102:	463b      	mov	r3, r7
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	619a      	str	r2, [r3, #24]
 800f108:	e008      	b.n	800f11c <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800f10a:	463b      	mov	r3, r7
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800f114:	463b      	mov	r3, r7
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2200      	movs	r2, #0
 800f11a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f11c:	1d3b      	adds	r3, r7, #4
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f124:	1d3b      	adds	r3, r7, #4
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	461a      	mov	r2, r3
 800f130:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f134:	4413      	add	r3, r2
 800f136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f13a:	463b      	mov	r3, r7
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	00da      	lsls	r2, r3, #3
 800f142:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f146:	4413      	add	r3, r2
 800f148:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f14c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f154:	2b00      	cmp	r3, #0
 800f156:	d116      	bne.n	800f186 <USB_EPStartXfer+0xf2c>
 800f158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	b29b      	uxth	r3, r3
 800f160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f164:	b29a      	uxth	r2, r3
 800f166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f16a:	801a      	strh	r2, [r3, #0]
 800f16c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f170:	881b      	ldrh	r3, [r3, #0]
 800f172:	b29b      	uxth	r3, r3
 800f174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f182:	801a      	strh	r2, [r3, #0]
 800f184:	e32c      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f18a:	2b3e      	cmp	r3, #62	; 0x3e
 800f18c:	d818      	bhi.n	800f1c0 <USB_EPStartXfer+0xf66>
 800f18e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f192:	085b      	lsrs	r3, r3, #1
 800f194:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f19c:	f003 0301 	and.w	r3, r3, #1
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d004      	beq.n	800f1ae <USB_EPStartXfer+0xf54>
 800f1a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f1ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	029b      	lsls	r3, r3, #10
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1bc:	801a      	strh	r2, [r3, #0]
 800f1be:	e30f      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f1c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1c4:	095b      	lsrs	r3, r3, #5
 800f1c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f1ce:	f003 031f 	and.w	r3, r3, #31
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d104      	bne.n	800f1e0 <USB_EPStartXfer+0xf86>
 800f1d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f1e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	029b      	lsls	r3, r3, #10
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1f8:	801a      	strh	r2, [r3, #0]
 800f1fa:	e2f1      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f1fc:	463b      	mov	r3, r7
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	78db      	ldrb	r3, [r3, #3]
 800f202:	2b02      	cmp	r3, #2
 800f204:	f040 818f 	bne.w	800f526 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f208:	463b      	mov	r3, r7
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	785b      	ldrb	r3, [r3, #1]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d175      	bne.n	800f2fe <USB_EPStartXfer+0x10a4>
 800f212:	1d3b      	adds	r3, r7, #4
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f21a:	1d3b      	adds	r3, r7, #4
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f222:	b29b      	uxth	r3, r3
 800f224:	461a      	mov	r2, r3
 800f226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f22a:	4413      	add	r3, r2
 800f22c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f230:	463b      	mov	r3, r7
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	00da      	lsls	r2, r3, #3
 800f238:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f23c:	4413      	add	r3, r2
 800f23e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f246:	463b      	mov	r3, r7
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d116      	bne.n	800f27e <USB_EPStartXfer+0x1024>
 800f250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	b29b      	uxth	r3, r3
 800f258:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f262:	801a      	strh	r2, [r3, #0]
 800f264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f274:	b29a      	uxth	r2, r3
 800f276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f27a:	801a      	strh	r2, [r3, #0]
 800f27c:	e065      	b.n	800f34a <USB_EPStartXfer+0x10f0>
 800f27e:	463b      	mov	r3, r7
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	2b3e      	cmp	r3, #62	; 0x3e
 800f286:	d81a      	bhi.n	800f2be <USB_EPStartXfer+0x1064>
 800f288:	463b      	mov	r3, r7
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	085b      	lsrs	r3, r3, #1
 800f290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f294:	463b      	mov	r3, r7
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	f003 0301 	and.w	r3, r3, #1
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d004      	beq.n	800f2ac <USB_EPStartXfer+0x1052>
 800f2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	029b      	lsls	r3, r3, #10
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2ba:	801a      	strh	r2, [r3, #0]
 800f2bc:	e045      	b.n	800f34a <USB_EPStartXfer+0x10f0>
 800f2be:	463b      	mov	r3, r7
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	095b      	lsrs	r3, r3, #5
 800f2c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f2ca:	463b      	mov	r3, r7
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	f003 031f 	and.w	r3, r3, #31
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d104      	bne.n	800f2e2 <USB_EPStartXfer+0x1088>
 800f2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	029b      	lsls	r3, r3, #10
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2fa:	801a      	strh	r2, [r3, #0]
 800f2fc:	e025      	b.n	800f34a <USB_EPStartXfer+0x10f0>
 800f2fe:	463b      	mov	r3, r7
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	785b      	ldrb	r3, [r3, #1]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d120      	bne.n	800f34a <USB_EPStartXfer+0x10f0>
 800f308:	1d3b      	adds	r3, r7, #4
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f310:	1d3b      	adds	r3, r7, #4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f318:	b29b      	uxth	r3, r3
 800f31a:	461a      	mov	r2, r3
 800f31c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f320:	4413      	add	r3, r2
 800f322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f326:	463b      	mov	r3, r7
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	00da      	lsls	r2, r3, #3
 800f32e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f332:	4413      	add	r3, r2
 800f334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f33c:	463b      	mov	r3, r7
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	b29a      	uxth	r2, r3
 800f344:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f348:	801a      	strh	r2, [r3, #0]
 800f34a:	1d3b      	adds	r3, r7, #4
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f352:	463b      	mov	r3, r7
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d175      	bne.n	800f448 <USB_EPStartXfer+0x11ee>
 800f35c:	1d3b      	adds	r3, r7, #4
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f364:	1d3b      	adds	r3, r7, #4
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	461a      	mov	r2, r3
 800f370:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f374:	4413      	add	r3, r2
 800f376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f37a:	463b      	mov	r3, r7
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	00da      	lsls	r2, r3, #3
 800f382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f386:	4413      	add	r3, r2
 800f388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f38c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f390:	463b      	mov	r3, r7
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d116      	bne.n	800f3c8 <USB_EPStartXfer+0x116e>
 800f39a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3ac:	801a      	strh	r2, [r3, #0]
 800f3ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f3c4:	801a      	strh	r2, [r3, #0]
 800f3c6:	e061      	b.n	800f48c <USB_EPStartXfer+0x1232>
 800f3c8:	463b      	mov	r3, r7
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	2b3e      	cmp	r3, #62	; 0x3e
 800f3d0:	d81a      	bhi.n	800f408 <USB_EPStartXfer+0x11ae>
 800f3d2:	463b      	mov	r3, r7
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	085b      	lsrs	r3, r3, #1
 800f3da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f3de:	463b      	mov	r3, r7
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	f003 0301 	and.w	r3, r3, #1
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d004      	beq.n	800f3f6 <USB_EPStartXfer+0x119c>
 800f3ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f3f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	029b      	lsls	r3, r3, #10
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f404:	801a      	strh	r2, [r3, #0]
 800f406:	e041      	b.n	800f48c <USB_EPStartXfer+0x1232>
 800f408:	463b      	mov	r3, r7
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	095b      	lsrs	r3, r3, #5
 800f410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f414:	463b      	mov	r3, r7
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	f003 031f 	and.w	r3, r3, #31
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d104      	bne.n	800f42c <USB_EPStartXfer+0x11d2>
 800f422:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f426:	3b01      	subs	r3, #1
 800f428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f42c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f430:	b29b      	uxth	r3, r3
 800f432:	029b      	lsls	r3, r3, #10
 800f434:	b29b      	uxth	r3, r3
 800f436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f43e:	b29a      	uxth	r2, r3
 800f440:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f444:	801a      	strh	r2, [r3, #0]
 800f446:	e021      	b.n	800f48c <USB_EPStartXfer+0x1232>
 800f448:	463b      	mov	r3, r7
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	785b      	ldrb	r3, [r3, #1]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d11c      	bne.n	800f48c <USB_EPStartXfer+0x1232>
 800f452:	1d3b      	adds	r3, r7, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	461a      	mov	r2, r3
 800f45e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f462:	4413      	add	r3, r2
 800f464:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f468:	463b      	mov	r3, r7
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	00da      	lsls	r2, r3, #3
 800f470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f474:	4413      	add	r3, r2
 800f476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f47a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f47e:	463b      	mov	r3, r7
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	b29a      	uxth	r2, r3
 800f486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f48a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f48c:	463b      	mov	r3, r7
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	2b00      	cmp	r3, #0
 800f494:	f000 81a4 	beq.w	800f7e0 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f498:	1d3b      	adds	r3, r7, #4
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	463b      	mov	r3, r7
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d005      	beq.n	800f4c4 <USB_EPStartXfer+0x126a>
 800f4b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d10d      	bne.n	800f4e0 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f4c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f4c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 8187 	bne.w	800f7e0 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f4d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800f4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f040 8180 	bne.w	800f7e0 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800f4e0:	1d3b      	adds	r3, r7, #4
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	463b      	mov	r3, r7
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800f4fe:	1d3b      	adds	r3, r7, #4
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	463b      	mov	r3, r7
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	441a      	add	r2, r3
 800f50c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800f510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f51c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f520:	b29b      	uxth	r3, r3
 800f522:	8013      	strh	r3, [r2, #0]
 800f524:	e15c      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f526:	463b      	mov	r3, r7
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	78db      	ldrb	r3, [r3, #3]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	f040 8155 	bne.w	800f7dc <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f532:	463b      	mov	r3, r7
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	699a      	ldr	r2, [r3, #24]
 800f538:	463b      	mov	r3, r7
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d90e      	bls.n	800f560 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800f542:	463b      	mov	r3, r7
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	691b      	ldr	r3, [r3, #16]
 800f548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800f54c:	463b      	mov	r3, r7
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	699a      	ldr	r2, [r3, #24]
 800f552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f556:	1ad2      	subs	r2, r2, r3
 800f558:	463b      	mov	r3, r7
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	619a      	str	r2, [r3, #24]
 800f55e:	e008      	b.n	800f572 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800f560:	463b      	mov	r3, r7
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	699b      	ldr	r3, [r3, #24]
 800f566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800f56a:	463b      	mov	r3, r7
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2200      	movs	r2, #0
 800f570:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f572:	463b      	mov	r3, r7
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	785b      	ldrb	r3, [r3, #1]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d16f      	bne.n	800f65c <USB_EPStartXfer+0x1402>
 800f57c:	1d3b      	adds	r3, r7, #4
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f584:	1d3b      	adds	r3, r7, #4
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	461a      	mov	r2, r3
 800f590:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f594:	4413      	add	r3, r2
 800f596:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f59a:	463b      	mov	r3, r7
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	00da      	lsls	r2, r3, #3
 800f5a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f5a6:	4413      	add	r3, r2
 800f5a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f5ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d116      	bne.n	800f5e6 <USB_EPStartXfer+0x138c>
 800f5b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5bc:	881b      	ldrh	r3, [r3, #0]
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5ca:	801a      	strh	r2, [r3, #0]
 800f5cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f5e2:	801a      	strh	r2, [r3, #0]
 800f5e4:	e05f      	b.n	800f6a6 <USB_EPStartXfer+0x144c>
 800f5e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5ea:	2b3e      	cmp	r3, #62	; 0x3e
 800f5ec:	d818      	bhi.n	800f620 <USB_EPStartXfer+0x13c6>
 800f5ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5f2:	085b      	lsrs	r3, r3, #1
 800f5f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f5f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d004      	beq.n	800f60e <USB_EPStartXfer+0x13b4>
 800f604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f608:	3301      	adds	r3, #1
 800f60a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f612:	b29b      	uxth	r3, r3
 800f614:	029b      	lsls	r3, r3, #10
 800f616:	b29a      	uxth	r2, r3
 800f618:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f61c:	801a      	strh	r2, [r3, #0]
 800f61e:	e042      	b.n	800f6a6 <USB_EPStartXfer+0x144c>
 800f620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f624:	095b      	lsrs	r3, r3, #5
 800f626:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f62a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f62e:	f003 031f 	and.w	r3, r3, #31
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <USB_EPStartXfer+0x13e6>
 800f636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f63a:	3b01      	subs	r3, #1
 800f63c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f644:	b29b      	uxth	r3, r3
 800f646:	029b      	lsls	r3, r3, #10
 800f648:	b29b      	uxth	r3, r3
 800f64a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f64e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f652:	b29a      	uxth	r2, r3
 800f654:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f658:	801a      	strh	r2, [r3, #0]
 800f65a:	e024      	b.n	800f6a6 <USB_EPStartXfer+0x144c>
 800f65c:	463b      	mov	r3, r7
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	2b01      	cmp	r3, #1
 800f664:	d11f      	bne.n	800f6a6 <USB_EPStartXfer+0x144c>
 800f666:	1d3b      	adds	r3, r7, #4
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f66e:	1d3b      	adds	r3, r7, #4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f676:	b29b      	uxth	r3, r3
 800f678:	461a      	mov	r2, r3
 800f67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f67e:	4413      	add	r3, r2
 800f680:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f684:	463b      	mov	r3, r7
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	00da      	lsls	r2, r3, #3
 800f68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f690:	4413      	add	r3, r2
 800f692:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f696:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f69a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f6a4:	801a      	strh	r2, [r3, #0]
 800f6a6:	1d3b      	adds	r3, r7, #4
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f6ae:	463b      	mov	r3, r7
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	785b      	ldrb	r3, [r3, #1]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d16f      	bne.n	800f798 <USB_EPStartXfer+0x153e>
 800f6b8:	1d3b      	adds	r3, r7, #4
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6c0:	1d3b      	adds	r3, r7, #4
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6d0:	4413      	add	r3, r2
 800f6d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6d6:	463b      	mov	r3, r7
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	00da      	lsls	r2, r3, #3
 800f6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f6e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f6ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d116      	bne.n	800f722 <USB_EPStartXfer+0x14c8>
 800f6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f700:	b29a      	uxth	r2, r3
 800f702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f706:	801a      	strh	r2, [r3, #0]
 800f708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f718:	b29a      	uxth	r2, r3
 800f71a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f71e:	801a      	strh	r2, [r3, #0]
 800f720:	e05e      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f726:	2b3e      	cmp	r3, #62	; 0x3e
 800f728:	d818      	bhi.n	800f75c <USB_EPStartXfer+0x1502>
 800f72a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f72e:	085b      	lsrs	r3, r3, #1
 800f730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f738:	f003 0301 	and.w	r3, r3, #1
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d004      	beq.n	800f74a <USB_EPStartXfer+0x14f0>
 800f740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f744:	3301      	adds	r3, #1
 800f746:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f74a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f74e:	b29b      	uxth	r3, r3
 800f750:	029b      	lsls	r3, r3, #10
 800f752:	b29a      	uxth	r2, r3
 800f754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f758:	801a      	strh	r2, [r3, #0]
 800f75a:	e041      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f75c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f760:	095b      	lsrs	r3, r3, #5
 800f762:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f76a:	f003 031f 	and.w	r3, r3, #31
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d104      	bne.n	800f77c <USB_EPStartXfer+0x1522>
 800f772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f776:	3b01      	subs	r3, #1
 800f778:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f77c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f780:	b29b      	uxth	r3, r3
 800f782:	029b      	lsls	r3, r3, #10
 800f784:	b29b      	uxth	r3, r3
 800f786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f78a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f78e:	b29a      	uxth	r2, r3
 800f790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f794:	801a      	strh	r2, [r3, #0]
 800f796:	e023      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f798:	463b      	mov	r3, r7
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	785b      	ldrb	r3, [r3, #1]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d11e      	bne.n	800f7e0 <USB_EPStartXfer+0x1586>
 800f7a2:	1d3b      	adds	r3, r7, #4
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f7b8:	463b      	mov	r3, r7
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	00da      	lsls	r2, r3, #3
 800f7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7c4:	4413      	add	r3, r2
 800f7c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f7ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f7ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7d8:	801a      	strh	r2, [r3, #0]
 800f7da:	e001      	b.n	800f7e0 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e02e      	b.n	800f83e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f7e0:	1d3b      	adds	r3, r7, #4
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	463b      	mov	r3, r7
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	4413      	add	r3, r2
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800f7fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f802:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f806:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800f80a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f80e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f812:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800f816:	1d3b      	adds	r3, r7, #4
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	463b      	mov	r3, r7
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	441a      	add	r2, r3
 800f824:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f82c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f838:	b29b      	uxth	r3, r3
 800f83a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f83c:	2300      	movs	r3, #0
}
 800f83e:	4618      	mov	r0, r3
 800f840:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	785b      	ldrb	r3, [r3, #1]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d020      	beq.n	800f89c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	4413      	add	r3, r2
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	b29b      	uxth	r3, r3
 800f868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f86c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f870:	81bb      	strh	r3, [r7, #12]
 800f872:	89bb      	ldrh	r3, [r7, #12]
 800f874:	f083 0310 	eor.w	r3, r3, #16
 800f878:	81bb      	strh	r3, [r7, #12]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	441a      	add	r2, r3
 800f884:	89bb      	ldrh	r3, [r7, #12]
 800f886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f88a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f88e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f896:	b29b      	uxth	r3, r3
 800f898:	8013      	strh	r3, [r2, #0]
 800f89a:	e01f      	b.n	800f8dc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4413      	add	r3, r2
 800f8a6:	881b      	ldrh	r3, [r3, #0]
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8b2:	81fb      	strh	r3, [r7, #14]
 800f8b4:	89fb      	ldrh	r3, [r7, #14]
 800f8b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f8ba:	81fb      	strh	r3, [r7, #14]
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	441a      	add	r2, r3
 800f8c6:	89fb      	ldrh	r3, [r7, #14]
 800f8c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3714      	adds	r7, #20
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b087      	sub	sp, #28
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	7b1b      	ldrb	r3, [r3, #12]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f040 809d 	bne.w	800fa38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	785b      	ldrb	r3, [r3, #1]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d04c      	beq.n	800f9a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	4413      	add	r3, r2
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	823b      	strh	r3, [r7, #16]
 800f914:	8a3b      	ldrh	r3, [r7, #16]
 800f916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d01b      	beq.n	800f956 <USB_EPClearStall+0x6c>
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f934:	81fb      	strh	r3, [r7, #14]
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	441a      	add	r2, r3
 800f940:	89fb      	ldrh	r3, [r7, #14]
 800f942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f94a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f94e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f952:	b29b      	uxth	r3, r3
 800f954:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	78db      	ldrb	r3, [r3, #3]
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d06c      	beq.n	800fa38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4413      	add	r3, r2
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f974:	81bb      	strh	r3, [r7, #12]
 800f976:	89bb      	ldrh	r3, [r7, #12]
 800f978:	f083 0320 	eor.w	r3, r3, #32
 800f97c:	81bb      	strh	r3, [r7, #12]
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	441a      	add	r2, r3
 800f988:	89bb      	ldrh	r3, [r7, #12]
 800f98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	8013      	strh	r3, [r2, #0]
 800f99e:	e04b      	b.n	800fa38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4413      	add	r3, r2
 800f9aa:	881b      	ldrh	r3, [r3, #0]
 800f9ac:	82fb      	strh	r3, [r7, #22]
 800f9ae:	8afb      	ldrh	r3, [r7, #22]
 800f9b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d01b      	beq.n	800f9f0 <USB_EPClearStall+0x106>
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ce:	82bb      	strh	r3, [r7, #20]
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	441a      	add	r2, r3
 800f9da:	8abb      	ldrh	r3, [r7, #20]
 800f9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	881b      	ldrh	r3, [r3, #0]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa06:	827b      	strh	r3, [r7, #18]
 800fa08:	8a7b      	ldrh	r3, [r7, #18]
 800fa0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa0e:	827b      	strh	r3, [r7, #18]
 800fa10:	8a7b      	ldrh	r3, [r7, #18]
 800fa12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fa16:	827b      	strh	r3, [r7, #18]
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	441a      	add	r2, r3
 800fa22:	8a7b      	ldrh	r3, [r7, #18]
 800fa24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	371c      	adds	r7, #28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fa46:	b480      	push	{r7}
 800fa48:	b083      	sub	sp, #12
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	460b      	mov	r3, r1
 800fa50:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fa52:	78fb      	ldrb	r3, [r7, #3]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d103      	bne.n	800fa60 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2280      	movs	r2, #128	; 0x80
 800fa5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fa6e:	b480      	push	{r7}
 800fa70:	b083      	sub	sp, #12
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800faaa:	b29b      	uxth	r3, r3
 800faac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800faae:	68fb      	ldr	r3, [r7, #12]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b08d      	sub	sp, #52	; 0x34
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4611      	mov	r1, r2
 800fac8:	461a      	mov	r2, r3
 800faca:	460b      	mov	r3, r1
 800facc:	80fb      	strh	r3, [r7, #6]
 800face:	4613      	mov	r3, r2
 800fad0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fad2:	88bb      	ldrh	r3, [r7, #4]
 800fad4:	3301      	adds	r3, #1
 800fad6:	085b      	lsrs	r3, r3, #1
 800fad8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fae2:	88fa      	ldrh	r2, [r7, #6]
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	4413      	add	r3, r2
 800fae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800faec:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800faee:	6a3b      	ldr	r3, [r7, #32]
 800faf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faf2:	e01b      	b.n	800fb2c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafc:	3301      	adds	r3, #1
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	021b      	lsls	r3, r3, #8
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb18:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1c:	3302      	adds	r3, #2
 800fb1e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	3301      	adds	r3, #1
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	3b01      	subs	r3, #1
 800fb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1e0      	bne.n	800faf4 <USB_WritePMA+0x38>
  }
}
 800fb32:	bf00      	nop
 800fb34:	bf00      	nop
 800fb36:	3734      	adds	r7, #52	; 0x34
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b08b      	sub	sp, #44	; 0x2c
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	460b      	mov	r3, r1
 800fb50:	80fb      	strh	r3, [r7, #6]
 800fb52:	4613      	mov	r3, r2
 800fb54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fb56:	88bb      	ldrh	r3, [r7, #4]
 800fb58:	085b      	lsrs	r3, r3, #1
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fb66:	88fa      	ldrh	r2, [r7, #6]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb70:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	627b      	str	r3, [r7, #36]	; 0x24
 800fb76:	e018      	b.n	800fbaa <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800fb78:	6a3b      	ldr	r3, [r7, #32]
 800fb7a:	881b      	ldrh	r3, [r3, #0]
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fb80:	6a3b      	ldr	r3, [r7, #32]
 800fb82:	3302      	adds	r3, #2
 800fb84:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	69fb      	ldr	r3, [r7, #28]
 800fb8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	3301      	adds	r3, #1
 800fb92:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	0a1b      	lsrs	r3, r3, #8
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	3301      	adds	r3, #1
 800fba2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	3b01      	subs	r3, #1
 800fba8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d1e3      	bne.n	800fb78 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800fbb0:	88bb      	ldrh	r3, [r7, #4]
 800fbb2:	f003 0301 	and.w	r3, r3, #1
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d007      	beq.n	800fbcc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	b2da      	uxtb	r2, r3
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	701a      	strb	r2, [r3, #0]
  }
}
 800fbcc:	bf00      	nop
 800fbce:	372c      	adds	r7, #44	; 0x2c
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b084      	sub	sp, #16
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fbe4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fbe8:	f002 f8e8 	bl	8011dbc <USBD_static_malloc>
 800fbec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	e066      	b.n	800fcce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	7c1b      	ldrb	r3, [r3, #16]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d119      	bne.n	800fc44 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fc10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc14:	2202      	movs	r2, #2
 800fc16:	2181      	movs	r1, #129	; 0x81
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f001 ff74 	bl	8011b06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fc24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc28:	2202      	movs	r2, #2
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f001 ff6a 	bl	8011b06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2201      	movs	r2, #1
 800fc36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2210      	movs	r2, #16
 800fc3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fc42:	e016      	b.n	800fc72 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fc44:	2340      	movs	r3, #64	; 0x40
 800fc46:	2202      	movs	r2, #2
 800fc48:	2181      	movs	r1, #129	; 0x81
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f001 ff5b 	bl	8011b06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fc56:	2340      	movs	r3, #64	; 0x40
 800fc58:	2202      	movs	r2, #2
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 ff52 	bl	8011b06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2201      	movs	r2, #1
 800fc66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2210      	movs	r2, #16
 800fc6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fc72:	2308      	movs	r3, #8
 800fc74:	2203      	movs	r2, #3
 800fc76:	2182      	movs	r1, #130	; 0x82
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f001 ff44 	bl	8011b06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	7c1b      	ldrb	r3, [r3, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d109      	bne.n	800fcbc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fcae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcb2:	2101      	movs	r1, #1
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f002 f816 	bl	8011ce6 <USBD_LL_PrepareReceive>
 800fcba:	e007      	b.n	800fccc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fcc2:	2340      	movs	r3, #64	; 0x40
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f002 f80d 	bl	8011ce6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fce2:	2181      	movs	r1, #129	; 0x81
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f001 ff34 	bl	8011b52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f001 ff2d 	bl	8011b52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fd00:	2182      	movs	r1, #130	; 0x82
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f001 ff25 	bl	8011b52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00e      	beq.n	800fd40 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd28:	685b      	ldr	r3, [r3, #4]
 800fd2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd32:	4618      	mov	r0, r3
 800fd34:	f002 f850 	bl	8011dd8 <USBD_static_free>
    pdev->pClassData = NULL;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b086      	sub	sp, #24
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd5c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fd62:	2300      	movs	r3, #0
 800fd64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d101      	bne.n	800fd74 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800fd70:	2303      	movs	r3, #3
 800fd72:	e0af      	b.n	800fed4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d03f      	beq.n	800fe00 <USBD_CDC_Setup+0xb4>
 800fd80:	2b20      	cmp	r3, #32
 800fd82:	f040 809f 	bne.w	800fec4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	88db      	ldrh	r3, [r3, #6]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d02e      	beq.n	800fdec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	b25b      	sxtb	r3, r3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	da16      	bge.n	800fdc6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800fda4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	88d2      	ldrh	r2, [r2, #6]
 800fdaa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	88db      	ldrh	r3, [r3, #6]
 800fdb0:	2b07      	cmp	r3, #7
 800fdb2:	bf28      	it	cs
 800fdb4:	2307      	movcs	r3, #7
 800fdb6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	89fa      	ldrh	r2, [r7, #14]
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f001 facf 	bl	8011362 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800fdc4:	e085      	b.n	800fed2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	785a      	ldrb	r2, [r3, #1]
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	88db      	ldrh	r3, [r3, #6]
 800fdd4:	b2da      	uxtb	r2, r3
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fddc:	6939      	ldr	r1, [r7, #16]
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	88db      	ldrh	r3, [r3, #6]
 800fde2:	461a      	mov	r2, r3
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f001 fae8 	bl	80113ba <USBD_CtlPrepareRx>
      break;
 800fdea:	e072      	b.n	800fed2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	7850      	ldrb	r0, [r2, #1]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	4798      	blx	r3
      break;
 800fdfe:	e068      	b.n	800fed2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	785b      	ldrb	r3, [r3, #1]
 800fe04:	2b0b      	cmp	r3, #11
 800fe06:	d852      	bhi.n	800feae <USBD_CDC_Setup+0x162>
 800fe08:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <USBD_CDC_Setup+0xc4>)
 800fe0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0e:	bf00      	nop
 800fe10:	0800fe41 	.word	0x0800fe41
 800fe14:	0800febd 	.word	0x0800febd
 800fe18:	0800feaf 	.word	0x0800feaf
 800fe1c:	0800feaf 	.word	0x0800feaf
 800fe20:	0800feaf 	.word	0x0800feaf
 800fe24:	0800feaf 	.word	0x0800feaf
 800fe28:	0800feaf 	.word	0x0800feaf
 800fe2c:	0800feaf 	.word	0x0800feaf
 800fe30:	0800feaf 	.word	0x0800feaf
 800fe34:	0800feaf 	.word	0x0800feaf
 800fe38:	0800fe6b 	.word	0x0800fe6b
 800fe3c:	0800fe95 	.word	0x0800fe95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	2b03      	cmp	r3, #3
 800fe4a:	d107      	bne.n	800fe5c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fe4c:	f107 030a 	add.w	r3, r7, #10
 800fe50:	2202      	movs	r2, #2
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 fa84 	bl	8011362 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fe5a:	e032      	b.n	800fec2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f001 fa0e 	bl	8011280 <USBD_CtlError>
            ret = USBD_FAIL;
 800fe64:	2303      	movs	r3, #3
 800fe66:	75fb      	strb	r3, [r7, #23]
          break;
 800fe68:	e02b      	b.n	800fec2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b03      	cmp	r3, #3
 800fe74:	d107      	bne.n	800fe86 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fe76:	f107 030d 	add.w	r3, r7, #13
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f001 fa6f 	bl	8011362 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fe84:	e01d      	b.n	800fec2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800fe86:	6839      	ldr	r1, [r7, #0]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f001 f9f9 	bl	8011280 <USBD_CtlError>
            ret = USBD_FAIL;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	75fb      	strb	r3, [r7, #23]
          break;
 800fe92:	e016      	b.n	800fec2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	2b03      	cmp	r3, #3
 800fe9e:	d00f      	beq.n	800fec0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f001 f9ec 	bl	8011280 <USBD_CtlError>
            ret = USBD_FAIL;
 800fea8:	2303      	movs	r3, #3
 800feaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800feac:	e008      	b.n	800fec0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f001 f9e5 	bl	8011280 <USBD_CtlError>
          ret = USBD_FAIL;
 800feb6:	2303      	movs	r3, #3
 800feb8:	75fb      	strb	r3, [r7, #23]
          break;
 800feba:	e002      	b.n	800fec2 <USBD_CDC_Setup+0x176>
          break;
 800febc:	bf00      	nop
 800febe:	e008      	b.n	800fed2 <USBD_CDC_Setup+0x186>
          break;
 800fec0:	bf00      	nop
      }
      break;
 800fec2:	e006      	b.n	800fed2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800fec4:	6839      	ldr	r1, [r7, #0]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f001 f9da 	bl	8011280 <USBD_CtlError>
      ret = USBD_FAIL;
 800fecc:	2303      	movs	r3, #3
 800fece:	75fb      	strb	r3, [r7, #23]
      break;
 800fed0:	bf00      	nop
  }

  return (uint8_t)ret;
 800fed2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3718      	adds	r7, #24
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	460b      	mov	r3, r1
 800fee6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800feee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d101      	bne.n	800fefe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fefa:	2303      	movs	r3, #3
 800fefc:	e04f      	b.n	800ff9e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ff06:	78fa      	ldrb	r2, [r7, #3]
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4413      	add	r3, r2
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	440b      	add	r3, r1
 800ff14:	3318      	adds	r3, #24
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d029      	beq.n	800ff70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ff1c:	78fa      	ldrb	r2, [r7, #3]
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	4613      	mov	r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	4413      	add	r3, r2
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	440b      	add	r3, r1
 800ff2a:	3318      	adds	r3, #24
 800ff2c:	681a      	ldr	r2, [r3, #0]
 800ff2e:	78f9      	ldrb	r1, [r7, #3]
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	460b      	mov	r3, r1
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	440b      	add	r3, r1
 800ff38:	00db      	lsls	r3, r3, #3
 800ff3a:	4403      	add	r3, r0
 800ff3c:	3338      	adds	r3, #56	; 0x38
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	fbb2 f1f3 	udiv	r1, r2, r3
 800ff44:	fb03 f301 	mul.w	r3, r3, r1
 800ff48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d110      	bne.n	800ff70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ff4e:	78fa      	ldrb	r2, [r7, #3]
 800ff50:	6879      	ldr	r1, [r7, #4]
 800ff52:	4613      	mov	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4413      	add	r3, r2
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	440b      	add	r3, r1
 800ff5c:	3318      	adds	r3, #24
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ff62:	78f9      	ldrb	r1, [r7, #3]
 800ff64:	2300      	movs	r3, #0
 800ff66:	2200      	movs	r2, #0
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f001 fe9b 	bl	8011ca4 <USBD_LL_Transmit>
 800ff6e:	e015      	b.n	800ff9c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00b      	beq.n	800ff9c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ff98:	78fa      	ldrb	r2, [r7, #3]
 800ff9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b084      	sub	sp, #16
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	460b      	mov	r3, r1
 800ffb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e015      	b.n	800fff4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ffc8:	78fb      	ldrb	r3, [r7, #3]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f001 feab 	bl	8011d28 <USBD_LL_GetRxDataSize>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ffee:	4611      	mov	r1, r2
 800fff0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801000a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8010012:	2303      	movs	r3, #3
 8010014:	e01b      	b.n	801004e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801001c:	2b00      	cmp	r3, #0
 801001e:	d015      	beq.n	801004c <USBD_CDC_EP0_RxReady+0x50>
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010026:	2bff      	cmp	r3, #255	; 0xff
 8010028:	d010      	beq.n	801004c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010038:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010040:	b292      	uxth	r2, r2
 8010042:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	22ff      	movs	r2, #255	; 0xff
 8010048:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2243      	movs	r2, #67	; 0x43
 8010064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010066:	4b03      	ldr	r3, [pc, #12]	; (8010074 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010068:	4618      	mov	r0, r3
 801006a:	370c      	adds	r7, #12
 801006c:	46bd      	mov	sp, r7
 801006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010072:	4770      	bx	lr
 8010074:	200000ac 	.word	0x200000ac

08010078 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2243      	movs	r2, #67	; 0x43
 8010084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010086:	4b03      	ldr	r3, [pc, #12]	; (8010094 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010088:	4618      	mov	r0, r3
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	20000068 	.word	0x20000068

08010098 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2243      	movs	r2, #67	; 0x43
 80100a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80100a6:	4b03      	ldr	r3, [pc, #12]	; (80100b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	200000f0 	.word	0x200000f0

080100b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	220a      	movs	r2, #10
 80100c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80100c6:	4b03      	ldr	r3, [pc, #12]	; (80100d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr
 80100d4:	20000024 	.word	0x20000024

080100d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d101      	bne.n	80100ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80100e8:	2303      	movs	r3, #3
 80100ea:	e004      	b.n	80100f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010102:	b480      	push	{r7}
 8010104:	b087      	sub	sp, #28
 8010106:	af00      	add	r7, sp, #0
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010114:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d101      	bne.n	8010120 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801011c:	2303      	movs	r3, #3
 801011e:	e008      	b.n	8010132 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010130:	2300      	movs	r3, #0
}
 8010132:	4618      	mov	r0, r3
 8010134:	371c      	adds	r7, #28
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801013e:	b480      	push	{r7}
 8010140:	b085      	sub	sp, #20
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801014e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010156:	2303      	movs	r3, #3
 8010158:	e004      	b.n	8010164 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3714      	adds	r7, #20
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801017e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010180:	2301      	movs	r3, #1
 8010182:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801018a:	2b00      	cmp	r3, #0
 801018c:	d101      	bne.n	8010192 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801018e:	2303      	movs	r3, #3
 8010190:	e01a      	b.n	80101c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010198:	2b00      	cmp	r3, #0
 801019a:	d114      	bne.n	80101c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2201      	movs	r2, #1
 80101a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80101ba:	2181      	movs	r1, #129	; 0x81
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f001 fd71 	bl	8011ca4 <USBD_LL_Transmit>

    ret = USBD_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80101ea:	2303      	movs	r3, #3
 80101ec:	e016      	b.n	801021c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	7c1b      	ldrb	r3, [r3, #16]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d109      	bne.n	801020a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80101fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010200:	2101      	movs	r1, #1
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f001 fd6f 	bl	8011ce6 <USBD_LL_PrepareReceive>
 8010208:	e007      	b.n	801021a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010210:	2340      	movs	r3, #64	; 0x40
 8010212:	2101      	movs	r1, #1
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f001 fd66 	bl	8011ce6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b086      	sub	sp, #24
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	4613      	mov	r3, r2
 8010230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d101      	bne.n	801023c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010238:	2303      	movs	r3, #3
 801023a:	e01f      	b.n	801027c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2200      	movs	r2, #0
 8010248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2200      	movs	r2, #0
 8010250:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	68ba      	ldr	r2, [r7, #8]
 801025e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2201      	movs	r2, #1
 8010266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	79fa      	ldrb	r2, [r7, #7]
 801026e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010270:	68f8      	ldr	r0, [r7, #12]
 8010272:	f001 fbcd 	bl	8011a10 <USBD_LL_Init>
 8010276:	4603      	mov	r3, r0
 8010278:	75fb      	strb	r3, [r7, #23]

  return ret;
 801027a:	7dfb      	ldrb	r3, [r7, #23]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801028e:	2300      	movs	r3, #0
 8010290:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010298:	2303      	movs	r3, #3
 801029a:	e016      	b.n	80102ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d00b      	beq.n	80102c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b8:	f107 020e 	add.w	r2, r7, #14
 80102bc:	4610      	mov	r0, r2
 80102be:	4798      	blx	r3
 80102c0:	4602      	mov	r2, r0
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f001 fbf8 	bl	8011ad0 <USBD_LL_Start>
 80102e0:	4603      	mov	r3, r0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80102ea:	b480      	push	{r7}
 80102ec:	b083      	sub	sp, #12
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	460b      	mov	r3, r1
 801030a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801030c:	2303      	movs	r3, #3
 801030e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010316:	2b00      	cmp	r3, #0
 8010318:	d009      	beq.n	801032e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	78fa      	ldrb	r2, [r7, #3]
 8010324:	4611      	mov	r1, r2
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	4798      	blx	r3
 801032a:	4603      	mov	r3, r0
 801032c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801032e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801034a:	2b00      	cmp	r3, #0
 801034c:	d007      	beq.n	801035e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	78fa      	ldrb	r2, [r7, #3]
 8010358:	4611      	mov	r1, r2
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	4798      	blx	r3
  }

  return USBD_OK;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010378:	6839      	ldr	r1, [r7, #0]
 801037a:	4618      	mov	r0, r3
 801037c:	f000 ff46 	bl	801120c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801038e:	461a      	mov	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801039c:	f003 031f 	and.w	r3, r3, #31
 80103a0:	2b02      	cmp	r3, #2
 80103a2:	d01a      	beq.n	80103da <USBD_LL_SetupStage+0x72>
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	d822      	bhi.n	80103ee <USBD_LL_SetupStage+0x86>
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d002      	beq.n	80103b2 <USBD_LL_SetupStage+0x4a>
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d00a      	beq.n	80103c6 <USBD_LL_SetupStage+0x5e>
 80103b0:	e01d      	b.n	80103ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103b8:	4619      	mov	r1, r3
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 f9ee 	bl	801079c <USBD_StdDevReq>
 80103c0:	4603      	mov	r3, r0
 80103c2:	73fb      	strb	r3, [r7, #15]
      break;
 80103c4:	e020      	b.n	8010408 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fa52 	bl	8010878 <USBD_StdItfReq>
 80103d4:	4603      	mov	r3, r0
 80103d6:	73fb      	strb	r3, [r7, #15]
      break;
 80103d8:	e016      	b.n	8010408 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fa91 	bl	801090a <USBD_StdEPReq>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73fb      	strb	r3, [r7, #15]
      break;
 80103ec:	e00c      	b.n	8010408 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80103f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f001 fbc7 	bl	8011b90 <USBD_LL_StallEP>
 8010402:	4603      	mov	r3, r0
 8010404:	73fb      	strb	r3, [r7, #15]
      break;
 8010406:	bf00      	nop
  }

  return ret;
 8010408:	7bfb      	ldrb	r3, [r7, #15]
}
 801040a:	4618      	mov	r0, r3
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b086      	sub	sp, #24
 8010416:	af00      	add	r7, sp, #0
 8010418:	60f8      	str	r0, [r7, #12]
 801041a:	460b      	mov	r3, r1
 801041c:	607a      	str	r2, [r7, #4]
 801041e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010420:	7afb      	ldrb	r3, [r7, #11]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d138      	bne.n	8010498 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801042c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010434:	2b03      	cmp	r3, #3
 8010436:	d14a      	bne.n	80104ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	689a      	ldr	r2, [r3, #8]
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	429a      	cmp	r2, r3
 8010442:	d913      	bls.n	801046c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	689a      	ldr	r2, [r3, #8]
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	1ad2      	subs	r2, r2, r3
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	68da      	ldr	r2, [r3, #12]
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	4293      	cmp	r3, r2
 801045c:	bf28      	it	cs
 801045e:	4613      	movcs	r3, r2
 8010460:	461a      	mov	r2, r3
 8010462:	6879      	ldr	r1, [r7, #4]
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f000 ffc5 	bl	80113f4 <USBD_CtlContinueRx>
 801046a:	e030      	b.n	80104ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010472:	b2db      	uxtb	r3, r3
 8010474:	2b03      	cmp	r3, #3
 8010476:	d10b      	bne.n	8010490 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801047e:	691b      	ldr	r3, [r3, #16]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d005      	beq.n	8010490 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 ffc0 	bl	8011416 <USBD_CtlSendStatus>
 8010496:	e01a      	b.n	80104ce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	d114      	bne.n	80104ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104aa:	699b      	ldr	r3, [r3, #24]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00e      	beq.n	80104ce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104b6:	699b      	ldr	r3, [r3, #24]
 80104b8:	7afa      	ldrb	r2, [r7, #11]
 80104ba:	4611      	mov	r1, r2
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	4798      	blx	r3
 80104c0:	4603      	mov	r3, r0
 80104c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80104c4:	7dfb      	ldrb	r3, [r7, #23]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d001      	beq.n	80104ce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	e000      	b.n	80104d0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80104ce:	2300      	movs	r3, #0
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	460b      	mov	r3, r1
 80104e2:	607a      	str	r2, [r7, #4]
 80104e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80104e6:	7afb      	ldrb	r3, [r7, #11]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d16b      	bne.n	80105c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	3314      	adds	r3, #20
 80104f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80104f8:	2b02      	cmp	r3, #2
 80104fa:	d156      	bne.n	80105aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	689a      	ldr	r2, [r3, #8]
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	429a      	cmp	r2, r3
 8010506:	d914      	bls.n	8010532 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	689a      	ldr	r2, [r3, #8]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	1ad2      	subs	r2, r2, r3
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	689b      	ldr	r3, [r3, #8]
 801051a:	461a      	mov	r2, r3
 801051c:	6879      	ldr	r1, [r7, #4]
 801051e:	68f8      	ldr	r0, [r7, #12]
 8010520:	f000 ff3a 	bl	8011398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010524:	2300      	movs	r3, #0
 8010526:	2200      	movs	r2, #0
 8010528:	2100      	movs	r1, #0
 801052a:	68f8      	ldr	r0, [r7, #12]
 801052c:	f001 fbdb 	bl	8011ce6 <USBD_LL_PrepareReceive>
 8010530:	e03b      	b.n	80105aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	68da      	ldr	r2, [r3, #12]
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	429a      	cmp	r2, r3
 801053c:	d11c      	bne.n	8010578 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	685a      	ldr	r2, [r3, #4]
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010546:	429a      	cmp	r2, r3
 8010548:	d316      	bcc.n	8010578 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	685a      	ldr	r2, [r3, #4]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010554:	429a      	cmp	r2, r3
 8010556:	d20f      	bcs.n	8010578 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010558:	2200      	movs	r2, #0
 801055a:	2100      	movs	r1, #0
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f000 ff1b 	bl	8011398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2200      	movs	r2, #0
 8010566:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801056a:	2300      	movs	r3, #0
 801056c:	2200      	movs	r2, #0
 801056e:	2100      	movs	r1, #0
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f001 fbb8 	bl	8011ce6 <USBD_LL_PrepareReceive>
 8010576:	e018      	b.n	80105aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b03      	cmp	r3, #3
 8010582:	d10b      	bne.n	801059c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d005      	beq.n	801059c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801059c:	2180      	movs	r1, #128	; 0x80
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f001 faf6 	bl	8011b90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f000 ff49 	bl	801143c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d122      	bne.n	80105fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f7ff fe98 	bl	80102ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80105c2:	e01a      	b.n	80105fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	2b03      	cmp	r3, #3
 80105ce:	d114      	bne.n	80105fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105d6:	695b      	ldr	r3, [r3, #20]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00e      	beq.n	80105fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	7afa      	ldrb	r2, [r7, #11]
 80105e6:	4611      	mov	r1, r2
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	4798      	blx	r3
 80105ec:	4603      	mov	r3, r0
 80105ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80105f0:	7dfb      	ldrb	r3, [r7, #23]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80105f6:	7dfb      	ldrb	r3, [r7, #23]
 80105f8:	e000      	b.n	80105fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80105fa:	2300      	movs	r3, #0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3718      	adds	r7, #24
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2200      	movs	r2, #0
 8010626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010630:	2b00      	cmp	r3, #0
 8010632:	d101      	bne.n	8010638 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010634:	2303      	movs	r3, #3
 8010636:	e02f      	b.n	8010698 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801063e:	2b00      	cmp	r3, #0
 8010640:	d00f      	beq.n	8010662 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d009      	beq.n	8010662 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	6852      	ldr	r2, [r2, #4]
 801065a:	b2d2      	uxtb	r2, r2
 801065c:	4611      	mov	r1, r2
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010662:	2340      	movs	r3, #64	; 0x40
 8010664:	2200      	movs	r2, #0
 8010666:	2100      	movs	r1, #0
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f001 fa4c 	bl	8011b06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2201      	movs	r2, #1
 8010672:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2240      	movs	r2, #64	; 0x40
 801067a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801067e:	2340      	movs	r3, #64	; 0x40
 8010680:	2200      	movs	r2, #0
 8010682:	2180      	movs	r1, #128	; 0x80
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f001 fa3e 	bl	8011b06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2201      	movs	r2, #1
 801068e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2240      	movs	r2, #64	; 0x40
 8010694:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	460b      	mov	r3, r1
 80106aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	78fa      	ldrb	r2, [r7, #3]
 80106b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2204      	movs	r2, #4
 80106da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b04      	cmp	r3, #4
 80106fe:	d106      	bne.n	801070e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010706:	b2da      	uxtb	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	370c      	adds	r7, #12
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801072a:	2b00      	cmp	r3, #0
 801072c:	d101      	bne.n	8010732 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801072e:	2303      	movs	r3, #3
 8010730:	e012      	b.n	8010758 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b03      	cmp	r3, #3
 801073c:	d10b      	bne.n	8010756 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010744:	69db      	ldr	r3, [r3, #28]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d005      	beq.n	8010756 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010750:	69db      	ldr	r3, [r3, #28]
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010760:	b480      	push	{r7}
 8010762:	b087      	sub	sp, #28
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	3301      	adds	r3, #1
 8010776:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801077e:	8a3b      	ldrh	r3, [r7, #16]
 8010780:	021b      	lsls	r3, r3, #8
 8010782:	b21a      	sxth	r2, r3
 8010784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010788:	4313      	orrs	r3, r2
 801078a:	b21b      	sxth	r3, r3
 801078c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801078e:	89fb      	ldrh	r3, [r7, #14]
}
 8010790:	4618      	mov	r0, r3
 8010792:	371c      	adds	r7, #28
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107a6:	2300      	movs	r3, #0
 80107a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107b2:	2b40      	cmp	r3, #64	; 0x40
 80107b4:	d005      	beq.n	80107c2 <USBD_StdDevReq+0x26>
 80107b6:	2b40      	cmp	r3, #64	; 0x40
 80107b8:	d853      	bhi.n	8010862 <USBD_StdDevReq+0xc6>
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00b      	beq.n	80107d6 <USBD_StdDevReq+0x3a>
 80107be:	2b20      	cmp	r3, #32
 80107c0:	d14f      	bne.n	8010862 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	4798      	blx	r3
 80107d0:	4603      	mov	r3, r0
 80107d2:	73fb      	strb	r3, [r7, #15]
      break;
 80107d4:	e04a      	b.n	801086c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	785b      	ldrb	r3, [r3, #1]
 80107da:	2b09      	cmp	r3, #9
 80107dc:	d83b      	bhi.n	8010856 <USBD_StdDevReq+0xba>
 80107de:	a201      	add	r2, pc, #4	; (adr r2, 80107e4 <USBD_StdDevReq+0x48>)
 80107e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e4:	08010839 	.word	0x08010839
 80107e8:	0801084d 	.word	0x0801084d
 80107ec:	08010857 	.word	0x08010857
 80107f0:	08010843 	.word	0x08010843
 80107f4:	08010857 	.word	0x08010857
 80107f8:	08010817 	.word	0x08010817
 80107fc:	0801080d 	.word	0x0801080d
 8010800:	08010857 	.word	0x08010857
 8010804:	0801082f 	.word	0x0801082f
 8010808:	08010821 	.word	0x08010821
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801080c:	6839      	ldr	r1, [r7, #0]
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f9de 	bl	8010bd0 <USBD_GetDescriptor>
          break;
 8010814:	e024      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 fb6d 	bl	8010ef8 <USBD_SetAddress>
          break;
 801081e:	e01f      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fbac 	bl	8010f80 <USBD_SetConfig>
 8010828:	4603      	mov	r3, r0
 801082a:	73fb      	strb	r3, [r7, #15]
          break;
 801082c:	e018      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 fc4b 	bl	80110cc <USBD_GetConfig>
          break;
 8010836:	e013      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 fc7c 	bl	8011138 <USBD_GetStatus>
          break;
 8010840:	e00e      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fcab 	bl	80111a0 <USBD_SetFeature>
          break;
 801084a:	e009      	b.n	8010860 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801084c:	6839      	ldr	r1, [r7, #0]
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fcba 	bl	80111c8 <USBD_ClrFeature>
          break;
 8010854:	e004      	b.n	8010860 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fd11 	bl	8011280 <USBD_CtlError>
          break;
 801085e:	bf00      	nop
      }
      break;
 8010860:	e004      	b.n	801086c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fd0b 	bl	8011280 <USBD_CtlError>
      break;
 801086a:	bf00      	nop
  }

  return ret;
 801086c:	7bfb      	ldrb	r3, [r7, #15]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop

08010878 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801088e:	2b40      	cmp	r3, #64	; 0x40
 8010890:	d005      	beq.n	801089e <USBD_StdItfReq+0x26>
 8010892:	2b40      	cmp	r3, #64	; 0x40
 8010894:	d82f      	bhi.n	80108f6 <USBD_StdItfReq+0x7e>
 8010896:	2b00      	cmp	r3, #0
 8010898:	d001      	beq.n	801089e <USBD_StdItfReq+0x26>
 801089a:	2b20      	cmp	r3, #32
 801089c:	d12b      	bne.n	80108f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	3b01      	subs	r3, #1
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d81d      	bhi.n	80108e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	889b      	ldrh	r3, [r3, #4]
 80108b0:	b2db      	uxtb	r3, r3
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d813      	bhi.n	80108de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	4798      	blx	r3
 80108c4:	4603      	mov	r3, r0
 80108c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	88db      	ldrh	r3, [r3, #6]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d110      	bne.n	80108f2 <USBD_StdItfReq+0x7a>
 80108d0:	7bfb      	ldrb	r3, [r7, #15]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d10d      	bne.n	80108f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fd9d 	bl	8011416 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80108dc:	e009      	b.n	80108f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 fccd 	bl	8011280 <USBD_CtlError>
          break;
 80108e6:	e004      	b.n	80108f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80108e8:	6839      	ldr	r1, [r7, #0]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fcc8 	bl	8011280 <USBD_CtlError>
          break;
 80108f0:	e000      	b.n	80108f4 <USBD_StdItfReq+0x7c>
          break;
 80108f2:	bf00      	nop
      }
      break;
 80108f4:	e004      	b.n	8010900 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80108f6:	6839      	ldr	r1, [r7, #0]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 fcc1 	bl	8011280 <USBD_CtlError>
      break;
 80108fe:	bf00      	nop
  }

  return ret;
 8010900:	7bfb      	ldrb	r3, [r7, #15]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b084      	sub	sp, #16
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	889b      	ldrh	r3, [r3, #4]
 801091c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010926:	2b40      	cmp	r3, #64	; 0x40
 8010928:	d007      	beq.n	801093a <USBD_StdEPReq+0x30>
 801092a:	2b40      	cmp	r3, #64	; 0x40
 801092c:	f200 8145 	bhi.w	8010bba <USBD_StdEPReq+0x2b0>
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00c      	beq.n	801094e <USBD_StdEPReq+0x44>
 8010934:	2b20      	cmp	r3, #32
 8010936:	f040 8140 	bne.w	8010bba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	4798      	blx	r3
 8010948:	4603      	mov	r3, r0
 801094a:	73fb      	strb	r3, [r7, #15]
      break;
 801094c:	e13a      	b.n	8010bc4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	785b      	ldrb	r3, [r3, #1]
 8010952:	2b03      	cmp	r3, #3
 8010954:	d007      	beq.n	8010966 <USBD_StdEPReq+0x5c>
 8010956:	2b03      	cmp	r3, #3
 8010958:	f300 8129 	bgt.w	8010bae <USBD_StdEPReq+0x2a4>
 801095c:	2b00      	cmp	r3, #0
 801095e:	d07f      	beq.n	8010a60 <USBD_StdEPReq+0x156>
 8010960:	2b01      	cmp	r3, #1
 8010962:	d03c      	beq.n	80109de <USBD_StdEPReq+0xd4>
 8010964:	e123      	b.n	8010bae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801096c:	b2db      	uxtb	r3, r3
 801096e:	2b02      	cmp	r3, #2
 8010970:	d002      	beq.n	8010978 <USBD_StdEPReq+0x6e>
 8010972:	2b03      	cmp	r3, #3
 8010974:	d016      	beq.n	80109a4 <USBD_StdEPReq+0x9a>
 8010976:	e02c      	b.n	80109d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010978:	7bbb      	ldrb	r3, [r7, #14]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00d      	beq.n	801099a <USBD_StdEPReq+0x90>
 801097e:	7bbb      	ldrb	r3, [r7, #14]
 8010980:	2b80      	cmp	r3, #128	; 0x80
 8010982:	d00a      	beq.n	801099a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010984:	7bbb      	ldrb	r3, [r7, #14]
 8010986:	4619      	mov	r1, r3
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f001 f901 	bl	8011b90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801098e:	2180      	movs	r1, #128	; 0x80
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f001 f8fd 	bl	8011b90 <USBD_LL_StallEP>
 8010996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010998:	e020      	b.n	80109dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801099a:	6839      	ldr	r1, [r7, #0]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fc6f 	bl	8011280 <USBD_CtlError>
              break;
 80109a2:	e01b      	b.n	80109dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	885b      	ldrh	r3, [r3, #2]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d10e      	bne.n	80109ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80109ac:	7bbb      	ldrb	r3, [r7, #14]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00b      	beq.n	80109ca <USBD_StdEPReq+0xc0>
 80109b2:	7bbb      	ldrb	r3, [r7, #14]
 80109b4:	2b80      	cmp	r3, #128	; 0x80
 80109b6:	d008      	beq.n	80109ca <USBD_StdEPReq+0xc0>
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	88db      	ldrh	r3, [r3, #6]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d104      	bne.n	80109ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80109c0:	7bbb      	ldrb	r3, [r7, #14]
 80109c2:	4619      	mov	r1, r3
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f001 f8e3 	bl	8011b90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 fd23 	bl	8011416 <USBD_CtlSendStatus>

              break;
 80109d0:	e004      	b.n	80109dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80109d2:	6839      	ldr	r1, [r7, #0]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 fc53 	bl	8011280 <USBD_CtlError>
              break;
 80109da:	bf00      	nop
          }
          break;
 80109dc:	e0ec      	b.n	8010bb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b02      	cmp	r3, #2
 80109e8:	d002      	beq.n	80109f0 <USBD_StdEPReq+0xe6>
 80109ea:	2b03      	cmp	r3, #3
 80109ec:	d016      	beq.n	8010a1c <USBD_StdEPReq+0x112>
 80109ee:	e030      	b.n	8010a52 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00d      	beq.n	8010a12 <USBD_StdEPReq+0x108>
 80109f6:	7bbb      	ldrb	r3, [r7, #14]
 80109f8:	2b80      	cmp	r3, #128	; 0x80
 80109fa:	d00a      	beq.n	8010a12 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80109fc:	7bbb      	ldrb	r3, [r7, #14]
 80109fe:	4619      	mov	r1, r3
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f001 f8c5 	bl	8011b90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a06:	2180      	movs	r1, #128	; 0x80
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f001 f8c1 	bl	8011b90 <USBD_LL_StallEP>
 8010a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a10:	e025      	b.n	8010a5e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fc33 	bl	8011280 <USBD_CtlError>
              break;
 8010a1a:	e020      	b.n	8010a5e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	885b      	ldrh	r3, [r3, #2]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d11b      	bne.n	8010a5c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a24:	7bbb      	ldrb	r3, [r7, #14]
 8010a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d004      	beq.n	8010a38 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a2e:	7bbb      	ldrb	r3, [r7, #14]
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f001 f8cb 	bl	8011bce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 fcec 	bl	8011416 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	4798      	blx	r3
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010a50:	e004      	b.n	8010a5c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fc13 	bl	8011280 <USBD_CtlError>
              break;
 8010a5a:	e000      	b.n	8010a5e <USBD_StdEPReq+0x154>
              break;
 8010a5c:	bf00      	nop
          }
          break;
 8010a5e:	e0ab      	b.n	8010bb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d002      	beq.n	8010a72 <USBD_StdEPReq+0x168>
 8010a6c:	2b03      	cmp	r3, #3
 8010a6e:	d032      	beq.n	8010ad6 <USBD_StdEPReq+0x1cc>
 8010a70:	e097      	b.n	8010ba2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a72:	7bbb      	ldrb	r3, [r7, #14]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d007      	beq.n	8010a88 <USBD_StdEPReq+0x17e>
 8010a78:	7bbb      	ldrb	r3, [r7, #14]
 8010a7a:	2b80      	cmp	r3, #128	; 0x80
 8010a7c:	d004      	beq.n	8010a88 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fbfd 	bl	8011280 <USBD_CtlError>
                break;
 8010a86:	e091      	b.n	8010bac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	da0b      	bge.n	8010aa8 <USBD_StdEPReq+0x19e>
 8010a90:	7bbb      	ldrb	r3, [r7, #14]
 8010a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a96:	4613      	mov	r3, r2
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	4413      	add	r3, r2
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	3310      	adds	r3, #16
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	e00b      	b.n	8010ac0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010aa8:	7bbb      	ldrb	r3, [r7, #14]
 8010aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	4413      	add	r3, r2
 8010abe:	3304      	adds	r3, #4
 8010ac0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	2202      	movs	r2, #2
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fc47 	bl	8011362 <USBD_CtlSendData>
              break;
 8010ad4:	e06a      	b.n	8010bac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	da11      	bge.n	8010b02 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010ade:	7bbb      	ldrb	r3, [r7, #14]
 8010ae0:	f003 020f 	and.w	r2, r3, #15
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4413      	add	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	440b      	add	r3, r1
 8010af0:	3324      	adds	r3, #36	; 0x24
 8010af2:	881b      	ldrh	r3, [r3, #0]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d117      	bne.n	8010b28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010af8:	6839      	ldr	r1, [r7, #0]
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 fbc0 	bl	8011280 <USBD_CtlError>
                  break;
 8010b00:	e054      	b.n	8010bac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b02:	7bbb      	ldrb	r3, [r7, #14]
 8010b04:	f003 020f 	and.w	r2, r3, #15
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	4613      	mov	r3, r2
 8010b0c:	009b      	lsls	r3, r3, #2
 8010b0e:	4413      	add	r3, r2
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	440b      	add	r3, r1
 8010b14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b18:	881b      	ldrh	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d104      	bne.n	8010b28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 fbad 	bl	8011280 <USBD_CtlError>
                  break;
 8010b26:	e041      	b.n	8010bac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	da0b      	bge.n	8010b48 <USBD_StdEPReq+0x23e>
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
 8010b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b36:	4613      	mov	r3, r2
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	3310      	adds	r3, #16
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	4413      	add	r3, r2
 8010b44:	3304      	adds	r3, #4
 8010b46:	e00b      	b.n	8010b60 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b48:	7bbb      	ldrb	r3, [r7, #14]
 8010b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b4e:	4613      	mov	r3, r2
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	4413      	add	r3, r2
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	3304      	adds	r3, #4
 8010b60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d002      	beq.n	8010b6e <USBD_StdEPReq+0x264>
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	2b80      	cmp	r3, #128	; 0x80
 8010b6c:	d103      	bne.n	8010b76 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2200      	movs	r2, #0
 8010b72:	601a      	str	r2, [r3, #0]
 8010b74:	e00e      	b.n	8010b94 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010b76:	7bbb      	ldrb	r3, [r7, #14]
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f001 f846 	bl	8011c0c <USBD_LL_IsStallEP>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d003      	beq.n	8010b8e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	e002      	b.n	8010b94 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	2200      	movs	r2, #0
 8010b92:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2202      	movs	r2, #2
 8010b98:	4619      	mov	r1, r3
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fbe1 	bl	8011362 <USBD_CtlSendData>
              break;
 8010ba0:	e004      	b.n	8010bac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010ba2:	6839      	ldr	r1, [r7, #0]
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 fb6b 	bl	8011280 <USBD_CtlError>
              break;
 8010baa:	bf00      	nop
          }
          break;
 8010bac:	e004      	b.n	8010bb8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010bae:	6839      	ldr	r1, [r7, #0]
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 fb65 	bl	8011280 <USBD_CtlError>
          break;
 8010bb6:	bf00      	nop
      }
      break;
 8010bb8:	e004      	b.n	8010bc4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010bba:	6839      	ldr	r1, [r7, #0]
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fb5f 	bl	8011280 <USBD_CtlError>
      break;
 8010bc2:	bf00      	nop
  }

  return ret;
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
	...

08010bd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010be2:	2300      	movs	r3, #0
 8010be4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	885b      	ldrh	r3, [r3, #2]
 8010bea:	0a1b      	lsrs	r3, r3, #8
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	3b01      	subs	r3, #1
 8010bf0:	2b0e      	cmp	r3, #14
 8010bf2:	f200 8152 	bhi.w	8010e9a <USBD_GetDescriptor+0x2ca>
 8010bf6:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <USBD_GetDescriptor+0x2c>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c6d 	.word	0x08010c6d
 8010c00:	08010c85 	.word	0x08010c85
 8010c04:	08010cc5 	.word	0x08010cc5
 8010c08:	08010e9b 	.word	0x08010e9b
 8010c0c:	08010e9b 	.word	0x08010e9b
 8010c10:	08010e3b 	.word	0x08010e3b
 8010c14:	08010e67 	.word	0x08010e67
 8010c18:	08010e9b 	.word	0x08010e9b
 8010c1c:	08010e9b 	.word	0x08010e9b
 8010c20:	08010e9b 	.word	0x08010e9b
 8010c24:	08010e9b 	.word	0x08010e9b
 8010c28:	08010e9b 	.word	0x08010e9b
 8010c2c:	08010e9b 	.word	0x08010e9b
 8010c30:	08010e9b 	.word	0x08010e9b
 8010c34:	08010c39 	.word	0x08010c39
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c3e:	69db      	ldr	r3, [r3, #28]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00b      	beq.n	8010c5c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c4a:	69db      	ldr	r3, [r3, #28]
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	7c12      	ldrb	r2, [r2, #16]
 8010c50:	f107 0108 	add.w	r1, r7, #8
 8010c54:	4610      	mov	r0, r2
 8010c56:	4798      	blx	r3
 8010c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c5a:	e126      	b.n	8010eaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010c5c:	6839      	ldr	r1, [r7, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fb0e 	bl	8011280 <USBD_CtlError>
        err++;
 8010c64:	7afb      	ldrb	r3, [r7, #11]
 8010c66:	3301      	adds	r3, #1
 8010c68:	72fb      	strb	r3, [r7, #11]
      break;
 8010c6a:	e11e      	b.n	8010eaa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	7c12      	ldrb	r2, [r2, #16]
 8010c78:	f107 0108 	add.w	r1, r7, #8
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	4798      	blx	r3
 8010c80:	60f8      	str	r0, [r7, #12]
      break;
 8010c82:	e112      	b.n	8010eaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7c1b      	ldrb	r3, [r3, #16]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10d      	bne.n	8010ca8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c94:	f107 0208 	add.w	r2, r7, #8
 8010c98:	4610      	mov	r0, r2
 8010c9a:	4798      	blx	r3
 8010c9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010ca6:	e100      	b.n	8010eaa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb0:	f107 0208 	add.w	r2, r7, #8
 8010cb4:	4610      	mov	r0, r2
 8010cb6:	4798      	blx	r3
 8010cb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	2202      	movs	r2, #2
 8010cc0:	701a      	strb	r2, [r3, #0]
      break;
 8010cc2:	e0f2      	b.n	8010eaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	885b      	ldrh	r3, [r3, #2]
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b05      	cmp	r3, #5
 8010ccc:	f200 80ac 	bhi.w	8010e28 <USBD_GetDescriptor+0x258>
 8010cd0:	a201      	add	r2, pc, #4	; (adr r2, 8010cd8 <USBD_GetDescriptor+0x108>)
 8010cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd6:	bf00      	nop
 8010cd8:	08010cf1 	.word	0x08010cf1
 8010cdc:	08010d25 	.word	0x08010d25
 8010ce0:	08010d59 	.word	0x08010d59
 8010ce4:	08010d8d 	.word	0x08010d8d
 8010ce8:	08010dc1 	.word	0x08010dc1
 8010cec:	08010df5 	.word	0x08010df5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00b      	beq.n	8010d14 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	7c12      	ldrb	r2, [r2, #16]
 8010d08:	f107 0108 	add.w	r1, r7, #8
 8010d0c:	4610      	mov	r0, r2
 8010d0e:	4798      	blx	r3
 8010d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d12:	e091      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d14:	6839      	ldr	r1, [r7, #0]
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 fab2 	bl	8011280 <USBD_CtlError>
            err++;
 8010d1c:	7afb      	ldrb	r3, [r7, #11]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	72fb      	strb	r3, [r7, #11]
          break;
 8010d22:	e089      	b.n	8010e38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	7c12      	ldrb	r2, [r2, #16]
 8010d3c:	f107 0108 	add.w	r1, r7, #8
 8010d40:	4610      	mov	r0, r2
 8010d42:	4798      	blx	r3
 8010d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d46:	e077      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d48:	6839      	ldr	r1, [r7, #0]
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 fa98 	bl	8011280 <USBD_CtlError>
            err++;
 8010d50:	7afb      	ldrb	r3, [r7, #11]
 8010d52:	3301      	adds	r3, #1
 8010d54:	72fb      	strb	r3, [r7, #11]
          break;
 8010d56:	e06f      	b.n	8010e38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00b      	beq.n	8010d7c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	7c12      	ldrb	r2, [r2, #16]
 8010d70:	f107 0108 	add.w	r1, r7, #8
 8010d74:	4610      	mov	r0, r2
 8010d76:	4798      	blx	r3
 8010d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d7a:	e05d      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f000 fa7e 	bl	8011280 <USBD_CtlError>
            err++;
 8010d84:	7afb      	ldrb	r3, [r7, #11]
 8010d86:	3301      	adds	r3, #1
 8010d88:	72fb      	strb	r3, [r7, #11]
          break;
 8010d8a:	e055      	b.n	8010e38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00b      	beq.n	8010db0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	7c12      	ldrb	r2, [r2, #16]
 8010da4:	f107 0108 	add.w	r1, r7, #8
 8010da8:	4610      	mov	r0, r2
 8010daa:	4798      	blx	r3
 8010dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dae:	e043      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010db0:	6839      	ldr	r1, [r7, #0]
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 fa64 	bl	8011280 <USBD_CtlError>
            err++;
 8010db8:	7afb      	ldrb	r3, [r7, #11]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8010dbe:	e03b      	b.n	8010e38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dc6:	695b      	ldr	r3, [r3, #20]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d00b      	beq.n	8010de4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	7c12      	ldrb	r2, [r2, #16]
 8010dd8:	f107 0108 	add.w	r1, r7, #8
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4798      	blx	r3
 8010de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010de2:	e029      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 fa4a 	bl	8011280 <USBD_CtlError>
            err++;
 8010dec:	7afb      	ldrb	r3, [r7, #11]
 8010dee:	3301      	adds	r3, #1
 8010df0:	72fb      	strb	r3, [r7, #11]
          break;
 8010df2:	e021      	b.n	8010e38 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00b      	beq.n	8010e18 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e06:	699b      	ldr	r3, [r3, #24]
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	7c12      	ldrb	r2, [r2, #16]
 8010e0c:	f107 0108 	add.w	r1, r7, #8
 8010e10:	4610      	mov	r0, r2
 8010e12:	4798      	blx	r3
 8010e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e16:	e00f      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e18:	6839      	ldr	r1, [r7, #0]
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fa30 	bl	8011280 <USBD_CtlError>
            err++;
 8010e20:	7afb      	ldrb	r3, [r7, #11]
 8010e22:	3301      	adds	r3, #1
 8010e24:	72fb      	strb	r3, [r7, #11]
          break;
 8010e26:	e007      	b.n	8010e38 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010e28:	6839      	ldr	r1, [r7, #0]
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 fa28 	bl	8011280 <USBD_CtlError>
          err++;
 8010e30:	7afb      	ldrb	r3, [r7, #11]
 8010e32:	3301      	adds	r3, #1
 8010e34:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010e36:	bf00      	nop
      }
      break;
 8010e38:	e037      	b.n	8010eaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7c1b      	ldrb	r3, [r3, #16]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d109      	bne.n	8010e56 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4a:	f107 0208 	add.w	r2, r7, #8
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4798      	blx	r3
 8010e52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e54:	e029      	b.n	8010eaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010e56:	6839      	ldr	r1, [r7, #0]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fa11 	bl	8011280 <USBD_CtlError>
        err++;
 8010e5e:	7afb      	ldrb	r3, [r7, #11]
 8010e60:	3301      	adds	r3, #1
 8010e62:	72fb      	strb	r3, [r7, #11]
      break;
 8010e64:	e021      	b.n	8010eaa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	7c1b      	ldrb	r3, [r3, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d10d      	bne.n	8010e8a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e76:	f107 0208 	add.w	r2, r7, #8
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	4798      	blx	r3
 8010e7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	3301      	adds	r3, #1
 8010e84:	2207      	movs	r2, #7
 8010e86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e88:	e00f      	b.n	8010eaa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010e8a:	6839      	ldr	r1, [r7, #0]
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f000 f9f7 	bl	8011280 <USBD_CtlError>
        err++;
 8010e92:	7afb      	ldrb	r3, [r7, #11]
 8010e94:	3301      	adds	r3, #1
 8010e96:	72fb      	strb	r3, [r7, #11]
      break;
 8010e98:	e007      	b.n	8010eaa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 f9ef 	bl	8011280 <USBD_CtlError>
      err++;
 8010ea2:	7afb      	ldrb	r3, [r7, #11]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8010ea8:	bf00      	nop
  }

  if (err != 0U)
 8010eaa:	7afb      	ldrb	r3, [r7, #11]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d11e      	bne.n	8010eee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	88db      	ldrh	r3, [r3, #6]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d016      	beq.n	8010ee6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010eb8:	893b      	ldrh	r3, [r7, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00e      	beq.n	8010edc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	88da      	ldrh	r2, [r3, #6]
 8010ec2:	893b      	ldrh	r3, [r7, #8]
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	bf28      	it	cs
 8010ec8:	4613      	movcs	r3, r2
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010ece:	893b      	ldrh	r3, [r7, #8]
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	68f9      	ldr	r1, [r7, #12]
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f000 fa44 	bl	8011362 <USBD_CtlSendData>
 8010eda:	e009      	b.n	8010ef0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010edc:	6839      	ldr	r1, [r7, #0]
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f9ce 	bl	8011280 <USBD_CtlError>
 8010ee4:	e004      	b.n	8010ef0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 fa95 	bl	8011416 <USBD_CtlSendStatus>
 8010eec:	e000      	b.n	8010ef0 <USBD_GetDescriptor+0x320>
    return;
 8010eee:	bf00      	nop
  }
}
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop

08010ef8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	889b      	ldrh	r3, [r3, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d131      	bne.n	8010f6e <USBD_SetAddress+0x76>
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	88db      	ldrh	r3, [r3, #6]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d12d      	bne.n	8010f6e <USBD_SetAddress+0x76>
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	885b      	ldrh	r3, [r3, #2]
 8010f16:	2b7f      	cmp	r3, #127	; 0x7f
 8010f18:	d829      	bhi.n	8010f6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	885b      	ldrh	r3, [r3, #2]
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	2b03      	cmp	r3, #3
 8010f30:	d104      	bne.n	8010f3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010f32:	6839      	ldr	r1, [r7, #0]
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 f9a3 	bl	8011280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f3a:	e01d      	b.n	8010f78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	7bfa      	ldrb	r2, [r7, #15]
 8010f40:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f44:	7bfb      	ldrb	r3, [r7, #15]
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 fe8c 	bl	8011c66 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 fa61 	bl	8011416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d004      	beq.n	8010f64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2202      	movs	r2, #2
 8010f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f62:	e009      	b.n	8010f78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f6c:	e004      	b.n	8010f78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 f985 	bl	8011280 <USBD_CtlError>
  }
}
 8010f76:	bf00      	nop
 8010f78:	bf00      	nop
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	885b      	ldrh	r3, [r3, #2]
 8010f92:	b2da      	uxtb	r2, r3
 8010f94:	4b4c      	ldr	r3, [pc, #304]	; (80110c8 <USBD_SetConfig+0x148>)
 8010f96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010f98:	4b4b      	ldr	r3, [pc, #300]	; (80110c8 <USBD_SetConfig+0x148>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d905      	bls.n	8010fac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010fa0:	6839      	ldr	r1, [r7, #0]
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 f96c 	bl	8011280 <USBD_CtlError>
    return USBD_FAIL;
 8010fa8:	2303      	movs	r3, #3
 8010faa:	e088      	b.n	80110be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d002      	beq.n	8010fbe <USBD_SetConfig+0x3e>
 8010fb8:	2b03      	cmp	r3, #3
 8010fba:	d025      	beq.n	8011008 <USBD_SetConfig+0x88>
 8010fbc:	e071      	b.n	80110a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010fbe:	4b42      	ldr	r3, [pc, #264]	; (80110c8 <USBD_SetConfig+0x148>)
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d01c      	beq.n	8011000 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010fc6:	4b40      	ldr	r3, [pc, #256]	; (80110c8 <USBD_SetConfig+0x148>)
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010fd0:	4b3d      	ldr	r3, [pc, #244]	; (80110c8 <USBD_SetConfig+0x148>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7ff f992 	bl	8010300 <USBD_SetClassConfig>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010fe0:	7bfb      	ldrb	r3, [r7, #15]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d004      	beq.n	8010ff0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8010fe6:	6839      	ldr	r1, [r7, #0]
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 f949 	bl	8011280 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010fee:	e065      	b.n	80110bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f000 fa10 	bl	8011416 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2203      	movs	r2, #3
 8010ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010ffe:	e05d      	b.n	80110bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 fa08 	bl	8011416 <USBD_CtlSendStatus>
      break;
 8011006:	e059      	b.n	80110bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011008:	4b2f      	ldr	r3, [pc, #188]	; (80110c8 <USBD_SetConfig+0x148>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d112      	bne.n	8011036 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2202      	movs	r2, #2
 8011014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011018:	4b2b      	ldr	r3, [pc, #172]	; (80110c8 <USBD_SetConfig+0x148>)
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	461a      	mov	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011022:	4b29      	ldr	r3, [pc, #164]	; (80110c8 <USBD_SetConfig+0x148>)
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	4619      	mov	r1, r3
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7ff f985 	bl	8010338 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f9f1 	bl	8011416 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011034:	e042      	b.n	80110bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011036:	4b24      	ldr	r3, [pc, #144]	; (80110c8 <USBD_SetConfig+0x148>)
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	461a      	mov	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	429a      	cmp	r2, r3
 8011042:	d02a      	beq.n	801109a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	b2db      	uxtb	r3, r3
 801104a:	4619      	mov	r1, r3
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff f973 	bl	8010338 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011052:	4b1d      	ldr	r3, [pc, #116]	; (80110c8 <USBD_SetConfig+0x148>)
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	461a      	mov	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801105c:	4b1a      	ldr	r3, [pc, #104]	; (80110c8 <USBD_SetConfig+0x148>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	4619      	mov	r1, r3
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff f94c 	bl	8010300 <USBD_SetClassConfig>
 8011068:	4603      	mov	r3, r0
 801106a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801106c:	7bfb      	ldrb	r3, [r7, #15]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00f      	beq.n	8011092 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f000 f903 	bl	8011280 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	b2db      	uxtb	r3, r3
 8011080:	4619      	mov	r1, r3
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f7ff f958 	bl	8010338 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2202      	movs	r2, #2
 801108c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011090:	e014      	b.n	80110bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 f9bf 	bl	8011416 <USBD_CtlSendStatus>
      break;
 8011098:	e010      	b.n	80110bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 f9bb 	bl	8011416 <USBD_CtlSendStatus>
      break;
 80110a0:	e00c      	b.n	80110bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80110a2:	6839      	ldr	r1, [r7, #0]
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f000 f8eb 	bl	8011280 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110aa:	4b07      	ldr	r3, [pc, #28]	; (80110c8 <USBD_SetConfig+0x148>)
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	4619      	mov	r1, r3
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7ff f941 	bl	8010338 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80110b6:	2303      	movs	r3, #3
 80110b8:	73fb      	strb	r3, [r7, #15]
      break;
 80110ba:	bf00      	nop
  }

  return ret;
 80110bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	200024e4 	.word	0x200024e4

080110cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	88db      	ldrh	r3, [r3, #6]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d004      	beq.n	80110e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f8cd 	bl	8011280 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80110e6:	e023      	b.n	8011130 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b02      	cmp	r3, #2
 80110f2:	dc02      	bgt.n	80110fa <USBD_GetConfig+0x2e>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dc03      	bgt.n	8011100 <USBD_GetConfig+0x34>
 80110f8:	e015      	b.n	8011126 <USBD_GetConfig+0x5a>
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	d00b      	beq.n	8011116 <USBD_GetConfig+0x4a>
 80110fe:	e012      	b.n	8011126 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	3308      	adds	r3, #8
 801110a:	2201      	movs	r2, #1
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 f927 	bl	8011362 <USBD_CtlSendData>
        break;
 8011114:	e00c      	b.n	8011130 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3304      	adds	r3, #4
 801111a:	2201      	movs	r2, #1
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f91f 	bl	8011362 <USBD_CtlSendData>
        break;
 8011124:	e004      	b.n	8011130 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f8a9 	bl	8011280 <USBD_CtlError>
        break;
 801112e:	bf00      	nop
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011148:	b2db      	uxtb	r3, r3
 801114a:	3b01      	subs	r3, #1
 801114c:	2b02      	cmp	r3, #2
 801114e:	d81e      	bhi.n	801118e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	88db      	ldrh	r3, [r3, #6]
 8011154:	2b02      	cmp	r3, #2
 8011156:	d004      	beq.n	8011162 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011158:	6839      	ldr	r1, [r7, #0]
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f000 f890 	bl	8011280 <USBD_CtlError>
        break;
 8011160:	e01a      	b.n	8011198 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2201      	movs	r2, #1
 8011166:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801116e:	2b00      	cmp	r3, #0
 8011170:	d005      	beq.n	801117e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	f043 0202 	orr.w	r2, r3, #2
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	330c      	adds	r3, #12
 8011182:	2202      	movs	r2, #2
 8011184:	4619      	mov	r1, r3
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f8eb 	bl	8011362 <USBD_CtlSendData>
      break;
 801118c:	e004      	b.n	8011198 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801118e:	6839      	ldr	r1, [r7, #0]
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f875 	bl	8011280 <USBD_CtlError>
      break;
 8011196:	bf00      	nop
  }
}
 8011198:	bf00      	nop
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	885b      	ldrh	r3, [r3, #2]
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d106      	bne.n	80111c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2201      	movs	r2, #1
 80111b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 f92b 	bl	8011416 <USBD_CtlSendStatus>
  }
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	3b01      	subs	r3, #1
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d80b      	bhi.n	80111f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	885b      	ldrh	r3, [r3, #2]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d10c      	bne.n	8011202 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 f910 	bl	8011416 <USBD_CtlSendStatus>
      }
      break;
 80111f6:	e004      	b.n	8011202 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80111f8:	6839      	ldr	r1, [r7, #0]
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 f840 	bl	8011280 <USBD_CtlError>
      break;
 8011200:	e000      	b.n	8011204 <USBD_ClrFeature+0x3c>
      break;
 8011202:	bf00      	nop
  }
}
 8011204:	bf00      	nop
 8011206:	3708      	adds	r7, #8
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}

0801120c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	781a      	ldrb	r2, [r3, #0]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	3301      	adds	r3, #1
 8011226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	781a      	ldrb	r2, [r3, #0]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	3301      	adds	r3, #1
 8011234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fa92 	bl	8010760 <SWAPBYTE>
 801123c:	4603      	mov	r3, r0
 801123e:	461a      	mov	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3301      	adds	r3, #1
 8011248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	3301      	adds	r3, #1
 801124e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7ff fa85 	bl	8010760 <SWAPBYTE>
 8011256:	4603      	mov	r3, r0
 8011258:	461a      	mov	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	3301      	adds	r3, #1
 8011262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	3301      	adds	r3, #1
 8011268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7ff fa78 	bl	8010760 <SWAPBYTE>
 8011270:	4603      	mov	r3, r0
 8011272:	461a      	mov	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	80da      	strh	r2, [r3, #6]
}
 8011278:	bf00      	nop
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801128a:	2180      	movs	r1, #128	; 0x80
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f000 fc7f 	bl	8011b90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011292:	2100      	movs	r1, #0
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fc7b 	bl	8011b90 <USBD_LL_StallEP>
}
 801129a:	bf00      	nop
 801129c:	3708      	adds	r7, #8
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}

080112a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80112a2:	b580      	push	{r7, lr}
 80112a4:	b086      	sub	sp, #24
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	60f8      	str	r0, [r7, #12]
 80112aa:	60b9      	str	r1, [r7, #8]
 80112ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80112ae:	2300      	movs	r3, #0
 80112b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d036      	beq.n	8011326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80112bc:	6938      	ldr	r0, [r7, #16]
 80112be:	f000 f836 	bl	801132e <USBD_GetLen>
 80112c2:	4603      	mov	r3, r0
 80112c4:	3301      	adds	r3, #1
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	b29a      	uxth	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80112d0:	7dfb      	ldrb	r3, [r7, #23]
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	4413      	add	r3, r2
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	7812      	ldrb	r2, [r2, #0]
 80112da:	701a      	strb	r2, [r3, #0]
  idx++;
 80112dc:	7dfb      	ldrb	r3, [r7, #23]
 80112de:	3301      	adds	r3, #1
 80112e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
 80112e4:	68ba      	ldr	r2, [r7, #8]
 80112e6:	4413      	add	r3, r2
 80112e8:	2203      	movs	r2, #3
 80112ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80112ec:	7dfb      	ldrb	r3, [r7, #23]
 80112ee:	3301      	adds	r3, #1
 80112f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80112f2:	e013      	b.n	801131c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	68ba      	ldr	r2, [r7, #8]
 80112f8:	4413      	add	r3, r2
 80112fa:	693a      	ldr	r2, [r7, #16]
 80112fc:	7812      	ldrb	r2, [r2, #0]
 80112fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	3301      	adds	r3, #1
 8011304:	613b      	str	r3, [r7, #16]
    idx++;
 8011306:	7dfb      	ldrb	r3, [r7, #23]
 8011308:	3301      	adds	r3, #1
 801130a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801130c:	7dfb      	ldrb	r3, [r7, #23]
 801130e:	68ba      	ldr	r2, [r7, #8]
 8011310:	4413      	add	r3, r2
 8011312:	2200      	movs	r2, #0
 8011314:	701a      	strb	r2, [r3, #0]
    idx++;
 8011316:	7dfb      	ldrb	r3, [r7, #23]
 8011318:	3301      	adds	r3, #1
 801131a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1e7      	bne.n	80112f4 <USBD_GetString+0x52>
 8011324:	e000      	b.n	8011328 <USBD_GetString+0x86>
    return;
 8011326:	bf00      	nop
  }
}
 8011328:	3718      	adds	r7, #24
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801132e:	b480      	push	{r7}
 8011330:	b085      	sub	sp, #20
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011336:	2300      	movs	r3, #0
 8011338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801133e:	e005      	b.n	801134c <USBD_GetLen+0x1e>
  {
    len++;
 8011340:	7bfb      	ldrb	r3, [r7, #15]
 8011342:	3301      	adds	r3, #1
 8011344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	3301      	adds	r3, #1
 801134a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d1f5      	bne.n	8011340 <USBD_GetLen+0x12>
  }

  return len;
 8011354:	7bfb      	ldrb	r3, [r7, #15]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3714      	adds	r7, #20
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b084      	sub	sp, #16
 8011366:	af00      	add	r7, sp, #0
 8011368:	60f8      	str	r0, [r7, #12]
 801136a:	60b9      	str	r1, [r7, #8]
 801136c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2202      	movs	r2, #2
 8011372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	687a      	ldr	r2, [r7, #4]
 801137a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	2100      	movs	r1, #0
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f000 fc8b 	bl	8011ca4 <USBD_LL_Transmit>

  return USBD_OK;
 801138e:	2300      	movs	r3, #0
}
 8011390:	4618      	mov	r0, r3
 8011392:	3710      	adds	r7, #16
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	2100      	movs	r1, #0
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f000 fc7a 	bl	8011ca4 <USBD_LL_Transmit>

  return USBD_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b084      	sub	sp, #16
 80113be:	af00      	add	r7, sp, #0
 80113c0:	60f8      	str	r0, [r7, #12]
 80113c2:	60b9      	str	r1, [r7, #8]
 80113c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2203      	movs	r2, #3
 80113ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	2100      	movs	r1, #0
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f000 fc7e 	bl	8011ce6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80113ea:	2300      	movs	r3, #0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	68ba      	ldr	r2, [r7, #8]
 8011404:	2100      	movs	r1, #0
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f000 fc6d 	bl	8011ce6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801140c:	2300      	movs	r3, #0
}
 801140e:	4618      	mov	r0, r3
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b082      	sub	sp, #8
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2204      	movs	r2, #4
 8011422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011426:	2300      	movs	r3, #0
 8011428:	2200      	movs	r2, #0
 801142a:	2100      	movs	r1, #0
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 fc39 	bl	8011ca4 <USBD_LL_Transmit>

  return USBD_OK;
 8011432:	2300      	movs	r3, #0
}
 8011434:	4618      	mov	r0, r3
 8011436:	3708      	adds	r7, #8
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2205      	movs	r2, #5
 8011448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801144c:	2300      	movs	r3, #0
 801144e:	2200      	movs	r2, #0
 8011450:	2100      	movs	r1, #0
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fc47 	bl	8011ce6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
	...

08011464 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011468:	2200      	movs	r2, #0
 801146a:	4912      	ldr	r1, [pc, #72]	; (80114b4 <MX_USB_Device_Init+0x50>)
 801146c:	4812      	ldr	r0, [pc, #72]	; (80114b8 <MX_USB_Device_Init+0x54>)
 801146e:	f7fe fed9 	bl	8010224 <USBD_Init>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011478:	f7f5 f8be 	bl	80065f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801147c:	490f      	ldr	r1, [pc, #60]	; (80114bc <MX_USB_Device_Init+0x58>)
 801147e:	480e      	ldr	r0, [pc, #56]	; (80114b8 <MX_USB_Device_Init+0x54>)
 8011480:	f7fe ff00 	bl	8010284 <USBD_RegisterClass>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d001      	beq.n	801148e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801148a:	f7f5 f8b5 	bl	80065f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801148e:	490c      	ldr	r1, [pc, #48]	; (80114c0 <MX_USB_Device_Init+0x5c>)
 8011490:	4809      	ldr	r0, [pc, #36]	; (80114b8 <MX_USB_Device_Init+0x54>)
 8011492:	f7fe fe21 	bl	80100d8 <USBD_CDC_RegisterInterface>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d001      	beq.n	80114a0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801149c:	f7f5 f8ac 	bl	80065f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80114a0:	4805      	ldr	r0, [pc, #20]	; (80114b8 <MX_USB_Device_Init+0x54>)
 80114a2:	f7fe ff16 	bl	80102d2 <USBD_Start>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d001      	beq.n	80114b0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80114ac:	f7f5 f8a4 	bl	80065f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80114b0:	bf00      	nop
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	20000148 	.word	0x20000148
 80114b8:	20002718 	.word	0x20002718
 80114bc:	20000030 	.word	0x20000030
 80114c0:	20000134 	.word	0x20000134

080114c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80114c8:	2200      	movs	r2, #0
 80114ca:	4905      	ldr	r1, [pc, #20]	; (80114e0 <CDC_Init_FS+0x1c>)
 80114cc:	4805      	ldr	r0, [pc, #20]	; (80114e4 <CDC_Init_FS+0x20>)
 80114ce:	f7fe fe18 	bl	8010102 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80114d2:	4905      	ldr	r1, [pc, #20]	; (80114e8 <CDC_Init_FS+0x24>)
 80114d4:	4803      	ldr	r0, [pc, #12]	; (80114e4 <CDC_Init_FS+0x20>)
 80114d6:	f7fe fe32 	bl	801013e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80114da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80114dc:	4618      	mov	r0, r3
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	200031e8 	.word	0x200031e8
 80114e4:	20002718 	.word	0x20002718
 80114e8:	200029e8 	.word	0x200029e8

080114ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80114ec:	b480      	push	{r7}
 80114ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	4603      	mov	r3, r0
 8011504:	6039      	str	r1, [r7, #0]
 8011506:	71fb      	strb	r3, [r7, #7]
 8011508:	4613      	mov	r3, r2
 801150a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801150c:	79fb      	ldrb	r3, [r7, #7]
 801150e:	2b23      	cmp	r3, #35	; 0x23
 8011510:	d84a      	bhi.n	80115a8 <CDC_Control_FS+0xac>
 8011512:	a201      	add	r2, pc, #4	; (adr r2, 8011518 <CDC_Control_FS+0x1c>)
 8011514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011518:	080115a9 	.word	0x080115a9
 801151c:	080115a9 	.word	0x080115a9
 8011520:	080115a9 	.word	0x080115a9
 8011524:	080115a9 	.word	0x080115a9
 8011528:	080115a9 	.word	0x080115a9
 801152c:	080115a9 	.word	0x080115a9
 8011530:	080115a9 	.word	0x080115a9
 8011534:	080115a9 	.word	0x080115a9
 8011538:	080115a9 	.word	0x080115a9
 801153c:	080115a9 	.word	0x080115a9
 8011540:	080115a9 	.word	0x080115a9
 8011544:	080115a9 	.word	0x080115a9
 8011548:	080115a9 	.word	0x080115a9
 801154c:	080115a9 	.word	0x080115a9
 8011550:	080115a9 	.word	0x080115a9
 8011554:	080115a9 	.word	0x080115a9
 8011558:	080115a9 	.word	0x080115a9
 801155c:	080115a9 	.word	0x080115a9
 8011560:	080115a9 	.word	0x080115a9
 8011564:	080115a9 	.word	0x080115a9
 8011568:	080115a9 	.word	0x080115a9
 801156c:	080115a9 	.word	0x080115a9
 8011570:	080115a9 	.word	0x080115a9
 8011574:	080115a9 	.word	0x080115a9
 8011578:	080115a9 	.word	0x080115a9
 801157c:	080115a9 	.word	0x080115a9
 8011580:	080115a9 	.word	0x080115a9
 8011584:	080115a9 	.word	0x080115a9
 8011588:	080115a9 	.word	0x080115a9
 801158c:	080115a9 	.word	0x080115a9
 8011590:	080115a9 	.word	0x080115a9
 8011594:	080115a9 	.word	0x080115a9
 8011598:	080115a9 	.word	0x080115a9
 801159c:	080115a9 	.word	0x080115a9
 80115a0:	080115a9 	.word	0x080115a9
 80115a4:	080115a9 	.word	0x080115a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80115a8:	bf00      	nop
  }

  return (USBD_OK);
 80115aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80115c2:	6879      	ldr	r1, [r7, #4]
 80115c4:	4805      	ldr	r0, [pc, #20]	; (80115dc <CDC_Receive_FS+0x24>)
 80115c6:	f7fe fdba 	bl	801013e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80115ca:	4804      	ldr	r0, [pc, #16]	; (80115dc <CDC_Receive_FS+0x24>)
 80115cc:	f7fe fe00 	bl	80101d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80115d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3708      	adds	r7, #8
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	20002718 	.word	0x20002718

080115e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	460b      	mov	r3, r1
 80115ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80115f0:	4b0d      	ldr	r3, [pc, #52]	; (8011628 <CDC_Transmit_FS+0x48>)
 80115f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011602:	2301      	movs	r3, #1
 8011604:	e00b      	b.n	801161e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011606:	887b      	ldrh	r3, [r7, #2]
 8011608:	461a      	mov	r2, r3
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	4806      	ldr	r0, [pc, #24]	; (8011628 <CDC_Transmit_FS+0x48>)
 801160e:	f7fe fd78 	bl	8010102 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011612:	4805      	ldr	r0, [pc, #20]	; (8011628 <CDC_Transmit_FS+0x48>)
 8011614:	f7fe fdac 	bl	8010170 <USBD_CDC_TransmitPacket>
 8011618:	4603      	mov	r3, r0
 801161a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801161c:	7bfb      	ldrb	r3, [r7, #15]
}
 801161e:	4618      	mov	r0, r3
 8011620:	3710      	adds	r7, #16
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	20002718 	.word	0x20002718

0801162c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801162c:	b480      	push	{r7}
 801162e:	b087      	sub	sp, #28
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	4613      	mov	r3, r2
 8011638:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801163a:	2300      	movs	r3, #0
 801163c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801163e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011642:	4618      	mov	r0, r3
 8011644:	371c      	adds	r7, #28
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
	...

08011650 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	6039      	str	r1, [r7, #0]
 801165a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	2212      	movs	r2, #18
 8011660:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011662:	4b03      	ldr	r3, [pc, #12]	; (8011670 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011664:	4618      	mov	r0, r3
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr
 8011670:	20000168 	.word	0x20000168

08011674 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	4603      	mov	r3, r0
 801167c:	6039      	str	r1, [r7, #0]
 801167e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	2204      	movs	r2, #4
 8011684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011686:	4b03      	ldr	r3, [pc, #12]	; (8011694 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011688:	4618      	mov	r0, r3
 801168a:	370c      	adds	r7, #12
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr
 8011694:	2000017c 	.word	0x2000017c

08011698 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	4603      	mov	r3, r0
 80116a0:	6039      	str	r1, [r7, #0]
 80116a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116a4:	79fb      	ldrb	r3, [r7, #7]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d105      	bne.n	80116b6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116aa:	683a      	ldr	r2, [r7, #0]
 80116ac:	4907      	ldr	r1, [pc, #28]	; (80116cc <USBD_CDC_ProductStrDescriptor+0x34>)
 80116ae:	4808      	ldr	r0, [pc, #32]	; (80116d0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80116b0:	f7ff fdf7 	bl	80112a2 <USBD_GetString>
 80116b4:	e004      	b.n	80116c0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	4904      	ldr	r1, [pc, #16]	; (80116cc <USBD_CDC_ProductStrDescriptor+0x34>)
 80116ba:	4805      	ldr	r0, [pc, #20]	; (80116d0 <USBD_CDC_ProductStrDescriptor+0x38>)
 80116bc:	f7ff fdf1 	bl	80112a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116c0:	4b02      	ldr	r3, [pc, #8]	; (80116cc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	200039e8 	.word	0x200039e8
 80116d0:	08016c90 	.word	0x08016c90

080116d4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	6039      	str	r1, [r7, #0]
 80116de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80116e0:	683a      	ldr	r2, [r7, #0]
 80116e2:	4904      	ldr	r1, [pc, #16]	; (80116f4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80116e4:	4804      	ldr	r0, [pc, #16]	; (80116f8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80116e6:	f7ff fddc 	bl	80112a2 <USBD_GetString>
  return USBD_StrDesc;
 80116ea:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3708      	adds	r7, #8
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	200039e8 	.word	0x200039e8
 80116f8:	08016ca8 	.word	0x08016ca8

080116fc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	4603      	mov	r3, r0
 8011704:	6039      	str	r1, [r7, #0]
 8011706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	221a      	movs	r2, #26
 801170c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801170e:	f000 f843 	bl	8011798 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011712:	4b02      	ldr	r3, [pc, #8]	; (801171c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011714:	4618      	mov	r0, r3
 8011716:	3708      	adds	r7, #8
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	20000180 	.word	0x20000180

08011720 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	4603      	mov	r3, r0
 8011728:	6039      	str	r1, [r7, #0]
 801172a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801172c:	79fb      	ldrb	r3, [r7, #7]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d105      	bne.n	801173e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	4907      	ldr	r1, [pc, #28]	; (8011754 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011736:	4808      	ldr	r0, [pc, #32]	; (8011758 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011738:	f7ff fdb3 	bl	80112a2 <USBD_GetString>
 801173c:	e004      	b.n	8011748 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	4904      	ldr	r1, [pc, #16]	; (8011754 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011742:	4805      	ldr	r0, [pc, #20]	; (8011758 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011744:	f7ff fdad 	bl	80112a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011748:	4b02      	ldr	r3, [pc, #8]	; (8011754 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801174a:	4618      	mov	r0, r3
 801174c:	3708      	adds	r7, #8
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	200039e8 	.word	0x200039e8
 8011758:	08016cbc 	.word	0x08016cbc

0801175c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	4603      	mov	r3, r0
 8011764:	6039      	str	r1, [r7, #0]
 8011766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d105      	bne.n	801177a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	4907      	ldr	r1, [pc, #28]	; (8011790 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011772:	4808      	ldr	r0, [pc, #32]	; (8011794 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011774:	f7ff fd95 	bl	80112a2 <USBD_GetString>
 8011778:	e004      	b.n	8011784 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	4904      	ldr	r1, [pc, #16]	; (8011790 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801177e:	4805      	ldr	r0, [pc, #20]	; (8011794 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011780:	f7ff fd8f 	bl	80112a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011784:	4b02      	ldr	r3, [pc, #8]	; (8011790 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011786:	4618      	mov	r0, r3
 8011788:	3708      	adds	r7, #8
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	200039e8 	.word	0x200039e8
 8011794:	08016cc8 	.word	0x08016cc8

08011798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801179e:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <Get_SerialNum+0x44>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80117a4:	4b0e      	ldr	r3, [pc, #56]	; (80117e0 <Get_SerialNum+0x48>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80117aa:	4b0e      	ldr	r3, [pc, #56]	; (80117e4 <Get_SerialNum+0x4c>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80117b0:	68fa      	ldr	r2, [r7, #12]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4413      	add	r3, r2
 80117b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d009      	beq.n	80117d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117be:	2208      	movs	r2, #8
 80117c0:	4909      	ldr	r1, [pc, #36]	; (80117e8 <Get_SerialNum+0x50>)
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f000 f814 	bl	80117f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117c8:	2204      	movs	r2, #4
 80117ca:	4908      	ldr	r1, [pc, #32]	; (80117ec <Get_SerialNum+0x54>)
 80117cc:	68b8      	ldr	r0, [r7, #8]
 80117ce:	f000 f80f 	bl	80117f0 <IntToUnicode>
  }
}
 80117d2:	bf00      	nop
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	1fff7590 	.word	0x1fff7590
 80117e0:	1fff7594 	.word	0x1fff7594
 80117e4:	1fff7598 	.word	0x1fff7598
 80117e8:	20000182 	.word	0x20000182
 80117ec:	20000192 	.word	0x20000192

080117f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b087      	sub	sp, #28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	4613      	mov	r3, r2
 80117fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011802:	2300      	movs	r3, #0
 8011804:	75fb      	strb	r3, [r7, #23]
 8011806:	e027      	b.n	8011858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	0f1b      	lsrs	r3, r3, #28
 801180c:	2b09      	cmp	r3, #9
 801180e:	d80b      	bhi.n	8011828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	0f1b      	lsrs	r3, r3, #28
 8011814:	b2da      	uxtb	r2, r3
 8011816:	7dfb      	ldrb	r3, [r7, #23]
 8011818:	005b      	lsls	r3, r3, #1
 801181a:	4619      	mov	r1, r3
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	440b      	add	r3, r1
 8011820:	3230      	adds	r2, #48	; 0x30
 8011822:	b2d2      	uxtb	r2, r2
 8011824:	701a      	strb	r2, [r3, #0]
 8011826:	e00a      	b.n	801183e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	0f1b      	lsrs	r3, r3, #28
 801182c:	b2da      	uxtb	r2, r3
 801182e:	7dfb      	ldrb	r3, [r7, #23]
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	4619      	mov	r1, r3
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	440b      	add	r3, r1
 8011838:	3237      	adds	r2, #55	; 0x37
 801183a:	b2d2      	uxtb	r2, r2
 801183c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	011b      	lsls	r3, r3, #4
 8011842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011844:	7dfb      	ldrb	r3, [r7, #23]
 8011846:	005b      	lsls	r3, r3, #1
 8011848:	3301      	adds	r3, #1
 801184a:	68ba      	ldr	r2, [r7, #8]
 801184c:	4413      	add	r3, r2
 801184e:	2200      	movs	r2, #0
 8011850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011852:	7dfb      	ldrb	r3, [r7, #23]
 8011854:	3301      	adds	r3, #1
 8011856:	75fb      	strb	r3, [r7, #23]
 8011858:	7dfa      	ldrb	r2, [r7, #23]
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	429a      	cmp	r2, r3
 801185e:	d3d3      	bcc.n	8011808 <IntToUnicode+0x18>
  }
}
 8011860:	bf00      	nop
 8011862:	bf00      	nop
 8011864:	371c      	adds	r7, #28
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
	...

08011870 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	4a0d      	ldr	r2, [pc, #52]	; (80118b4 <HAL_PCD_MspInit+0x44>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d113      	bne.n	80118aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011882:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <HAL_PCD_MspInit+0x48>)
 8011884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011886:	4a0c      	ldr	r2, [pc, #48]	; (80118b8 <HAL_PCD_MspInit+0x48>)
 8011888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801188c:	6593      	str	r3, [r2, #88]	; 0x58
 801188e:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <HAL_PCD_MspInit+0x48>)
 8011890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801189a:	2200      	movs	r2, #0
 801189c:	2100      	movs	r1, #0
 801189e:	2014      	movs	r0, #20
 80118a0:	f7f6 fcc7 	bl	8008232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80118a4:	2014      	movs	r0, #20
 80118a6:	f7f6 fcde 	bl	8008266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80118aa:	bf00      	nop
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	40005c00 	.word	0x40005c00
 80118b8:	40021000 	.word	0x40021000

080118bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80118d0:	4619      	mov	r1, r3
 80118d2:	4610      	mov	r0, r2
 80118d4:	f7fe fd48 	bl	8010368 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80118d8:	bf00      	nop
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	460b      	mov	r3, r1
 80118ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80118f2:	78fa      	ldrb	r2, [r7, #3]
 80118f4:	6879      	ldr	r1, [r7, #4]
 80118f6:	4613      	mov	r3, r2
 80118f8:	009b      	lsls	r3, r3, #2
 80118fa:	4413      	add	r3, r2
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	440b      	add	r3, r1
 8011900:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011904:	681a      	ldr	r2, [r3, #0]
 8011906:	78fb      	ldrb	r3, [r7, #3]
 8011908:	4619      	mov	r1, r3
 801190a:	f7fe fd82 	bl	8010412 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801190e:	bf00      	nop
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	460b      	mov	r3, r1
 8011920:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011928:	78fa      	ldrb	r2, [r7, #3]
 801192a:	6879      	ldr	r1, [r7, #4]
 801192c:	4613      	mov	r3, r2
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	4413      	add	r3, r2
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	440b      	add	r3, r1
 8011936:	333c      	adds	r3, #60	; 0x3c
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	78fb      	ldrb	r3, [r7, #3]
 801193c:	4619      	mov	r1, r3
 801193e:	f7fe fdcb 	bl	80104d8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011942:	bf00      	nop
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fedf 	bl	801071c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801195e:	bf00      	nop
 8011960:	3708      	adds	r7, #8
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b084      	sub	sp, #16
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801196e:	2301      	movs	r3, #1
 8011970:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	2b02      	cmp	r3, #2
 8011978:	d001      	beq.n	801197e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801197a:	f7f4 fe3d 	bl	80065f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011984:	7bfa      	ldrb	r2, [r7, #15]
 8011986:	4611      	mov	r1, r2
 8011988:	4618      	mov	r0, r3
 801198a:	f7fe fe89 	bl	80106a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe fe35 	bl	8010604 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801199a:	bf00      	nop
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
	...

080119a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe fe84 	bl	80106c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d005      	beq.n	80119cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119c0:	4b04      	ldr	r3, [pc, #16]	; (80119d4 <HAL_PCD_SuspendCallback+0x30>)
 80119c2:	691b      	ldr	r3, [r3, #16]
 80119c4:	4a03      	ldr	r2, [pc, #12]	; (80119d4 <HAL_PCD_SuspendCallback+0x30>)
 80119c6:	f043 0306 	orr.w	r3, r3, #6
 80119ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	e000ed00 	.word	0xe000ed00

080119d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d007      	beq.n	80119f8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119e8:	4b08      	ldr	r3, [pc, #32]	; (8011a0c <HAL_PCD_ResumeCallback+0x34>)
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	4a07      	ldr	r2, [pc, #28]	; (8011a0c <HAL_PCD_ResumeCallback+0x34>)
 80119ee:	f023 0306 	bic.w	r3, r3, #6
 80119f2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80119f4:	f000 f9fa 	bl	8011dec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fe fe74 	bl	80106ec <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011a04:	bf00      	nop
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	e000ed00 	.word	0xe000ed00

08011a10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011a18:	4a2b      	ldr	r2, [pc, #172]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a29      	ldr	r2, [pc, #164]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011a28:	4b27      	ldr	r3, [pc, #156]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a2a:	4a28      	ldr	r2, [pc, #160]	; (8011acc <USBD_LL_Init+0xbc>)
 8011a2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011a2e:	4b26      	ldr	r3, [pc, #152]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a30:	2208      	movs	r2, #8
 8011a32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011a34:	4b24      	ldr	r3, [pc, #144]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a36:	2202      	movs	r2, #2
 8011a38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a3a:	4b23      	ldr	r3, [pc, #140]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a3c:	2202      	movs	r2, #2
 8011a3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011a40:	4b21      	ldr	r3, [pc, #132]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011a46:	4b20      	ldr	r3, [pc, #128]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a48:	2200      	movs	r2, #0
 8011a4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011a4c:	4b1e      	ldr	r3, [pc, #120]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011a52:	4b1d      	ldr	r3, [pc, #116]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011a58:	481b      	ldr	r0, [pc, #108]	; (8011ac8 <USBD_LL_Init+0xb8>)
 8011a5a:	f7f7 fd9c 	bl	8009596 <HAL_PCD_Init>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d001      	beq.n	8011a68 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011a64:	f7f4 fdc8 	bl	80065f8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a6e:	2318      	movs	r3, #24
 8011a70:	2200      	movs	r2, #0
 8011a72:	2100      	movs	r1, #0
 8011a74:	f7f9 f9b6 	bl	800ade4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a7e:	2358      	movs	r3, #88	; 0x58
 8011a80:	2200      	movs	r2, #0
 8011a82:	2180      	movs	r1, #128	; 0x80
 8011a84:	f7f9 f9ae 	bl	800ade4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a8e:	23c0      	movs	r3, #192	; 0xc0
 8011a90:	2200      	movs	r2, #0
 8011a92:	2181      	movs	r1, #129	; 0x81
 8011a94:	f7f9 f9a6 	bl	800ade4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a9e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	2101      	movs	r1, #1
 8011aa6:	f7f9 f99d 	bl	800ade4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	2182      	movs	r1, #130	; 0x82
 8011ab8:	f7f9 f994 	bl	800ade4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	20003be8 	.word	0x20003be8
 8011acc:	40005c00 	.word	0x40005c00

08011ad0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ad8:	2300      	movs	r3, #0
 8011ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7f7 fe3a 	bl	8009760 <HAL_PCD_Start>
 8011aec:	4603      	mov	r3, r0
 8011aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011af0:	7bfb      	ldrb	r3, [r7, #15]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 f980 	bl	8011df8 <USBD_Get_USB_Status>
 8011af8:	4603      	mov	r3, r0
 8011afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4611      	mov	r1, r2
 8011b12:	461a      	mov	r2, r3
 8011b14:	4603      	mov	r3, r0
 8011b16:	70fb      	strb	r3, [r7, #3]
 8011b18:	460b      	mov	r3, r1
 8011b1a:	70bb      	strb	r3, [r7, #2]
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b20:	2300      	movs	r3, #0
 8011b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b24:	2300      	movs	r3, #0
 8011b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011b2e:	78bb      	ldrb	r3, [r7, #2]
 8011b30:	883a      	ldrh	r2, [r7, #0]
 8011b32:	78f9      	ldrb	r1, [r7, #3]
 8011b34:	f7f7 ffa9 	bl	8009a8a <HAL_PCD_EP_Open>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b3c:	7bfb      	ldrb	r3, [r7, #15]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f000 f95a 	bl	8011df8 <USBD_Get_USB_Status>
 8011b44:	4603      	mov	r3, r0
 8011b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}

08011b52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b62:	2300      	movs	r3, #0
 8011b64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b6c:	78fa      	ldrb	r2, [r7, #3]
 8011b6e:	4611      	mov	r1, r2
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7f7 fff0 	bl	8009b56 <HAL_PCD_EP_Close>
 8011b76:	4603      	mov	r3, r0
 8011b78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b7a:	7bfb      	ldrb	r3, [r7, #15]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 f93b 	bl	8011df8 <USBD_Get_USB_Status>
 8011b82:	4603      	mov	r3, r0
 8011b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3710      	adds	r7, #16
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011baa:	78fa      	ldrb	r2, [r7, #3]
 8011bac:	4611      	mov	r1, r2
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7f8 f8b1 	bl	8009d16 <HAL_PCD_EP_SetStall>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb8:	7bfb      	ldrb	r3, [r7, #15]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 f91c 	bl	8011df8 <USBD_Get_USB_Status>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b084      	sub	sp, #16
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bde:	2300      	movs	r3, #0
 8011be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011be8:	78fa      	ldrb	r2, [r7, #3]
 8011bea:	4611      	mov	r1, r2
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f8 f8e4 	bl	8009dba <HAL_PCD_EP_ClrStall>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bf6:	7bfb      	ldrb	r3, [r7, #15]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f000 f8fd 	bl	8011df8 <USBD_Get_USB_Status>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b085      	sub	sp, #20
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	460b      	mov	r3, r1
 8011c16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	da0c      	bge.n	8011c42 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c28:	78fb      	ldrb	r3, [r7, #3]
 8011c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c2e:	68f9      	ldr	r1, [r7, #12]
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	4613      	mov	r3, r2
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	4413      	add	r3, r2
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	440b      	add	r3, r1
 8011c3c:	3302      	adds	r3, #2
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	e00b      	b.n	8011c5a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c42:	78fb      	ldrb	r3, [r7, #3]
 8011c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c48:	68f9      	ldr	r1, [r7, #12]
 8011c4a:	4613      	mov	r3, r2
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4413      	add	r3, r2
 8011c50:	00db      	lsls	r3, r3, #3
 8011c52:	440b      	add	r3, r1
 8011c54:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011c58:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3714      	adds	r7, #20
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr

08011c66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b084      	sub	sp, #16
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
 8011c6e:	460b      	mov	r3, r1
 8011c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c76:	2300      	movs	r3, #0
 8011c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c80:	78fa      	ldrb	r2, [r7, #3]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7f7 fedb 	bl	8009a40 <HAL_PCD_SetAddress>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c8e:	7bfb      	ldrb	r3, [r7, #15]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 f8b1 	bl	8011df8 <USBD_Get_USB_Status>
 8011c96:	4603      	mov	r3, r0
 8011c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b086      	sub	sp, #24
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	607a      	str	r2, [r7, #4]
 8011cae:	603b      	str	r3, [r7, #0]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011cc2:	7af9      	ldrb	r1, [r7, #11]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	f7f7 ffe2 	bl	8009c90 <HAL_PCD_EP_Transmit>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd0:	7dfb      	ldrb	r3, [r7, #23]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f000 f890 	bl	8011df8 <USBD_Get_USB_Status>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}

08011ce6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011ce6:	b580      	push	{r7, lr}
 8011ce8:	b086      	sub	sp, #24
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	60f8      	str	r0, [r7, #12]
 8011cee:	607a      	str	r2, [r7, #4]
 8011cf0:	603b      	str	r3, [r7, #0]
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d04:	7af9      	ldrb	r1, [r7, #11]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	f7f7 ff6c 	bl	8009be6 <HAL_PCD_EP_Receive>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d12:	7dfb      	ldrb	r3, [r7, #23]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 f86f 	bl	8011df8 <USBD_Get_USB_Status>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3718      	adds	r7, #24
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d3a:	78fa      	ldrb	r2, [r7, #3]
 8011d3c:	4611      	mov	r1, r2
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7f7 ff8e 	bl	8009c60 <HAL_PCD_EP_GetRxCount>
 8011d44:	4603      	mov	r3, r0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
	...

08011d50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011d5c:	78fb      	ldrb	r3, [r7, #3]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d002      	beq.n	8011d68 <HAL_PCDEx_LPM_Callback+0x18>
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d013      	beq.n	8011d8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011d66:	e023      	b.n	8011db0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	699b      	ldr	r3, [r3, #24]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d007      	beq.n	8011d80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011d70:	f000 f83c 	bl	8011dec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d74:	4b10      	ldr	r3, [pc, #64]	; (8011db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011d76:	691b      	ldr	r3, [r3, #16]
 8011d78:	4a0f      	ldr	r2, [pc, #60]	; (8011db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011d7a:	f023 0306 	bic.w	r3, r3, #6
 8011d7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fe fcb0 	bl	80106ec <USBD_LL_Resume>
    break;
 8011d8c:	e010      	b.n	8011db0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fe fc93 	bl	80106c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	699b      	ldr	r3, [r3, #24]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d005      	beq.n	8011dae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011da2:	4b05      	ldr	r3, [pc, #20]	; (8011db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	4a04      	ldr	r2, [pc, #16]	; (8011db8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011da8:	f043 0306 	orr.w	r3, r3, #6
 8011dac:	6113      	str	r3, [r2, #16]
    break;
 8011dae:	bf00      	nop
}
 8011db0:	bf00      	nop
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	e000ed00 	.word	0xe000ed00

08011dbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011dc4:	4b03      	ldr	r3, [pc, #12]	; (8011dd4 <USBD_static_malloc+0x18>)
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	200024e8 	.word	0x200024e8

08011dd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]

}
 8011de0:	bf00      	nop
 8011de2:	370c      	adds	r7, #12
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr

08011dec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011df0:	f7f3 fd54 	bl	800589c <SystemClock_Config>
}
 8011df4:	bf00      	nop
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011e06:	79fb      	ldrb	r3, [r7, #7]
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d817      	bhi.n	8011e3c <USBD_Get_USB_Status+0x44>
 8011e0c:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <USBD_Get_USB_Status+0x1c>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	08011e25 	.word	0x08011e25
 8011e18:	08011e2b 	.word	0x08011e2b
 8011e1c:	08011e31 	.word	0x08011e31
 8011e20:	08011e37 	.word	0x08011e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e24:	2300      	movs	r3, #0
 8011e26:	73fb      	strb	r3, [r7, #15]
    break;
 8011e28:	e00b      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e2a:	2303      	movs	r3, #3
 8011e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e2e:	e008      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e30:	2301      	movs	r3, #1
 8011e32:	73fb      	strb	r3, [r7, #15]
    break;
 8011e34:	e005      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e36:	2303      	movs	r3, #3
 8011e38:	73fb      	strb	r3, [r7, #15]
    break;
 8011e3a:	e002      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e40:	bf00      	nop
  }
  return usb_status;
 8011e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <_ZdlPv>:
 8011e50:	f000 ba6a 	b.w	8012328 <free>

08011e54 <_Znwj>:
 8011e54:	2801      	cmp	r0, #1
 8011e56:	bf38      	it	cc
 8011e58:	2001      	movcc	r0, #1
 8011e5a:	b510      	push	{r4, lr}
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f000 fa5a 	bl	8012318 <malloc>
 8011e64:	b930      	cbnz	r0, 8011e74 <_Znwj+0x20>
 8011e66:	f000 f80d 	bl	8011e84 <_ZSt15get_new_handlerv>
 8011e6a:	b908      	cbnz	r0, 8011e70 <_Znwj+0x1c>
 8011e6c:	f000 fa22 	bl	80122b4 <abort>
 8011e70:	4780      	blx	r0
 8011e72:	e7f4      	b.n	8011e5e <_Znwj+0xa>
 8011e74:	bd10      	pop	{r4, pc}

08011e76 <_ZSt17__throw_bad_allocv>:
 8011e76:	b508      	push	{r3, lr}
 8011e78:	f000 fa1c 	bl	80122b4 <abort>

08011e7c <_ZSt20__throw_length_errorPKc>:
 8011e7c:	b508      	push	{r3, lr}
 8011e7e:	f000 fa19 	bl	80122b4 <abort>
	...

08011e84 <_ZSt15get_new_handlerv>:
 8011e84:	4b02      	ldr	r3, [pc, #8]	; (8011e90 <_ZSt15get_new_handlerv+0xc>)
 8011e86:	6818      	ldr	r0, [r3, #0]
 8011e88:	f3bf 8f5b 	dmb	ish
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	20002708 	.word	0x20002708

08011e94 <sqrt>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	ed2d 8b02 	vpush	{d8}
 8011e9a:	ec55 4b10 	vmov	r4, r5, d0
 8011e9e:	f000 f85f 	bl	8011f60 <__ieee754_sqrt>
 8011ea2:	4b15      	ldr	r3, [pc, #84]	; (8011ef8 <sqrt+0x64>)
 8011ea4:	eeb0 8a40 	vmov.f32	s16, s0
 8011ea8:	eef0 8a60 	vmov.f32	s17, s1
 8011eac:	f993 3000 	ldrsb.w	r3, [r3]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	d019      	beq.n	8011ee8 <sqrt+0x54>
 8011eb4:	4622      	mov	r2, r4
 8011eb6:	462b      	mov	r3, r5
 8011eb8:	4620      	mov	r0, r4
 8011eba:	4629      	mov	r1, r5
 8011ebc:	f7ee fe5e 	bl	8000b7c <__aeabi_dcmpun>
 8011ec0:	b990      	cbnz	r0, 8011ee8 <sqrt+0x54>
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	4629      	mov	r1, r5
 8011eca:	f7ee fe2f 	bl	8000b2c <__aeabi_dcmplt>
 8011ece:	b158      	cbz	r0, 8011ee8 <sqrt+0x54>
 8011ed0:	f000 f9f8 	bl	80122c4 <__errno>
 8011ed4:	2321      	movs	r3, #33	; 0x21
 8011ed6:	6003      	str	r3, [r0, #0]
 8011ed8:	2200      	movs	r2, #0
 8011eda:	2300      	movs	r3, #0
 8011edc:	4610      	mov	r0, r2
 8011ede:	4619      	mov	r1, r3
 8011ee0:	f7ee fcdc 	bl	800089c <__aeabi_ddiv>
 8011ee4:	ec41 0b18 	vmov	d8, r0, r1
 8011ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8011eec:	eef0 0a68 	vmov.f32	s1, s17
 8011ef0:	ecbd 8b02 	vpop	{d8}
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	2000019a 	.word	0x2000019a

08011efc <asinf>:
 8011efc:	b508      	push	{r3, lr}
 8011efe:	ed2d 8b02 	vpush	{d8}
 8011f02:	eeb0 8a40 	vmov.f32	s16, s0
 8011f06:	f000 f8df 	bl	80120c8 <__ieee754_asinf>
 8011f0a:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <asinf+0x5c>)
 8011f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8011f10:	3301      	adds	r3, #1
 8011f12:	eef0 8a40 	vmov.f32	s17, s0
 8011f16:	d01a      	beq.n	8011f4e <asinf+0x52>
 8011f18:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f20:	d615      	bvs.n	8011f4e <asinf+0x52>
 8011f22:	eeb0 0a48 	vmov.f32	s0, s16
 8011f26:	f000 f9b8 	bl	801229a <fabsf>
 8011f2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f36:	dd0a      	ble.n	8011f4e <asinf+0x52>
 8011f38:	f000 f9c4 	bl	80122c4 <__errno>
 8011f3c:	ecbd 8b02 	vpop	{d8}
 8011f40:	2321      	movs	r3, #33	; 0x21
 8011f42:	6003      	str	r3, [r0, #0]
 8011f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011f48:	4804      	ldr	r0, [pc, #16]	; (8011f5c <asinf+0x60>)
 8011f4a:	f000 b9ad 	b.w	80122a8 <nanf>
 8011f4e:	eeb0 0a68 	vmov.f32	s0, s17
 8011f52:	ecbd 8b02 	vpop	{d8}
 8011f56:	bd08      	pop	{r3, pc}
 8011f58:	2000019a 	.word	0x2000019a
 8011f5c:	08017138 	.word	0x08017138

08011f60 <__ieee754_sqrt>:
 8011f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f64:	ec55 4b10 	vmov	r4, r5, d0
 8011f68:	4e56      	ldr	r6, [pc, #344]	; (80120c4 <__ieee754_sqrt+0x164>)
 8011f6a:	43ae      	bics	r6, r5
 8011f6c:	ee10 0a10 	vmov	r0, s0
 8011f70:	ee10 3a10 	vmov	r3, s0
 8011f74:	4629      	mov	r1, r5
 8011f76:	462a      	mov	r2, r5
 8011f78:	d110      	bne.n	8011f9c <__ieee754_sqrt+0x3c>
 8011f7a:	ee10 2a10 	vmov	r2, s0
 8011f7e:	462b      	mov	r3, r5
 8011f80:	f7ee fb62 	bl	8000648 <__aeabi_dmul>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee f9a6 	bl	80002dc <__adddf3>
 8011f90:	4604      	mov	r4, r0
 8011f92:	460d      	mov	r5, r1
 8011f94:	ec45 4b10 	vmov	d0, r4, r5
 8011f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f9c:	2d00      	cmp	r5, #0
 8011f9e:	dc10      	bgt.n	8011fc2 <__ieee754_sqrt+0x62>
 8011fa0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011fa4:	4330      	orrs	r0, r6
 8011fa6:	d0f5      	beq.n	8011f94 <__ieee754_sqrt+0x34>
 8011fa8:	b15d      	cbz	r5, 8011fc2 <__ieee754_sqrt+0x62>
 8011faa:	ee10 2a10 	vmov	r2, s0
 8011fae:	462b      	mov	r3, r5
 8011fb0:	ee10 0a10 	vmov	r0, s0
 8011fb4:	f7ee f990 	bl	80002d8 <__aeabi_dsub>
 8011fb8:	4602      	mov	r2, r0
 8011fba:	460b      	mov	r3, r1
 8011fbc:	f7ee fc6e 	bl	800089c <__aeabi_ddiv>
 8011fc0:	e7e6      	b.n	8011f90 <__ieee754_sqrt+0x30>
 8011fc2:	1509      	asrs	r1, r1, #20
 8011fc4:	d076      	beq.n	80120b4 <__ieee754_sqrt+0x154>
 8011fc6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011fca:	07ce      	lsls	r6, r1, #31
 8011fcc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011fd0:	bf5e      	ittt	pl
 8011fd2:	0fda      	lsrpl	r2, r3, #31
 8011fd4:	005b      	lslpl	r3, r3, #1
 8011fd6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8011fda:	0fda      	lsrs	r2, r3, #31
 8011fdc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011fe0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	106d      	asrs	r5, r5, #1
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	f04f 0e16 	mov.w	lr, #22
 8011fee:	4684      	mov	ip, r0
 8011ff0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011ff4:	eb0c 0401 	add.w	r4, ip, r1
 8011ff8:	4294      	cmp	r4, r2
 8011ffa:	bfde      	ittt	le
 8011ffc:	1b12      	suble	r2, r2, r4
 8011ffe:	eb04 0c01 	addle.w	ip, r4, r1
 8012002:	1840      	addle	r0, r0, r1
 8012004:	0052      	lsls	r2, r2, #1
 8012006:	f1be 0e01 	subs.w	lr, lr, #1
 801200a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801200e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012012:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012016:	d1ed      	bne.n	8011ff4 <__ieee754_sqrt+0x94>
 8012018:	4671      	mov	r1, lr
 801201a:	2720      	movs	r7, #32
 801201c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012020:	4562      	cmp	r2, ip
 8012022:	eb04 060e 	add.w	r6, r4, lr
 8012026:	dc02      	bgt.n	801202e <__ieee754_sqrt+0xce>
 8012028:	d113      	bne.n	8012052 <__ieee754_sqrt+0xf2>
 801202a:	429e      	cmp	r6, r3
 801202c:	d811      	bhi.n	8012052 <__ieee754_sqrt+0xf2>
 801202e:	2e00      	cmp	r6, #0
 8012030:	eb06 0e04 	add.w	lr, r6, r4
 8012034:	da43      	bge.n	80120be <__ieee754_sqrt+0x15e>
 8012036:	f1be 0f00 	cmp.w	lr, #0
 801203a:	db40      	blt.n	80120be <__ieee754_sqrt+0x15e>
 801203c:	f10c 0801 	add.w	r8, ip, #1
 8012040:	eba2 020c 	sub.w	r2, r2, ip
 8012044:	429e      	cmp	r6, r3
 8012046:	bf88      	it	hi
 8012048:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801204c:	1b9b      	subs	r3, r3, r6
 801204e:	4421      	add	r1, r4
 8012050:	46c4      	mov	ip, r8
 8012052:	0052      	lsls	r2, r2, #1
 8012054:	3f01      	subs	r7, #1
 8012056:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801205a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801205e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012062:	d1dd      	bne.n	8012020 <__ieee754_sqrt+0xc0>
 8012064:	4313      	orrs	r3, r2
 8012066:	d006      	beq.n	8012076 <__ieee754_sqrt+0x116>
 8012068:	1c4c      	adds	r4, r1, #1
 801206a:	bf13      	iteet	ne
 801206c:	3101      	addne	r1, #1
 801206e:	3001      	addeq	r0, #1
 8012070:	4639      	moveq	r1, r7
 8012072:	f021 0101 	bicne.w	r1, r1, #1
 8012076:	1043      	asrs	r3, r0, #1
 8012078:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801207c:	0849      	lsrs	r1, r1, #1
 801207e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012082:	07c2      	lsls	r2, r0, #31
 8012084:	bf48      	it	mi
 8012086:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801208a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801208e:	460c      	mov	r4, r1
 8012090:	463d      	mov	r5, r7
 8012092:	e77f      	b.n	8011f94 <__ieee754_sqrt+0x34>
 8012094:	0ada      	lsrs	r2, r3, #11
 8012096:	3815      	subs	r0, #21
 8012098:	055b      	lsls	r3, r3, #21
 801209a:	2a00      	cmp	r2, #0
 801209c:	d0fa      	beq.n	8012094 <__ieee754_sqrt+0x134>
 801209e:	02d7      	lsls	r7, r2, #11
 80120a0:	d50a      	bpl.n	80120b8 <__ieee754_sqrt+0x158>
 80120a2:	f1c1 0420 	rsb	r4, r1, #32
 80120a6:	fa23 f404 	lsr.w	r4, r3, r4
 80120aa:	1e4d      	subs	r5, r1, #1
 80120ac:	408b      	lsls	r3, r1
 80120ae:	4322      	orrs	r2, r4
 80120b0:	1b41      	subs	r1, r0, r5
 80120b2:	e788      	b.n	8011fc6 <__ieee754_sqrt+0x66>
 80120b4:	4608      	mov	r0, r1
 80120b6:	e7f0      	b.n	801209a <__ieee754_sqrt+0x13a>
 80120b8:	0052      	lsls	r2, r2, #1
 80120ba:	3101      	adds	r1, #1
 80120bc:	e7ef      	b.n	801209e <__ieee754_sqrt+0x13e>
 80120be:	46e0      	mov	r8, ip
 80120c0:	e7be      	b.n	8012040 <__ieee754_sqrt+0xe0>
 80120c2:	bf00      	nop
 80120c4:	7ff00000 	.word	0x7ff00000

080120c8 <__ieee754_asinf>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	ee10 5a10 	vmov	r5, s0
 80120ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80120d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80120d6:	ed2d 8b04 	vpush	{d8-d9}
 80120da:	d10c      	bne.n	80120f6 <__ieee754_asinf+0x2e>
 80120dc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012254 <__ieee754_asinf+0x18c>
 80120e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012258 <__ieee754_asinf+0x190>
 80120e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80120e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80120ec:	eeb0 0a67 	vmov.f32	s0, s15
 80120f0:	ecbd 8b04 	vpop	{d8-d9}
 80120f4:	bd38      	pop	{r3, r4, r5, pc}
 80120f6:	dd04      	ble.n	8012102 <__ieee754_asinf+0x3a>
 80120f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80120fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012100:	e7f6      	b.n	80120f0 <__ieee754_asinf+0x28>
 8012102:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012106:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801210a:	da0b      	bge.n	8012124 <__ieee754_asinf+0x5c>
 801210c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012110:	da52      	bge.n	80121b8 <__ieee754_asinf+0xf0>
 8012112:	eddf 7a52 	vldr	s15, [pc, #328]	; 801225c <__ieee754_asinf+0x194>
 8012116:	ee70 7a27 	vadd.f32	s15, s0, s15
 801211a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	dce5      	bgt.n	80120f0 <__ieee754_asinf+0x28>
 8012124:	f000 f8b9 	bl	801229a <fabsf>
 8012128:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801212c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012130:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012134:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012260 <__ieee754_asinf+0x198>
 8012138:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012264 <__ieee754_asinf+0x19c>
 801213c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012268 <__ieee754_asinf+0x1a0>
 8012140:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012144:	eddf 7a49 	vldr	s15, [pc, #292]	; 801226c <__ieee754_asinf+0x1a4>
 8012148:	eee7 7a08 	vfma.f32	s15, s14, s16
 801214c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012270 <__ieee754_asinf+0x1a8>
 8012150:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012154:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012274 <__ieee754_asinf+0x1ac>
 8012158:	eee7 7a08 	vfma.f32	s15, s14, s16
 801215c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012278 <__ieee754_asinf+0x1b0>
 8012160:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012164:	eddf 7a45 	vldr	s15, [pc, #276]	; 801227c <__ieee754_asinf+0x1b4>
 8012168:	eee8 7a07 	vfma.f32	s15, s16, s14
 801216c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012280 <__ieee754_asinf+0x1b8>
 8012170:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012174:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012284 <__ieee754_asinf+0x1bc>
 8012178:	eee7 7a08 	vfma.f32	s15, s14, s16
 801217c:	eeb0 0a48 	vmov.f32	s0, s16
 8012180:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012184:	f000 f886 	bl	8012294 <__ieee754_sqrtf>
 8012188:	4b3f      	ldr	r3, [pc, #252]	; (8012288 <__ieee754_asinf+0x1c0>)
 801218a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801218e:	429c      	cmp	r4, r3
 8012190:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012194:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012198:	dd3d      	ble.n	8012216 <__ieee754_asinf+0x14e>
 801219a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801219e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801228c <__ieee754_asinf+0x1c4>
 80121a2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80121a6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012258 <__ieee754_asinf+0x190>
 80121aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	bfd8      	it	le
 80121b2:	eeb1 0a40 	vnegle.f32	s0, s0
 80121b6:	e79b      	b.n	80120f0 <__ieee754_asinf+0x28>
 80121b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80121bc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012260 <__ieee754_asinf+0x198>
 80121c0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012264 <__ieee754_asinf+0x19c>
 80121c4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012278 <__ieee754_asinf+0x1b0>
 80121c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80121cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 801226c <__ieee754_asinf+0x1a4>
 80121d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80121d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012270 <__ieee754_asinf+0x1a8>
 80121d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012274 <__ieee754_asinf+0x1ac>
 80121e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80121e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012268 <__ieee754_asinf+0x1a0>
 80121e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80121ec:	eddf 6a23 	vldr	s13, [pc, #140]	; 801227c <__ieee754_asinf+0x1b4>
 80121f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80121f4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012280 <__ieee754_asinf+0x1b8>
 80121f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80121fc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012284 <__ieee754_asinf+0x1bc>
 8012200:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012208:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801220c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012210:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012214:	e76c      	b.n	80120f0 <__ieee754_asinf+0x28>
 8012216:	ee10 3a10 	vmov	r3, s0
 801221a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801221e:	f023 030f 	bic.w	r3, r3, #15
 8012222:	ee07 3a10 	vmov	s14, r3
 8012226:	eea7 8a47 	vfms.f32	s16, s14, s14
 801222a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801222e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012232:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012236:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012254 <__ieee754_asinf+0x18c>
 801223a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801223e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012242:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012290 <__ieee754_asinf+0x1c8>
 8012246:	eeb0 6a40 	vmov.f32	s12, s0
 801224a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801224e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012252:	e7aa      	b.n	80121aa <__ieee754_asinf+0xe2>
 8012254:	b33bbd2e 	.word	0xb33bbd2e
 8012258:	3fc90fdb 	.word	0x3fc90fdb
 801225c:	7149f2ca 	.word	0x7149f2ca
 8012260:	3811ef08 	.word	0x3811ef08
 8012264:	3a4f7f04 	.word	0x3a4f7f04
 8012268:	3e2aaaab 	.word	0x3e2aaaab
 801226c:	bd241146 	.word	0xbd241146
 8012270:	3e4e0aa8 	.word	0x3e4e0aa8
 8012274:	bea6b090 	.word	0xbea6b090
 8012278:	3d9dc62e 	.word	0x3d9dc62e
 801227c:	bf303361 	.word	0xbf303361
 8012280:	4001572d 	.word	0x4001572d
 8012284:	c019d139 	.word	0xc019d139
 8012288:	3f799999 	.word	0x3f799999
 801228c:	333bbd2e 	.word	0x333bbd2e
 8012290:	3f490fdb 	.word	0x3f490fdb

08012294 <__ieee754_sqrtf>:
 8012294:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012298:	4770      	bx	lr

0801229a <fabsf>:
 801229a:	ee10 3a10 	vmov	r3, s0
 801229e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122a2:	ee00 3a10 	vmov	s0, r3
 80122a6:	4770      	bx	lr

080122a8 <nanf>:
 80122a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80122b0 <nanf+0x8>
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	7fc00000 	.word	0x7fc00000

080122b4 <abort>:
 80122b4:	b508      	push	{r3, lr}
 80122b6:	2006      	movs	r0, #6
 80122b8:	f000 ffca 	bl	8013250 <raise>
 80122bc:	2001      	movs	r0, #1
 80122be:	f7f5 fd61 	bl	8007d84 <_exit>
	...

080122c4 <__errno>:
 80122c4:	4b01      	ldr	r3, [pc, #4]	; (80122cc <__errno+0x8>)
 80122c6:	6818      	ldr	r0, [r3, #0]
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	2000019c 	.word	0x2000019c

080122d0 <__libc_init_array>:
 80122d0:	b570      	push	{r4, r5, r6, lr}
 80122d2:	4d0d      	ldr	r5, [pc, #52]	; (8012308 <__libc_init_array+0x38>)
 80122d4:	4c0d      	ldr	r4, [pc, #52]	; (801230c <__libc_init_array+0x3c>)
 80122d6:	1b64      	subs	r4, r4, r5
 80122d8:	10a4      	asrs	r4, r4, #2
 80122da:	2600      	movs	r6, #0
 80122dc:	42a6      	cmp	r6, r4
 80122de:	d109      	bne.n	80122f4 <__libc_init_array+0x24>
 80122e0:	4d0b      	ldr	r5, [pc, #44]	; (8012310 <__libc_init_array+0x40>)
 80122e2:	4c0c      	ldr	r4, [pc, #48]	; (8012314 <__libc_init_array+0x44>)
 80122e4:	f004 fc3e 	bl	8016b64 <_init>
 80122e8:	1b64      	subs	r4, r4, r5
 80122ea:	10a4      	asrs	r4, r4, #2
 80122ec:	2600      	movs	r6, #0
 80122ee:	42a6      	cmp	r6, r4
 80122f0:	d105      	bne.n	80122fe <__libc_init_array+0x2e>
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
 80122f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80122f8:	4798      	blx	r3
 80122fa:	3601      	adds	r6, #1
 80122fc:	e7ee      	b.n	80122dc <__libc_init_array+0xc>
 80122fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012302:	4798      	blx	r3
 8012304:	3601      	adds	r6, #1
 8012306:	e7f2      	b.n	80122ee <__libc_init_array+0x1e>
 8012308:	0801719c 	.word	0x0801719c
 801230c:	0801719c 	.word	0x0801719c
 8012310:	0801719c 	.word	0x0801719c
 8012314:	080171a4 	.word	0x080171a4

08012318 <malloc>:
 8012318:	4b02      	ldr	r3, [pc, #8]	; (8012324 <malloc+0xc>)
 801231a:	4601      	mov	r1, r0
 801231c:	6818      	ldr	r0, [r3, #0]
 801231e:	f000 b88b 	b.w	8012438 <_malloc_r>
 8012322:	bf00      	nop
 8012324:	2000019c 	.word	0x2000019c

08012328 <free>:
 8012328:	4b02      	ldr	r3, [pc, #8]	; (8012334 <free+0xc>)
 801232a:	4601      	mov	r1, r0
 801232c:	6818      	ldr	r0, [r3, #0]
 801232e:	f000 b833 	b.w	8012398 <_free_r>
 8012332:	bf00      	nop
 8012334:	2000019c 	.word	0x2000019c

08012338 <memcpy>:
 8012338:	440a      	add	r2, r1
 801233a:	4291      	cmp	r1, r2
 801233c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012340:	d100      	bne.n	8012344 <memcpy+0xc>
 8012342:	4770      	bx	lr
 8012344:	b510      	push	{r4, lr}
 8012346:	f811 4b01 	ldrb.w	r4, [r1], #1
 801234a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801234e:	4291      	cmp	r1, r2
 8012350:	d1f9      	bne.n	8012346 <memcpy+0xe>
 8012352:	bd10      	pop	{r4, pc}

08012354 <memmove>:
 8012354:	4288      	cmp	r0, r1
 8012356:	b510      	push	{r4, lr}
 8012358:	eb01 0402 	add.w	r4, r1, r2
 801235c:	d902      	bls.n	8012364 <memmove+0x10>
 801235e:	4284      	cmp	r4, r0
 8012360:	4623      	mov	r3, r4
 8012362:	d807      	bhi.n	8012374 <memmove+0x20>
 8012364:	1e43      	subs	r3, r0, #1
 8012366:	42a1      	cmp	r1, r4
 8012368:	d008      	beq.n	801237c <memmove+0x28>
 801236a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801236e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012372:	e7f8      	b.n	8012366 <memmove+0x12>
 8012374:	4402      	add	r2, r0
 8012376:	4601      	mov	r1, r0
 8012378:	428a      	cmp	r2, r1
 801237a:	d100      	bne.n	801237e <memmove+0x2a>
 801237c:	bd10      	pop	{r4, pc}
 801237e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012386:	e7f7      	b.n	8012378 <memmove+0x24>

08012388 <memset>:
 8012388:	4402      	add	r2, r0
 801238a:	4603      	mov	r3, r0
 801238c:	4293      	cmp	r3, r2
 801238e:	d100      	bne.n	8012392 <memset+0xa>
 8012390:	4770      	bx	lr
 8012392:	f803 1b01 	strb.w	r1, [r3], #1
 8012396:	e7f9      	b.n	801238c <memset+0x4>

08012398 <_free_r>:
 8012398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801239a:	2900      	cmp	r1, #0
 801239c:	d048      	beq.n	8012430 <_free_r+0x98>
 801239e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123a2:	9001      	str	r0, [sp, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	f1a1 0404 	sub.w	r4, r1, #4
 80123aa:	bfb8      	it	lt
 80123ac:	18e4      	addlt	r4, r4, r3
 80123ae:	f003 f83d 	bl	801542c <__malloc_lock>
 80123b2:	4a20      	ldr	r2, [pc, #128]	; (8012434 <_free_r+0x9c>)
 80123b4:	9801      	ldr	r0, [sp, #4]
 80123b6:	6813      	ldr	r3, [r2, #0]
 80123b8:	4615      	mov	r5, r2
 80123ba:	b933      	cbnz	r3, 80123ca <_free_r+0x32>
 80123bc:	6063      	str	r3, [r4, #4]
 80123be:	6014      	str	r4, [r2, #0]
 80123c0:	b003      	add	sp, #12
 80123c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123c6:	f003 b837 	b.w	8015438 <__malloc_unlock>
 80123ca:	42a3      	cmp	r3, r4
 80123cc:	d90b      	bls.n	80123e6 <_free_r+0x4e>
 80123ce:	6821      	ldr	r1, [r4, #0]
 80123d0:	1862      	adds	r2, r4, r1
 80123d2:	4293      	cmp	r3, r2
 80123d4:	bf04      	itt	eq
 80123d6:	681a      	ldreq	r2, [r3, #0]
 80123d8:	685b      	ldreq	r3, [r3, #4]
 80123da:	6063      	str	r3, [r4, #4]
 80123dc:	bf04      	itt	eq
 80123de:	1852      	addeq	r2, r2, r1
 80123e0:	6022      	streq	r2, [r4, #0]
 80123e2:	602c      	str	r4, [r5, #0]
 80123e4:	e7ec      	b.n	80123c0 <_free_r+0x28>
 80123e6:	461a      	mov	r2, r3
 80123e8:	685b      	ldr	r3, [r3, #4]
 80123ea:	b10b      	cbz	r3, 80123f0 <_free_r+0x58>
 80123ec:	42a3      	cmp	r3, r4
 80123ee:	d9fa      	bls.n	80123e6 <_free_r+0x4e>
 80123f0:	6811      	ldr	r1, [r2, #0]
 80123f2:	1855      	adds	r5, r2, r1
 80123f4:	42a5      	cmp	r5, r4
 80123f6:	d10b      	bne.n	8012410 <_free_r+0x78>
 80123f8:	6824      	ldr	r4, [r4, #0]
 80123fa:	4421      	add	r1, r4
 80123fc:	1854      	adds	r4, r2, r1
 80123fe:	42a3      	cmp	r3, r4
 8012400:	6011      	str	r1, [r2, #0]
 8012402:	d1dd      	bne.n	80123c0 <_free_r+0x28>
 8012404:	681c      	ldr	r4, [r3, #0]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	6053      	str	r3, [r2, #4]
 801240a:	4421      	add	r1, r4
 801240c:	6011      	str	r1, [r2, #0]
 801240e:	e7d7      	b.n	80123c0 <_free_r+0x28>
 8012410:	d902      	bls.n	8012418 <_free_r+0x80>
 8012412:	230c      	movs	r3, #12
 8012414:	6003      	str	r3, [r0, #0]
 8012416:	e7d3      	b.n	80123c0 <_free_r+0x28>
 8012418:	6825      	ldr	r5, [r4, #0]
 801241a:	1961      	adds	r1, r4, r5
 801241c:	428b      	cmp	r3, r1
 801241e:	bf04      	itt	eq
 8012420:	6819      	ldreq	r1, [r3, #0]
 8012422:	685b      	ldreq	r3, [r3, #4]
 8012424:	6063      	str	r3, [r4, #4]
 8012426:	bf04      	itt	eq
 8012428:	1949      	addeq	r1, r1, r5
 801242a:	6021      	streq	r1, [r4, #0]
 801242c:	6054      	str	r4, [r2, #4]
 801242e:	e7c7      	b.n	80123c0 <_free_r+0x28>
 8012430:	b003      	add	sp, #12
 8012432:	bd30      	pop	{r4, r5, pc}
 8012434:	2000270c 	.word	0x2000270c

08012438 <_malloc_r>:
 8012438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801243a:	1ccd      	adds	r5, r1, #3
 801243c:	f025 0503 	bic.w	r5, r5, #3
 8012440:	3508      	adds	r5, #8
 8012442:	2d0c      	cmp	r5, #12
 8012444:	bf38      	it	cc
 8012446:	250c      	movcc	r5, #12
 8012448:	2d00      	cmp	r5, #0
 801244a:	4606      	mov	r6, r0
 801244c:	db01      	blt.n	8012452 <_malloc_r+0x1a>
 801244e:	42a9      	cmp	r1, r5
 8012450:	d903      	bls.n	801245a <_malloc_r+0x22>
 8012452:	230c      	movs	r3, #12
 8012454:	6033      	str	r3, [r6, #0]
 8012456:	2000      	movs	r0, #0
 8012458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801245a:	f002 ffe7 	bl	801542c <__malloc_lock>
 801245e:	4921      	ldr	r1, [pc, #132]	; (80124e4 <_malloc_r+0xac>)
 8012460:	680a      	ldr	r2, [r1, #0]
 8012462:	4614      	mov	r4, r2
 8012464:	b99c      	cbnz	r4, 801248e <_malloc_r+0x56>
 8012466:	4f20      	ldr	r7, [pc, #128]	; (80124e8 <_malloc_r+0xb0>)
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	b923      	cbnz	r3, 8012476 <_malloc_r+0x3e>
 801246c:	4621      	mov	r1, r4
 801246e:	4630      	mov	r0, r6
 8012470:	f000 feb6 	bl	80131e0 <_sbrk_r>
 8012474:	6038      	str	r0, [r7, #0]
 8012476:	4629      	mov	r1, r5
 8012478:	4630      	mov	r0, r6
 801247a:	f000 feb1 	bl	80131e0 <_sbrk_r>
 801247e:	1c43      	adds	r3, r0, #1
 8012480:	d123      	bne.n	80124ca <_malloc_r+0x92>
 8012482:	230c      	movs	r3, #12
 8012484:	6033      	str	r3, [r6, #0]
 8012486:	4630      	mov	r0, r6
 8012488:	f002 ffd6 	bl	8015438 <__malloc_unlock>
 801248c:	e7e3      	b.n	8012456 <_malloc_r+0x1e>
 801248e:	6823      	ldr	r3, [r4, #0]
 8012490:	1b5b      	subs	r3, r3, r5
 8012492:	d417      	bmi.n	80124c4 <_malloc_r+0x8c>
 8012494:	2b0b      	cmp	r3, #11
 8012496:	d903      	bls.n	80124a0 <_malloc_r+0x68>
 8012498:	6023      	str	r3, [r4, #0]
 801249a:	441c      	add	r4, r3
 801249c:	6025      	str	r5, [r4, #0]
 801249e:	e004      	b.n	80124aa <_malloc_r+0x72>
 80124a0:	6863      	ldr	r3, [r4, #4]
 80124a2:	42a2      	cmp	r2, r4
 80124a4:	bf0c      	ite	eq
 80124a6:	600b      	streq	r3, [r1, #0]
 80124a8:	6053      	strne	r3, [r2, #4]
 80124aa:	4630      	mov	r0, r6
 80124ac:	f002 ffc4 	bl	8015438 <__malloc_unlock>
 80124b0:	f104 000b 	add.w	r0, r4, #11
 80124b4:	1d23      	adds	r3, r4, #4
 80124b6:	f020 0007 	bic.w	r0, r0, #7
 80124ba:	1ac2      	subs	r2, r0, r3
 80124bc:	d0cc      	beq.n	8012458 <_malloc_r+0x20>
 80124be:	1a1b      	subs	r3, r3, r0
 80124c0:	50a3      	str	r3, [r4, r2]
 80124c2:	e7c9      	b.n	8012458 <_malloc_r+0x20>
 80124c4:	4622      	mov	r2, r4
 80124c6:	6864      	ldr	r4, [r4, #4]
 80124c8:	e7cc      	b.n	8012464 <_malloc_r+0x2c>
 80124ca:	1cc4      	adds	r4, r0, #3
 80124cc:	f024 0403 	bic.w	r4, r4, #3
 80124d0:	42a0      	cmp	r0, r4
 80124d2:	d0e3      	beq.n	801249c <_malloc_r+0x64>
 80124d4:	1a21      	subs	r1, r4, r0
 80124d6:	4630      	mov	r0, r6
 80124d8:	f000 fe82 	bl	80131e0 <_sbrk_r>
 80124dc:	3001      	adds	r0, #1
 80124de:	d1dd      	bne.n	801249c <_malloc_r+0x64>
 80124e0:	e7cf      	b.n	8012482 <_malloc_r+0x4a>
 80124e2:	bf00      	nop
 80124e4:	2000270c 	.word	0x2000270c
 80124e8:	20002710 	.word	0x20002710

080124ec <__cvt>:
 80124ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124f0:	ec55 4b10 	vmov	r4, r5, d0
 80124f4:	2d00      	cmp	r5, #0
 80124f6:	460e      	mov	r6, r1
 80124f8:	4619      	mov	r1, r3
 80124fa:	462b      	mov	r3, r5
 80124fc:	bfbb      	ittet	lt
 80124fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012502:	461d      	movlt	r5, r3
 8012504:	2300      	movge	r3, #0
 8012506:	232d      	movlt	r3, #45	; 0x2d
 8012508:	700b      	strb	r3, [r1, #0]
 801250a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801250c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012510:	4691      	mov	r9, r2
 8012512:	f023 0820 	bic.w	r8, r3, #32
 8012516:	bfbc      	itt	lt
 8012518:	4622      	movlt	r2, r4
 801251a:	4614      	movlt	r4, r2
 801251c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012520:	d005      	beq.n	801252e <__cvt+0x42>
 8012522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012526:	d100      	bne.n	801252a <__cvt+0x3e>
 8012528:	3601      	adds	r6, #1
 801252a:	2102      	movs	r1, #2
 801252c:	e000      	b.n	8012530 <__cvt+0x44>
 801252e:	2103      	movs	r1, #3
 8012530:	ab03      	add	r3, sp, #12
 8012532:	9301      	str	r3, [sp, #4]
 8012534:	ab02      	add	r3, sp, #8
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	ec45 4b10 	vmov	d0, r4, r5
 801253c:	4653      	mov	r3, sl
 801253e:	4632      	mov	r2, r6
 8012540:	f001 fe02 	bl	8014148 <_dtoa_r>
 8012544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012548:	4607      	mov	r7, r0
 801254a:	d102      	bne.n	8012552 <__cvt+0x66>
 801254c:	f019 0f01 	tst.w	r9, #1
 8012550:	d022      	beq.n	8012598 <__cvt+0xac>
 8012552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012556:	eb07 0906 	add.w	r9, r7, r6
 801255a:	d110      	bne.n	801257e <__cvt+0x92>
 801255c:	783b      	ldrb	r3, [r7, #0]
 801255e:	2b30      	cmp	r3, #48	; 0x30
 8012560:	d10a      	bne.n	8012578 <__cvt+0x8c>
 8012562:	2200      	movs	r2, #0
 8012564:	2300      	movs	r3, #0
 8012566:	4620      	mov	r0, r4
 8012568:	4629      	mov	r1, r5
 801256a:	f7ee fad5 	bl	8000b18 <__aeabi_dcmpeq>
 801256e:	b918      	cbnz	r0, 8012578 <__cvt+0x8c>
 8012570:	f1c6 0601 	rsb	r6, r6, #1
 8012574:	f8ca 6000 	str.w	r6, [sl]
 8012578:	f8da 3000 	ldr.w	r3, [sl]
 801257c:	4499      	add	r9, r3
 801257e:	2200      	movs	r2, #0
 8012580:	2300      	movs	r3, #0
 8012582:	4620      	mov	r0, r4
 8012584:	4629      	mov	r1, r5
 8012586:	f7ee fac7 	bl	8000b18 <__aeabi_dcmpeq>
 801258a:	b108      	cbz	r0, 8012590 <__cvt+0xa4>
 801258c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012590:	2230      	movs	r2, #48	; 0x30
 8012592:	9b03      	ldr	r3, [sp, #12]
 8012594:	454b      	cmp	r3, r9
 8012596:	d307      	bcc.n	80125a8 <__cvt+0xbc>
 8012598:	9b03      	ldr	r3, [sp, #12]
 801259a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801259c:	1bdb      	subs	r3, r3, r7
 801259e:	4638      	mov	r0, r7
 80125a0:	6013      	str	r3, [r2, #0]
 80125a2:	b004      	add	sp, #16
 80125a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125a8:	1c59      	adds	r1, r3, #1
 80125aa:	9103      	str	r1, [sp, #12]
 80125ac:	701a      	strb	r2, [r3, #0]
 80125ae:	e7f0      	b.n	8012592 <__cvt+0xa6>

080125b0 <__exponent>:
 80125b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125b2:	4603      	mov	r3, r0
 80125b4:	2900      	cmp	r1, #0
 80125b6:	bfb8      	it	lt
 80125b8:	4249      	neglt	r1, r1
 80125ba:	f803 2b02 	strb.w	r2, [r3], #2
 80125be:	bfb4      	ite	lt
 80125c0:	222d      	movlt	r2, #45	; 0x2d
 80125c2:	222b      	movge	r2, #43	; 0x2b
 80125c4:	2909      	cmp	r1, #9
 80125c6:	7042      	strb	r2, [r0, #1]
 80125c8:	dd2a      	ble.n	8012620 <__exponent+0x70>
 80125ca:	f10d 0407 	add.w	r4, sp, #7
 80125ce:	46a4      	mov	ip, r4
 80125d0:	270a      	movs	r7, #10
 80125d2:	46a6      	mov	lr, r4
 80125d4:	460a      	mov	r2, r1
 80125d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80125da:	fb07 1516 	mls	r5, r7, r6, r1
 80125de:	3530      	adds	r5, #48	; 0x30
 80125e0:	2a63      	cmp	r2, #99	; 0x63
 80125e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80125e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80125ea:	4631      	mov	r1, r6
 80125ec:	dcf1      	bgt.n	80125d2 <__exponent+0x22>
 80125ee:	3130      	adds	r1, #48	; 0x30
 80125f0:	f1ae 0502 	sub.w	r5, lr, #2
 80125f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80125f8:	1c44      	adds	r4, r0, #1
 80125fa:	4629      	mov	r1, r5
 80125fc:	4561      	cmp	r1, ip
 80125fe:	d30a      	bcc.n	8012616 <__exponent+0x66>
 8012600:	f10d 0209 	add.w	r2, sp, #9
 8012604:	eba2 020e 	sub.w	r2, r2, lr
 8012608:	4565      	cmp	r5, ip
 801260a:	bf88      	it	hi
 801260c:	2200      	movhi	r2, #0
 801260e:	4413      	add	r3, r2
 8012610:	1a18      	subs	r0, r3, r0
 8012612:	b003      	add	sp, #12
 8012614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801261a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801261e:	e7ed      	b.n	80125fc <__exponent+0x4c>
 8012620:	2330      	movs	r3, #48	; 0x30
 8012622:	3130      	adds	r1, #48	; 0x30
 8012624:	7083      	strb	r3, [r0, #2]
 8012626:	70c1      	strb	r1, [r0, #3]
 8012628:	1d03      	adds	r3, r0, #4
 801262a:	e7f1      	b.n	8012610 <__exponent+0x60>

0801262c <_printf_float>:
 801262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012630:	ed2d 8b02 	vpush	{d8}
 8012634:	b08d      	sub	sp, #52	; 0x34
 8012636:	460c      	mov	r4, r1
 8012638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801263c:	4616      	mov	r6, r2
 801263e:	461f      	mov	r7, r3
 8012640:	4605      	mov	r5, r0
 8012642:	f002 fedd 	bl	8015400 <_localeconv_r>
 8012646:	f8d0 a000 	ldr.w	sl, [r0]
 801264a:	4650      	mov	r0, sl
 801264c:	f7ed fde8 	bl	8000220 <strlen>
 8012650:	2300      	movs	r3, #0
 8012652:	930a      	str	r3, [sp, #40]	; 0x28
 8012654:	6823      	ldr	r3, [r4, #0]
 8012656:	9305      	str	r3, [sp, #20]
 8012658:	f8d8 3000 	ldr.w	r3, [r8]
 801265c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012660:	3307      	adds	r3, #7
 8012662:	f023 0307 	bic.w	r3, r3, #7
 8012666:	f103 0208 	add.w	r2, r3, #8
 801266a:	f8c8 2000 	str.w	r2, [r8]
 801266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801267a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801267e:	9307      	str	r3, [sp, #28]
 8012680:	f8cd 8018 	str.w	r8, [sp, #24]
 8012684:	ee08 0a10 	vmov	s16, r0
 8012688:	4b9f      	ldr	r3, [pc, #636]	; (8012908 <_printf_float+0x2dc>)
 801268a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801268e:	f04f 32ff 	mov.w	r2, #4294967295
 8012692:	f7ee fa73 	bl	8000b7c <__aeabi_dcmpun>
 8012696:	bb88      	cbnz	r0, 80126fc <_printf_float+0xd0>
 8012698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801269c:	4b9a      	ldr	r3, [pc, #616]	; (8012908 <_printf_float+0x2dc>)
 801269e:	f04f 32ff 	mov.w	r2, #4294967295
 80126a2:	f7ee fa4d 	bl	8000b40 <__aeabi_dcmple>
 80126a6:	bb48      	cbnz	r0, 80126fc <_printf_float+0xd0>
 80126a8:	2200      	movs	r2, #0
 80126aa:	2300      	movs	r3, #0
 80126ac:	4640      	mov	r0, r8
 80126ae:	4649      	mov	r1, r9
 80126b0:	f7ee fa3c 	bl	8000b2c <__aeabi_dcmplt>
 80126b4:	b110      	cbz	r0, 80126bc <_printf_float+0x90>
 80126b6:	232d      	movs	r3, #45	; 0x2d
 80126b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126bc:	4b93      	ldr	r3, [pc, #588]	; (801290c <_printf_float+0x2e0>)
 80126be:	4894      	ldr	r0, [pc, #592]	; (8012910 <_printf_float+0x2e4>)
 80126c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80126c4:	bf94      	ite	ls
 80126c6:	4698      	movls	r8, r3
 80126c8:	4680      	movhi	r8, r0
 80126ca:	2303      	movs	r3, #3
 80126cc:	6123      	str	r3, [r4, #16]
 80126ce:	9b05      	ldr	r3, [sp, #20]
 80126d0:	f023 0204 	bic.w	r2, r3, #4
 80126d4:	6022      	str	r2, [r4, #0]
 80126d6:	f04f 0900 	mov.w	r9, #0
 80126da:	9700      	str	r7, [sp, #0]
 80126dc:	4633      	mov	r3, r6
 80126de:	aa0b      	add	r2, sp, #44	; 0x2c
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 f9d8 	bl	8012a98 <_printf_common>
 80126e8:	3001      	adds	r0, #1
 80126ea:	f040 8090 	bne.w	801280e <_printf_float+0x1e2>
 80126ee:	f04f 30ff 	mov.w	r0, #4294967295
 80126f2:	b00d      	add	sp, #52	; 0x34
 80126f4:	ecbd 8b02 	vpop	{d8}
 80126f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126fc:	4642      	mov	r2, r8
 80126fe:	464b      	mov	r3, r9
 8012700:	4640      	mov	r0, r8
 8012702:	4649      	mov	r1, r9
 8012704:	f7ee fa3a 	bl	8000b7c <__aeabi_dcmpun>
 8012708:	b140      	cbz	r0, 801271c <_printf_float+0xf0>
 801270a:	464b      	mov	r3, r9
 801270c:	2b00      	cmp	r3, #0
 801270e:	bfbc      	itt	lt
 8012710:	232d      	movlt	r3, #45	; 0x2d
 8012712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012716:	487f      	ldr	r0, [pc, #508]	; (8012914 <_printf_float+0x2e8>)
 8012718:	4b7f      	ldr	r3, [pc, #508]	; (8012918 <_printf_float+0x2ec>)
 801271a:	e7d1      	b.n	80126c0 <_printf_float+0x94>
 801271c:	6863      	ldr	r3, [r4, #4]
 801271e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012722:	9206      	str	r2, [sp, #24]
 8012724:	1c5a      	adds	r2, r3, #1
 8012726:	d13f      	bne.n	80127a8 <_printf_float+0x17c>
 8012728:	2306      	movs	r3, #6
 801272a:	6063      	str	r3, [r4, #4]
 801272c:	9b05      	ldr	r3, [sp, #20]
 801272e:	6861      	ldr	r1, [r4, #4]
 8012730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012734:	2300      	movs	r3, #0
 8012736:	9303      	str	r3, [sp, #12]
 8012738:	ab0a      	add	r3, sp, #40	; 0x28
 801273a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801273e:	ab09      	add	r3, sp, #36	; 0x24
 8012740:	ec49 8b10 	vmov	d0, r8, r9
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	6022      	str	r2, [r4, #0]
 8012748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801274c:	4628      	mov	r0, r5
 801274e:	f7ff fecd 	bl	80124ec <__cvt>
 8012752:	9b06      	ldr	r3, [sp, #24]
 8012754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012756:	2b47      	cmp	r3, #71	; 0x47
 8012758:	4680      	mov	r8, r0
 801275a:	d108      	bne.n	801276e <_printf_float+0x142>
 801275c:	1cc8      	adds	r0, r1, #3
 801275e:	db02      	blt.n	8012766 <_printf_float+0x13a>
 8012760:	6863      	ldr	r3, [r4, #4]
 8012762:	4299      	cmp	r1, r3
 8012764:	dd41      	ble.n	80127ea <_printf_float+0x1be>
 8012766:	f1ab 0b02 	sub.w	fp, fp, #2
 801276a:	fa5f fb8b 	uxtb.w	fp, fp
 801276e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012772:	d820      	bhi.n	80127b6 <_printf_float+0x18a>
 8012774:	3901      	subs	r1, #1
 8012776:	465a      	mov	r2, fp
 8012778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801277c:	9109      	str	r1, [sp, #36]	; 0x24
 801277e:	f7ff ff17 	bl	80125b0 <__exponent>
 8012782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012784:	1813      	adds	r3, r2, r0
 8012786:	2a01      	cmp	r2, #1
 8012788:	4681      	mov	r9, r0
 801278a:	6123      	str	r3, [r4, #16]
 801278c:	dc02      	bgt.n	8012794 <_printf_float+0x168>
 801278e:	6822      	ldr	r2, [r4, #0]
 8012790:	07d2      	lsls	r2, r2, #31
 8012792:	d501      	bpl.n	8012798 <_printf_float+0x16c>
 8012794:	3301      	adds	r3, #1
 8012796:	6123      	str	r3, [r4, #16]
 8012798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801279c:	2b00      	cmp	r3, #0
 801279e:	d09c      	beq.n	80126da <_printf_float+0xae>
 80127a0:	232d      	movs	r3, #45	; 0x2d
 80127a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127a6:	e798      	b.n	80126da <_printf_float+0xae>
 80127a8:	9a06      	ldr	r2, [sp, #24]
 80127aa:	2a47      	cmp	r2, #71	; 0x47
 80127ac:	d1be      	bne.n	801272c <_printf_float+0x100>
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1bc      	bne.n	801272c <_printf_float+0x100>
 80127b2:	2301      	movs	r3, #1
 80127b4:	e7b9      	b.n	801272a <_printf_float+0xfe>
 80127b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80127ba:	d118      	bne.n	80127ee <_printf_float+0x1c2>
 80127bc:	2900      	cmp	r1, #0
 80127be:	6863      	ldr	r3, [r4, #4]
 80127c0:	dd0b      	ble.n	80127da <_printf_float+0x1ae>
 80127c2:	6121      	str	r1, [r4, #16]
 80127c4:	b913      	cbnz	r3, 80127cc <_printf_float+0x1a0>
 80127c6:	6822      	ldr	r2, [r4, #0]
 80127c8:	07d0      	lsls	r0, r2, #31
 80127ca:	d502      	bpl.n	80127d2 <_printf_float+0x1a6>
 80127cc:	3301      	adds	r3, #1
 80127ce:	440b      	add	r3, r1
 80127d0:	6123      	str	r3, [r4, #16]
 80127d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80127d4:	f04f 0900 	mov.w	r9, #0
 80127d8:	e7de      	b.n	8012798 <_printf_float+0x16c>
 80127da:	b913      	cbnz	r3, 80127e2 <_printf_float+0x1b6>
 80127dc:	6822      	ldr	r2, [r4, #0]
 80127de:	07d2      	lsls	r2, r2, #31
 80127e0:	d501      	bpl.n	80127e6 <_printf_float+0x1ba>
 80127e2:	3302      	adds	r3, #2
 80127e4:	e7f4      	b.n	80127d0 <_printf_float+0x1a4>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e7f2      	b.n	80127d0 <_printf_float+0x1a4>
 80127ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80127ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127f0:	4299      	cmp	r1, r3
 80127f2:	db05      	blt.n	8012800 <_printf_float+0x1d4>
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	6121      	str	r1, [r4, #16]
 80127f8:	07d8      	lsls	r0, r3, #31
 80127fa:	d5ea      	bpl.n	80127d2 <_printf_float+0x1a6>
 80127fc:	1c4b      	adds	r3, r1, #1
 80127fe:	e7e7      	b.n	80127d0 <_printf_float+0x1a4>
 8012800:	2900      	cmp	r1, #0
 8012802:	bfd4      	ite	le
 8012804:	f1c1 0202 	rsble	r2, r1, #2
 8012808:	2201      	movgt	r2, #1
 801280a:	4413      	add	r3, r2
 801280c:	e7e0      	b.n	80127d0 <_printf_float+0x1a4>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	055a      	lsls	r2, r3, #21
 8012812:	d407      	bmi.n	8012824 <_printf_float+0x1f8>
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	4642      	mov	r2, r8
 8012818:	4631      	mov	r1, r6
 801281a:	4628      	mov	r0, r5
 801281c:	47b8      	blx	r7
 801281e:	3001      	adds	r0, #1
 8012820:	d12c      	bne.n	801287c <_printf_float+0x250>
 8012822:	e764      	b.n	80126ee <_printf_float+0xc2>
 8012824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012828:	f240 80e0 	bls.w	80129ec <_printf_float+0x3c0>
 801282c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012830:	2200      	movs	r2, #0
 8012832:	2300      	movs	r3, #0
 8012834:	f7ee f970 	bl	8000b18 <__aeabi_dcmpeq>
 8012838:	2800      	cmp	r0, #0
 801283a:	d034      	beq.n	80128a6 <_printf_float+0x27a>
 801283c:	4a37      	ldr	r2, [pc, #220]	; (801291c <_printf_float+0x2f0>)
 801283e:	2301      	movs	r3, #1
 8012840:	4631      	mov	r1, r6
 8012842:	4628      	mov	r0, r5
 8012844:	47b8      	blx	r7
 8012846:	3001      	adds	r0, #1
 8012848:	f43f af51 	beq.w	80126ee <_printf_float+0xc2>
 801284c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012850:	429a      	cmp	r2, r3
 8012852:	db02      	blt.n	801285a <_printf_float+0x22e>
 8012854:	6823      	ldr	r3, [r4, #0]
 8012856:	07d8      	lsls	r0, r3, #31
 8012858:	d510      	bpl.n	801287c <_printf_float+0x250>
 801285a:	ee18 3a10 	vmov	r3, s16
 801285e:	4652      	mov	r2, sl
 8012860:	4631      	mov	r1, r6
 8012862:	4628      	mov	r0, r5
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f af41 	beq.w	80126ee <_printf_float+0xc2>
 801286c:	f04f 0800 	mov.w	r8, #0
 8012870:	f104 091a 	add.w	r9, r4, #26
 8012874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012876:	3b01      	subs	r3, #1
 8012878:	4543      	cmp	r3, r8
 801287a:	dc09      	bgt.n	8012890 <_printf_float+0x264>
 801287c:	6823      	ldr	r3, [r4, #0]
 801287e:	079b      	lsls	r3, r3, #30
 8012880:	f100 8105 	bmi.w	8012a8e <_printf_float+0x462>
 8012884:	68e0      	ldr	r0, [r4, #12]
 8012886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012888:	4298      	cmp	r0, r3
 801288a:	bfb8      	it	lt
 801288c:	4618      	movlt	r0, r3
 801288e:	e730      	b.n	80126f2 <_printf_float+0xc6>
 8012890:	2301      	movs	r3, #1
 8012892:	464a      	mov	r2, r9
 8012894:	4631      	mov	r1, r6
 8012896:	4628      	mov	r0, r5
 8012898:	47b8      	blx	r7
 801289a:	3001      	adds	r0, #1
 801289c:	f43f af27 	beq.w	80126ee <_printf_float+0xc2>
 80128a0:	f108 0801 	add.w	r8, r8, #1
 80128a4:	e7e6      	b.n	8012874 <_printf_float+0x248>
 80128a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	dc39      	bgt.n	8012920 <_printf_float+0x2f4>
 80128ac:	4a1b      	ldr	r2, [pc, #108]	; (801291c <_printf_float+0x2f0>)
 80128ae:	2301      	movs	r3, #1
 80128b0:	4631      	mov	r1, r6
 80128b2:	4628      	mov	r0, r5
 80128b4:	47b8      	blx	r7
 80128b6:	3001      	adds	r0, #1
 80128b8:	f43f af19 	beq.w	80126ee <_printf_float+0xc2>
 80128bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128c0:	4313      	orrs	r3, r2
 80128c2:	d102      	bne.n	80128ca <_printf_float+0x29e>
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	07d9      	lsls	r1, r3, #31
 80128c8:	d5d8      	bpl.n	801287c <_printf_float+0x250>
 80128ca:	ee18 3a10 	vmov	r3, s16
 80128ce:	4652      	mov	r2, sl
 80128d0:	4631      	mov	r1, r6
 80128d2:	4628      	mov	r0, r5
 80128d4:	47b8      	blx	r7
 80128d6:	3001      	adds	r0, #1
 80128d8:	f43f af09 	beq.w	80126ee <_printf_float+0xc2>
 80128dc:	f04f 0900 	mov.w	r9, #0
 80128e0:	f104 0a1a 	add.w	sl, r4, #26
 80128e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128e6:	425b      	negs	r3, r3
 80128e8:	454b      	cmp	r3, r9
 80128ea:	dc01      	bgt.n	80128f0 <_printf_float+0x2c4>
 80128ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ee:	e792      	b.n	8012816 <_printf_float+0x1ea>
 80128f0:	2301      	movs	r3, #1
 80128f2:	4652      	mov	r2, sl
 80128f4:	4631      	mov	r1, r6
 80128f6:	4628      	mov	r0, r5
 80128f8:	47b8      	blx	r7
 80128fa:	3001      	adds	r0, #1
 80128fc:	f43f aef7 	beq.w	80126ee <_printf_float+0xc2>
 8012900:	f109 0901 	add.w	r9, r9, #1
 8012904:	e7ee      	b.n	80128e4 <_printf_float+0x2b8>
 8012906:	bf00      	nop
 8012908:	7fefffff 	.word	0x7fefffff
 801290c:	08016cec 	.word	0x08016cec
 8012910:	08016cf0 	.word	0x08016cf0
 8012914:	08016cf8 	.word	0x08016cf8
 8012918:	08016cf4 	.word	0x08016cf4
 801291c:	08016cfc 	.word	0x08016cfc
 8012920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012924:	429a      	cmp	r2, r3
 8012926:	bfa8      	it	ge
 8012928:	461a      	movge	r2, r3
 801292a:	2a00      	cmp	r2, #0
 801292c:	4691      	mov	r9, r2
 801292e:	dc37      	bgt.n	80129a0 <_printf_float+0x374>
 8012930:	f04f 0b00 	mov.w	fp, #0
 8012934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012938:	f104 021a 	add.w	r2, r4, #26
 801293c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801293e:	9305      	str	r3, [sp, #20]
 8012940:	eba3 0309 	sub.w	r3, r3, r9
 8012944:	455b      	cmp	r3, fp
 8012946:	dc33      	bgt.n	80129b0 <_printf_float+0x384>
 8012948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801294c:	429a      	cmp	r2, r3
 801294e:	db3b      	blt.n	80129c8 <_printf_float+0x39c>
 8012950:	6823      	ldr	r3, [r4, #0]
 8012952:	07da      	lsls	r2, r3, #31
 8012954:	d438      	bmi.n	80129c8 <_printf_float+0x39c>
 8012956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012958:	9b05      	ldr	r3, [sp, #20]
 801295a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	eba2 0901 	sub.w	r9, r2, r1
 8012962:	4599      	cmp	r9, r3
 8012964:	bfa8      	it	ge
 8012966:	4699      	movge	r9, r3
 8012968:	f1b9 0f00 	cmp.w	r9, #0
 801296c:	dc35      	bgt.n	80129da <_printf_float+0x3ae>
 801296e:	f04f 0800 	mov.w	r8, #0
 8012972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012976:	f104 0a1a 	add.w	sl, r4, #26
 801297a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801297e:	1a9b      	subs	r3, r3, r2
 8012980:	eba3 0309 	sub.w	r3, r3, r9
 8012984:	4543      	cmp	r3, r8
 8012986:	f77f af79 	ble.w	801287c <_printf_float+0x250>
 801298a:	2301      	movs	r3, #1
 801298c:	4652      	mov	r2, sl
 801298e:	4631      	mov	r1, r6
 8012990:	4628      	mov	r0, r5
 8012992:	47b8      	blx	r7
 8012994:	3001      	adds	r0, #1
 8012996:	f43f aeaa 	beq.w	80126ee <_printf_float+0xc2>
 801299a:	f108 0801 	add.w	r8, r8, #1
 801299e:	e7ec      	b.n	801297a <_printf_float+0x34e>
 80129a0:	4613      	mov	r3, r2
 80129a2:	4631      	mov	r1, r6
 80129a4:	4642      	mov	r2, r8
 80129a6:	4628      	mov	r0, r5
 80129a8:	47b8      	blx	r7
 80129aa:	3001      	adds	r0, #1
 80129ac:	d1c0      	bne.n	8012930 <_printf_float+0x304>
 80129ae:	e69e      	b.n	80126ee <_printf_float+0xc2>
 80129b0:	2301      	movs	r3, #1
 80129b2:	4631      	mov	r1, r6
 80129b4:	4628      	mov	r0, r5
 80129b6:	9205      	str	r2, [sp, #20]
 80129b8:	47b8      	blx	r7
 80129ba:	3001      	adds	r0, #1
 80129bc:	f43f ae97 	beq.w	80126ee <_printf_float+0xc2>
 80129c0:	9a05      	ldr	r2, [sp, #20]
 80129c2:	f10b 0b01 	add.w	fp, fp, #1
 80129c6:	e7b9      	b.n	801293c <_printf_float+0x310>
 80129c8:	ee18 3a10 	vmov	r3, s16
 80129cc:	4652      	mov	r2, sl
 80129ce:	4631      	mov	r1, r6
 80129d0:	4628      	mov	r0, r5
 80129d2:	47b8      	blx	r7
 80129d4:	3001      	adds	r0, #1
 80129d6:	d1be      	bne.n	8012956 <_printf_float+0x32a>
 80129d8:	e689      	b.n	80126ee <_printf_float+0xc2>
 80129da:	9a05      	ldr	r2, [sp, #20]
 80129dc:	464b      	mov	r3, r9
 80129de:	4442      	add	r2, r8
 80129e0:	4631      	mov	r1, r6
 80129e2:	4628      	mov	r0, r5
 80129e4:	47b8      	blx	r7
 80129e6:	3001      	adds	r0, #1
 80129e8:	d1c1      	bne.n	801296e <_printf_float+0x342>
 80129ea:	e680      	b.n	80126ee <_printf_float+0xc2>
 80129ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129ee:	2a01      	cmp	r2, #1
 80129f0:	dc01      	bgt.n	80129f6 <_printf_float+0x3ca>
 80129f2:	07db      	lsls	r3, r3, #31
 80129f4:	d538      	bpl.n	8012a68 <_printf_float+0x43c>
 80129f6:	2301      	movs	r3, #1
 80129f8:	4642      	mov	r2, r8
 80129fa:	4631      	mov	r1, r6
 80129fc:	4628      	mov	r0, r5
 80129fe:	47b8      	blx	r7
 8012a00:	3001      	adds	r0, #1
 8012a02:	f43f ae74 	beq.w	80126ee <_printf_float+0xc2>
 8012a06:	ee18 3a10 	vmov	r3, s16
 8012a0a:	4652      	mov	r2, sl
 8012a0c:	4631      	mov	r1, r6
 8012a0e:	4628      	mov	r0, r5
 8012a10:	47b8      	blx	r7
 8012a12:	3001      	adds	r0, #1
 8012a14:	f43f ae6b 	beq.w	80126ee <_printf_float+0xc2>
 8012a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	f7ee f87a 	bl	8000b18 <__aeabi_dcmpeq>
 8012a24:	b9d8      	cbnz	r0, 8012a5e <_printf_float+0x432>
 8012a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a28:	f108 0201 	add.w	r2, r8, #1
 8012a2c:	3b01      	subs	r3, #1
 8012a2e:	4631      	mov	r1, r6
 8012a30:	4628      	mov	r0, r5
 8012a32:	47b8      	blx	r7
 8012a34:	3001      	adds	r0, #1
 8012a36:	d10e      	bne.n	8012a56 <_printf_float+0x42a>
 8012a38:	e659      	b.n	80126ee <_printf_float+0xc2>
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	4652      	mov	r2, sl
 8012a3e:	4631      	mov	r1, r6
 8012a40:	4628      	mov	r0, r5
 8012a42:	47b8      	blx	r7
 8012a44:	3001      	adds	r0, #1
 8012a46:	f43f ae52 	beq.w	80126ee <_printf_float+0xc2>
 8012a4a:	f108 0801 	add.w	r8, r8, #1
 8012a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a50:	3b01      	subs	r3, #1
 8012a52:	4543      	cmp	r3, r8
 8012a54:	dcf1      	bgt.n	8012a3a <_printf_float+0x40e>
 8012a56:	464b      	mov	r3, r9
 8012a58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a5c:	e6dc      	b.n	8012818 <_printf_float+0x1ec>
 8012a5e:	f04f 0800 	mov.w	r8, #0
 8012a62:	f104 0a1a 	add.w	sl, r4, #26
 8012a66:	e7f2      	b.n	8012a4e <_printf_float+0x422>
 8012a68:	2301      	movs	r3, #1
 8012a6a:	4642      	mov	r2, r8
 8012a6c:	e7df      	b.n	8012a2e <_printf_float+0x402>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	464a      	mov	r2, r9
 8012a72:	4631      	mov	r1, r6
 8012a74:	4628      	mov	r0, r5
 8012a76:	47b8      	blx	r7
 8012a78:	3001      	adds	r0, #1
 8012a7a:	f43f ae38 	beq.w	80126ee <_printf_float+0xc2>
 8012a7e:	f108 0801 	add.w	r8, r8, #1
 8012a82:	68e3      	ldr	r3, [r4, #12]
 8012a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a86:	1a5b      	subs	r3, r3, r1
 8012a88:	4543      	cmp	r3, r8
 8012a8a:	dcf0      	bgt.n	8012a6e <_printf_float+0x442>
 8012a8c:	e6fa      	b.n	8012884 <_printf_float+0x258>
 8012a8e:	f04f 0800 	mov.w	r8, #0
 8012a92:	f104 0919 	add.w	r9, r4, #25
 8012a96:	e7f4      	b.n	8012a82 <_printf_float+0x456>

08012a98 <_printf_common>:
 8012a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a9c:	4616      	mov	r6, r2
 8012a9e:	4699      	mov	r9, r3
 8012aa0:	688a      	ldr	r2, [r1, #8]
 8012aa2:	690b      	ldr	r3, [r1, #16]
 8012aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	bfb8      	it	lt
 8012aac:	4613      	movlt	r3, r2
 8012aae:	6033      	str	r3, [r6, #0]
 8012ab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ab4:	4607      	mov	r7, r0
 8012ab6:	460c      	mov	r4, r1
 8012ab8:	b10a      	cbz	r2, 8012abe <_printf_common+0x26>
 8012aba:	3301      	adds	r3, #1
 8012abc:	6033      	str	r3, [r6, #0]
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	0699      	lsls	r1, r3, #26
 8012ac2:	bf42      	ittt	mi
 8012ac4:	6833      	ldrmi	r3, [r6, #0]
 8012ac6:	3302      	addmi	r3, #2
 8012ac8:	6033      	strmi	r3, [r6, #0]
 8012aca:	6825      	ldr	r5, [r4, #0]
 8012acc:	f015 0506 	ands.w	r5, r5, #6
 8012ad0:	d106      	bne.n	8012ae0 <_printf_common+0x48>
 8012ad2:	f104 0a19 	add.w	sl, r4, #25
 8012ad6:	68e3      	ldr	r3, [r4, #12]
 8012ad8:	6832      	ldr	r2, [r6, #0]
 8012ada:	1a9b      	subs	r3, r3, r2
 8012adc:	42ab      	cmp	r3, r5
 8012ade:	dc26      	bgt.n	8012b2e <_printf_common+0x96>
 8012ae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ae4:	1e13      	subs	r3, r2, #0
 8012ae6:	6822      	ldr	r2, [r4, #0]
 8012ae8:	bf18      	it	ne
 8012aea:	2301      	movne	r3, #1
 8012aec:	0692      	lsls	r2, r2, #26
 8012aee:	d42b      	bmi.n	8012b48 <_printf_common+0xb0>
 8012af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012af4:	4649      	mov	r1, r9
 8012af6:	4638      	mov	r0, r7
 8012af8:	47c0      	blx	r8
 8012afa:	3001      	adds	r0, #1
 8012afc:	d01e      	beq.n	8012b3c <_printf_common+0xa4>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	68e5      	ldr	r5, [r4, #12]
 8012b02:	6832      	ldr	r2, [r6, #0]
 8012b04:	f003 0306 	and.w	r3, r3, #6
 8012b08:	2b04      	cmp	r3, #4
 8012b0a:	bf08      	it	eq
 8012b0c:	1aad      	subeq	r5, r5, r2
 8012b0e:	68a3      	ldr	r3, [r4, #8]
 8012b10:	6922      	ldr	r2, [r4, #16]
 8012b12:	bf0c      	ite	eq
 8012b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b18:	2500      	movne	r5, #0
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	bfc4      	itt	gt
 8012b1e:	1a9b      	subgt	r3, r3, r2
 8012b20:	18ed      	addgt	r5, r5, r3
 8012b22:	2600      	movs	r6, #0
 8012b24:	341a      	adds	r4, #26
 8012b26:	42b5      	cmp	r5, r6
 8012b28:	d11a      	bne.n	8012b60 <_printf_common+0xc8>
 8012b2a:	2000      	movs	r0, #0
 8012b2c:	e008      	b.n	8012b40 <_printf_common+0xa8>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	4652      	mov	r2, sl
 8012b32:	4649      	mov	r1, r9
 8012b34:	4638      	mov	r0, r7
 8012b36:	47c0      	blx	r8
 8012b38:	3001      	adds	r0, #1
 8012b3a:	d103      	bne.n	8012b44 <_printf_common+0xac>
 8012b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b44:	3501      	adds	r5, #1
 8012b46:	e7c6      	b.n	8012ad6 <_printf_common+0x3e>
 8012b48:	18e1      	adds	r1, r4, r3
 8012b4a:	1c5a      	adds	r2, r3, #1
 8012b4c:	2030      	movs	r0, #48	; 0x30
 8012b4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b52:	4422      	add	r2, r4
 8012b54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b5c:	3302      	adds	r3, #2
 8012b5e:	e7c7      	b.n	8012af0 <_printf_common+0x58>
 8012b60:	2301      	movs	r3, #1
 8012b62:	4622      	mov	r2, r4
 8012b64:	4649      	mov	r1, r9
 8012b66:	4638      	mov	r0, r7
 8012b68:	47c0      	blx	r8
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	d0e6      	beq.n	8012b3c <_printf_common+0xa4>
 8012b6e:	3601      	adds	r6, #1
 8012b70:	e7d9      	b.n	8012b26 <_printf_common+0x8e>
	...

08012b74 <_printf_i>:
 8012b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b78:	460c      	mov	r4, r1
 8012b7a:	4691      	mov	r9, r2
 8012b7c:	7e27      	ldrb	r7, [r4, #24]
 8012b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b80:	2f78      	cmp	r7, #120	; 0x78
 8012b82:	4680      	mov	r8, r0
 8012b84:	469a      	mov	sl, r3
 8012b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b8a:	d807      	bhi.n	8012b9c <_printf_i+0x28>
 8012b8c:	2f62      	cmp	r7, #98	; 0x62
 8012b8e:	d80a      	bhi.n	8012ba6 <_printf_i+0x32>
 8012b90:	2f00      	cmp	r7, #0
 8012b92:	f000 80d8 	beq.w	8012d46 <_printf_i+0x1d2>
 8012b96:	2f58      	cmp	r7, #88	; 0x58
 8012b98:	f000 80a3 	beq.w	8012ce2 <_printf_i+0x16e>
 8012b9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ba4:	e03a      	b.n	8012c1c <_printf_i+0xa8>
 8012ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012baa:	2b15      	cmp	r3, #21
 8012bac:	d8f6      	bhi.n	8012b9c <_printf_i+0x28>
 8012bae:	a001      	add	r0, pc, #4	; (adr r0, 8012bb4 <_printf_i+0x40>)
 8012bb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012bb4:	08012c0d 	.word	0x08012c0d
 8012bb8:	08012c21 	.word	0x08012c21
 8012bbc:	08012b9d 	.word	0x08012b9d
 8012bc0:	08012b9d 	.word	0x08012b9d
 8012bc4:	08012b9d 	.word	0x08012b9d
 8012bc8:	08012b9d 	.word	0x08012b9d
 8012bcc:	08012c21 	.word	0x08012c21
 8012bd0:	08012b9d 	.word	0x08012b9d
 8012bd4:	08012b9d 	.word	0x08012b9d
 8012bd8:	08012b9d 	.word	0x08012b9d
 8012bdc:	08012b9d 	.word	0x08012b9d
 8012be0:	08012d2d 	.word	0x08012d2d
 8012be4:	08012c51 	.word	0x08012c51
 8012be8:	08012d0f 	.word	0x08012d0f
 8012bec:	08012b9d 	.word	0x08012b9d
 8012bf0:	08012b9d 	.word	0x08012b9d
 8012bf4:	08012d4f 	.word	0x08012d4f
 8012bf8:	08012b9d 	.word	0x08012b9d
 8012bfc:	08012c51 	.word	0x08012c51
 8012c00:	08012b9d 	.word	0x08012b9d
 8012c04:	08012b9d 	.word	0x08012b9d
 8012c08:	08012d17 	.word	0x08012d17
 8012c0c:	680b      	ldr	r3, [r1, #0]
 8012c0e:	1d1a      	adds	r2, r3, #4
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	600a      	str	r2, [r1, #0]
 8012c14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e0a3      	b.n	8012d68 <_printf_i+0x1f4>
 8012c20:	6825      	ldr	r5, [r4, #0]
 8012c22:	6808      	ldr	r0, [r1, #0]
 8012c24:	062e      	lsls	r6, r5, #24
 8012c26:	f100 0304 	add.w	r3, r0, #4
 8012c2a:	d50a      	bpl.n	8012c42 <_printf_i+0xce>
 8012c2c:	6805      	ldr	r5, [r0, #0]
 8012c2e:	600b      	str	r3, [r1, #0]
 8012c30:	2d00      	cmp	r5, #0
 8012c32:	da03      	bge.n	8012c3c <_printf_i+0xc8>
 8012c34:	232d      	movs	r3, #45	; 0x2d
 8012c36:	426d      	negs	r5, r5
 8012c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c3c:	485e      	ldr	r0, [pc, #376]	; (8012db8 <_printf_i+0x244>)
 8012c3e:	230a      	movs	r3, #10
 8012c40:	e019      	b.n	8012c76 <_printf_i+0x102>
 8012c42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012c46:	6805      	ldr	r5, [r0, #0]
 8012c48:	600b      	str	r3, [r1, #0]
 8012c4a:	bf18      	it	ne
 8012c4c:	b22d      	sxthne	r5, r5
 8012c4e:	e7ef      	b.n	8012c30 <_printf_i+0xbc>
 8012c50:	680b      	ldr	r3, [r1, #0]
 8012c52:	6825      	ldr	r5, [r4, #0]
 8012c54:	1d18      	adds	r0, r3, #4
 8012c56:	6008      	str	r0, [r1, #0]
 8012c58:	0628      	lsls	r0, r5, #24
 8012c5a:	d501      	bpl.n	8012c60 <_printf_i+0xec>
 8012c5c:	681d      	ldr	r5, [r3, #0]
 8012c5e:	e002      	b.n	8012c66 <_printf_i+0xf2>
 8012c60:	0669      	lsls	r1, r5, #25
 8012c62:	d5fb      	bpl.n	8012c5c <_printf_i+0xe8>
 8012c64:	881d      	ldrh	r5, [r3, #0]
 8012c66:	4854      	ldr	r0, [pc, #336]	; (8012db8 <_printf_i+0x244>)
 8012c68:	2f6f      	cmp	r7, #111	; 0x6f
 8012c6a:	bf0c      	ite	eq
 8012c6c:	2308      	moveq	r3, #8
 8012c6e:	230a      	movne	r3, #10
 8012c70:	2100      	movs	r1, #0
 8012c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c76:	6866      	ldr	r6, [r4, #4]
 8012c78:	60a6      	str	r6, [r4, #8]
 8012c7a:	2e00      	cmp	r6, #0
 8012c7c:	bfa2      	ittt	ge
 8012c7e:	6821      	ldrge	r1, [r4, #0]
 8012c80:	f021 0104 	bicge.w	r1, r1, #4
 8012c84:	6021      	strge	r1, [r4, #0]
 8012c86:	b90d      	cbnz	r5, 8012c8c <_printf_i+0x118>
 8012c88:	2e00      	cmp	r6, #0
 8012c8a:	d04d      	beq.n	8012d28 <_printf_i+0x1b4>
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012c92:	fb03 5711 	mls	r7, r3, r1, r5
 8012c96:	5dc7      	ldrb	r7, [r0, r7]
 8012c98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012c9c:	462f      	mov	r7, r5
 8012c9e:	42bb      	cmp	r3, r7
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	d9f4      	bls.n	8012c8e <_printf_i+0x11a>
 8012ca4:	2b08      	cmp	r3, #8
 8012ca6:	d10b      	bne.n	8012cc0 <_printf_i+0x14c>
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	07df      	lsls	r7, r3, #31
 8012cac:	d508      	bpl.n	8012cc0 <_printf_i+0x14c>
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	6861      	ldr	r1, [r4, #4]
 8012cb2:	4299      	cmp	r1, r3
 8012cb4:	bfde      	ittt	le
 8012cb6:	2330      	movle	r3, #48	; 0x30
 8012cb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012cbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012cc0:	1b92      	subs	r2, r2, r6
 8012cc2:	6122      	str	r2, [r4, #16]
 8012cc4:	f8cd a000 	str.w	sl, [sp]
 8012cc8:	464b      	mov	r3, r9
 8012cca:	aa03      	add	r2, sp, #12
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4640      	mov	r0, r8
 8012cd0:	f7ff fee2 	bl	8012a98 <_printf_common>
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d14c      	bne.n	8012d72 <_printf_i+0x1fe>
 8012cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cdc:	b004      	add	sp, #16
 8012cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce2:	4835      	ldr	r0, [pc, #212]	; (8012db8 <_printf_i+0x244>)
 8012ce4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012ce8:	6823      	ldr	r3, [r4, #0]
 8012cea:	680e      	ldr	r6, [r1, #0]
 8012cec:	061f      	lsls	r7, r3, #24
 8012cee:	f856 5b04 	ldr.w	r5, [r6], #4
 8012cf2:	600e      	str	r6, [r1, #0]
 8012cf4:	d514      	bpl.n	8012d20 <_printf_i+0x1ac>
 8012cf6:	07d9      	lsls	r1, r3, #31
 8012cf8:	bf44      	itt	mi
 8012cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8012cfe:	6023      	strmi	r3, [r4, #0]
 8012d00:	b91d      	cbnz	r5, 8012d0a <_printf_i+0x196>
 8012d02:	6823      	ldr	r3, [r4, #0]
 8012d04:	f023 0320 	bic.w	r3, r3, #32
 8012d08:	6023      	str	r3, [r4, #0]
 8012d0a:	2310      	movs	r3, #16
 8012d0c:	e7b0      	b.n	8012c70 <_printf_i+0xfc>
 8012d0e:	6823      	ldr	r3, [r4, #0]
 8012d10:	f043 0320 	orr.w	r3, r3, #32
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	2378      	movs	r3, #120	; 0x78
 8012d18:	4828      	ldr	r0, [pc, #160]	; (8012dbc <_printf_i+0x248>)
 8012d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d1e:	e7e3      	b.n	8012ce8 <_printf_i+0x174>
 8012d20:	065e      	lsls	r6, r3, #25
 8012d22:	bf48      	it	mi
 8012d24:	b2ad      	uxthmi	r5, r5
 8012d26:	e7e6      	b.n	8012cf6 <_printf_i+0x182>
 8012d28:	4616      	mov	r6, r2
 8012d2a:	e7bb      	b.n	8012ca4 <_printf_i+0x130>
 8012d2c:	680b      	ldr	r3, [r1, #0]
 8012d2e:	6826      	ldr	r6, [r4, #0]
 8012d30:	6960      	ldr	r0, [r4, #20]
 8012d32:	1d1d      	adds	r5, r3, #4
 8012d34:	600d      	str	r5, [r1, #0]
 8012d36:	0635      	lsls	r5, r6, #24
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	d501      	bpl.n	8012d40 <_printf_i+0x1cc>
 8012d3c:	6018      	str	r0, [r3, #0]
 8012d3e:	e002      	b.n	8012d46 <_printf_i+0x1d2>
 8012d40:	0671      	lsls	r1, r6, #25
 8012d42:	d5fb      	bpl.n	8012d3c <_printf_i+0x1c8>
 8012d44:	8018      	strh	r0, [r3, #0]
 8012d46:	2300      	movs	r3, #0
 8012d48:	6123      	str	r3, [r4, #16]
 8012d4a:	4616      	mov	r6, r2
 8012d4c:	e7ba      	b.n	8012cc4 <_printf_i+0x150>
 8012d4e:	680b      	ldr	r3, [r1, #0]
 8012d50:	1d1a      	adds	r2, r3, #4
 8012d52:	600a      	str	r2, [r1, #0]
 8012d54:	681e      	ldr	r6, [r3, #0]
 8012d56:	6862      	ldr	r2, [r4, #4]
 8012d58:	2100      	movs	r1, #0
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f7ed fa68 	bl	8000230 <memchr>
 8012d60:	b108      	cbz	r0, 8012d66 <_printf_i+0x1f2>
 8012d62:	1b80      	subs	r0, r0, r6
 8012d64:	6060      	str	r0, [r4, #4]
 8012d66:	6863      	ldr	r3, [r4, #4]
 8012d68:	6123      	str	r3, [r4, #16]
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d70:	e7a8      	b.n	8012cc4 <_printf_i+0x150>
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	4632      	mov	r2, r6
 8012d76:	4649      	mov	r1, r9
 8012d78:	4640      	mov	r0, r8
 8012d7a:	47d0      	blx	sl
 8012d7c:	3001      	adds	r0, #1
 8012d7e:	d0ab      	beq.n	8012cd8 <_printf_i+0x164>
 8012d80:	6823      	ldr	r3, [r4, #0]
 8012d82:	079b      	lsls	r3, r3, #30
 8012d84:	d413      	bmi.n	8012dae <_printf_i+0x23a>
 8012d86:	68e0      	ldr	r0, [r4, #12]
 8012d88:	9b03      	ldr	r3, [sp, #12]
 8012d8a:	4298      	cmp	r0, r3
 8012d8c:	bfb8      	it	lt
 8012d8e:	4618      	movlt	r0, r3
 8012d90:	e7a4      	b.n	8012cdc <_printf_i+0x168>
 8012d92:	2301      	movs	r3, #1
 8012d94:	4632      	mov	r2, r6
 8012d96:	4649      	mov	r1, r9
 8012d98:	4640      	mov	r0, r8
 8012d9a:	47d0      	blx	sl
 8012d9c:	3001      	adds	r0, #1
 8012d9e:	d09b      	beq.n	8012cd8 <_printf_i+0x164>
 8012da0:	3501      	adds	r5, #1
 8012da2:	68e3      	ldr	r3, [r4, #12]
 8012da4:	9903      	ldr	r1, [sp, #12]
 8012da6:	1a5b      	subs	r3, r3, r1
 8012da8:	42ab      	cmp	r3, r5
 8012daa:	dcf2      	bgt.n	8012d92 <_printf_i+0x21e>
 8012dac:	e7eb      	b.n	8012d86 <_printf_i+0x212>
 8012dae:	2500      	movs	r5, #0
 8012db0:	f104 0619 	add.w	r6, r4, #25
 8012db4:	e7f5      	b.n	8012da2 <_printf_i+0x22e>
 8012db6:	bf00      	nop
 8012db8:	08016cfe 	.word	0x08016cfe
 8012dbc:	08016d0f 	.word	0x08016d0f

08012dc0 <_scanf_float>:
 8012dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc4:	b087      	sub	sp, #28
 8012dc6:	4617      	mov	r7, r2
 8012dc8:	9303      	str	r3, [sp, #12]
 8012dca:	688b      	ldr	r3, [r1, #8]
 8012dcc:	1e5a      	subs	r2, r3, #1
 8012dce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012dd2:	bf83      	ittte	hi
 8012dd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012dd8:	195b      	addhi	r3, r3, r5
 8012dda:	9302      	strhi	r3, [sp, #8]
 8012ddc:	2300      	movls	r3, #0
 8012dde:	bf86      	itte	hi
 8012de0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012de4:	608b      	strhi	r3, [r1, #8]
 8012de6:	9302      	strls	r3, [sp, #8]
 8012de8:	680b      	ldr	r3, [r1, #0]
 8012dea:	468b      	mov	fp, r1
 8012dec:	2500      	movs	r5, #0
 8012dee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012df2:	f84b 3b1c 	str.w	r3, [fp], #28
 8012df6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012dfa:	4680      	mov	r8, r0
 8012dfc:	460c      	mov	r4, r1
 8012dfe:	465e      	mov	r6, fp
 8012e00:	46aa      	mov	sl, r5
 8012e02:	46a9      	mov	r9, r5
 8012e04:	9501      	str	r5, [sp, #4]
 8012e06:	68a2      	ldr	r2, [r4, #8]
 8012e08:	b152      	cbz	r2, 8012e20 <_scanf_float+0x60>
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	2b4e      	cmp	r3, #78	; 0x4e
 8012e10:	d864      	bhi.n	8012edc <_scanf_float+0x11c>
 8012e12:	2b40      	cmp	r3, #64	; 0x40
 8012e14:	d83c      	bhi.n	8012e90 <_scanf_float+0xd0>
 8012e16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012e1a:	b2c8      	uxtb	r0, r1
 8012e1c:	280e      	cmp	r0, #14
 8012e1e:	d93a      	bls.n	8012e96 <_scanf_float+0xd6>
 8012e20:	f1b9 0f00 	cmp.w	r9, #0
 8012e24:	d003      	beq.n	8012e2e <_scanf_float+0x6e>
 8012e26:	6823      	ldr	r3, [r4, #0]
 8012e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e2c:	6023      	str	r3, [r4, #0]
 8012e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e32:	f1ba 0f01 	cmp.w	sl, #1
 8012e36:	f200 8113 	bhi.w	8013060 <_scanf_float+0x2a0>
 8012e3a:	455e      	cmp	r6, fp
 8012e3c:	f200 8105 	bhi.w	801304a <_scanf_float+0x28a>
 8012e40:	2501      	movs	r5, #1
 8012e42:	4628      	mov	r0, r5
 8012e44:	b007      	add	sp, #28
 8012e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012e4e:	2a0d      	cmp	r2, #13
 8012e50:	d8e6      	bhi.n	8012e20 <_scanf_float+0x60>
 8012e52:	a101      	add	r1, pc, #4	; (adr r1, 8012e58 <_scanf_float+0x98>)
 8012e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012e58:	08012f97 	.word	0x08012f97
 8012e5c:	08012e21 	.word	0x08012e21
 8012e60:	08012e21 	.word	0x08012e21
 8012e64:	08012e21 	.word	0x08012e21
 8012e68:	08012ff7 	.word	0x08012ff7
 8012e6c:	08012fcf 	.word	0x08012fcf
 8012e70:	08012e21 	.word	0x08012e21
 8012e74:	08012e21 	.word	0x08012e21
 8012e78:	08012fa5 	.word	0x08012fa5
 8012e7c:	08012e21 	.word	0x08012e21
 8012e80:	08012e21 	.word	0x08012e21
 8012e84:	08012e21 	.word	0x08012e21
 8012e88:	08012e21 	.word	0x08012e21
 8012e8c:	08012f5d 	.word	0x08012f5d
 8012e90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012e94:	e7db      	b.n	8012e4e <_scanf_float+0x8e>
 8012e96:	290e      	cmp	r1, #14
 8012e98:	d8c2      	bhi.n	8012e20 <_scanf_float+0x60>
 8012e9a:	a001      	add	r0, pc, #4	; (adr r0, 8012ea0 <_scanf_float+0xe0>)
 8012e9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012ea0:	08012f4f 	.word	0x08012f4f
 8012ea4:	08012e21 	.word	0x08012e21
 8012ea8:	08012f4f 	.word	0x08012f4f
 8012eac:	08012fe3 	.word	0x08012fe3
 8012eb0:	08012e21 	.word	0x08012e21
 8012eb4:	08012efd 	.word	0x08012efd
 8012eb8:	08012f39 	.word	0x08012f39
 8012ebc:	08012f39 	.word	0x08012f39
 8012ec0:	08012f39 	.word	0x08012f39
 8012ec4:	08012f39 	.word	0x08012f39
 8012ec8:	08012f39 	.word	0x08012f39
 8012ecc:	08012f39 	.word	0x08012f39
 8012ed0:	08012f39 	.word	0x08012f39
 8012ed4:	08012f39 	.word	0x08012f39
 8012ed8:	08012f39 	.word	0x08012f39
 8012edc:	2b6e      	cmp	r3, #110	; 0x6e
 8012ede:	d809      	bhi.n	8012ef4 <_scanf_float+0x134>
 8012ee0:	2b60      	cmp	r3, #96	; 0x60
 8012ee2:	d8b2      	bhi.n	8012e4a <_scanf_float+0x8a>
 8012ee4:	2b54      	cmp	r3, #84	; 0x54
 8012ee6:	d077      	beq.n	8012fd8 <_scanf_float+0x218>
 8012ee8:	2b59      	cmp	r3, #89	; 0x59
 8012eea:	d199      	bne.n	8012e20 <_scanf_float+0x60>
 8012eec:	2d07      	cmp	r5, #7
 8012eee:	d197      	bne.n	8012e20 <_scanf_float+0x60>
 8012ef0:	2508      	movs	r5, #8
 8012ef2:	e029      	b.n	8012f48 <_scanf_float+0x188>
 8012ef4:	2b74      	cmp	r3, #116	; 0x74
 8012ef6:	d06f      	beq.n	8012fd8 <_scanf_float+0x218>
 8012ef8:	2b79      	cmp	r3, #121	; 0x79
 8012efa:	e7f6      	b.n	8012eea <_scanf_float+0x12a>
 8012efc:	6821      	ldr	r1, [r4, #0]
 8012efe:	05c8      	lsls	r0, r1, #23
 8012f00:	d51a      	bpl.n	8012f38 <_scanf_float+0x178>
 8012f02:	9b02      	ldr	r3, [sp, #8]
 8012f04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012f08:	6021      	str	r1, [r4, #0]
 8012f0a:	f109 0901 	add.w	r9, r9, #1
 8012f0e:	b11b      	cbz	r3, 8012f18 <_scanf_float+0x158>
 8012f10:	3b01      	subs	r3, #1
 8012f12:	3201      	adds	r2, #1
 8012f14:	9302      	str	r3, [sp, #8]
 8012f16:	60a2      	str	r2, [r4, #8]
 8012f18:	68a3      	ldr	r3, [r4, #8]
 8012f1a:	3b01      	subs	r3, #1
 8012f1c:	60a3      	str	r3, [r4, #8]
 8012f1e:	6923      	ldr	r3, [r4, #16]
 8012f20:	3301      	adds	r3, #1
 8012f22:	6123      	str	r3, [r4, #16]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	3b01      	subs	r3, #1
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	607b      	str	r3, [r7, #4]
 8012f2c:	f340 8084 	ble.w	8013038 <_scanf_float+0x278>
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	3301      	adds	r3, #1
 8012f34:	603b      	str	r3, [r7, #0]
 8012f36:	e766      	b.n	8012e06 <_scanf_float+0x46>
 8012f38:	eb1a 0f05 	cmn.w	sl, r5
 8012f3c:	f47f af70 	bne.w	8012e20 <_scanf_float+0x60>
 8012f40:	6822      	ldr	r2, [r4, #0]
 8012f42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012f46:	6022      	str	r2, [r4, #0]
 8012f48:	f806 3b01 	strb.w	r3, [r6], #1
 8012f4c:	e7e4      	b.n	8012f18 <_scanf_float+0x158>
 8012f4e:	6822      	ldr	r2, [r4, #0]
 8012f50:	0610      	lsls	r0, r2, #24
 8012f52:	f57f af65 	bpl.w	8012e20 <_scanf_float+0x60>
 8012f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012f5a:	e7f4      	b.n	8012f46 <_scanf_float+0x186>
 8012f5c:	f1ba 0f00 	cmp.w	sl, #0
 8012f60:	d10e      	bne.n	8012f80 <_scanf_float+0x1c0>
 8012f62:	f1b9 0f00 	cmp.w	r9, #0
 8012f66:	d10e      	bne.n	8012f86 <_scanf_float+0x1c6>
 8012f68:	6822      	ldr	r2, [r4, #0]
 8012f6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012f6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012f72:	d108      	bne.n	8012f86 <_scanf_float+0x1c6>
 8012f74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f78:	6022      	str	r2, [r4, #0]
 8012f7a:	f04f 0a01 	mov.w	sl, #1
 8012f7e:	e7e3      	b.n	8012f48 <_scanf_float+0x188>
 8012f80:	f1ba 0f02 	cmp.w	sl, #2
 8012f84:	d055      	beq.n	8013032 <_scanf_float+0x272>
 8012f86:	2d01      	cmp	r5, #1
 8012f88:	d002      	beq.n	8012f90 <_scanf_float+0x1d0>
 8012f8a:	2d04      	cmp	r5, #4
 8012f8c:	f47f af48 	bne.w	8012e20 <_scanf_float+0x60>
 8012f90:	3501      	adds	r5, #1
 8012f92:	b2ed      	uxtb	r5, r5
 8012f94:	e7d8      	b.n	8012f48 <_scanf_float+0x188>
 8012f96:	f1ba 0f01 	cmp.w	sl, #1
 8012f9a:	f47f af41 	bne.w	8012e20 <_scanf_float+0x60>
 8012f9e:	f04f 0a02 	mov.w	sl, #2
 8012fa2:	e7d1      	b.n	8012f48 <_scanf_float+0x188>
 8012fa4:	b97d      	cbnz	r5, 8012fc6 <_scanf_float+0x206>
 8012fa6:	f1b9 0f00 	cmp.w	r9, #0
 8012faa:	f47f af3c 	bne.w	8012e26 <_scanf_float+0x66>
 8012fae:	6822      	ldr	r2, [r4, #0]
 8012fb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012fb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012fb8:	f47f af39 	bne.w	8012e2e <_scanf_float+0x6e>
 8012fbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012fc0:	6022      	str	r2, [r4, #0]
 8012fc2:	2501      	movs	r5, #1
 8012fc4:	e7c0      	b.n	8012f48 <_scanf_float+0x188>
 8012fc6:	2d03      	cmp	r5, #3
 8012fc8:	d0e2      	beq.n	8012f90 <_scanf_float+0x1d0>
 8012fca:	2d05      	cmp	r5, #5
 8012fcc:	e7de      	b.n	8012f8c <_scanf_float+0x1cc>
 8012fce:	2d02      	cmp	r5, #2
 8012fd0:	f47f af26 	bne.w	8012e20 <_scanf_float+0x60>
 8012fd4:	2503      	movs	r5, #3
 8012fd6:	e7b7      	b.n	8012f48 <_scanf_float+0x188>
 8012fd8:	2d06      	cmp	r5, #6
 8012fda:	f47f af21 	bne.w	8012e20 <_scanf_float+0x60>
 8012fde:	2507      	movs	r5, #7
 8012fe0:	e7b2      	b.n	8012f48 <_scanf_float+0x188>
 8012fe2:	6822      	ldr	r2, [r4, #0]
 8012fe4:	0591      	lsls	r1, r2, #22
 8012fe6:	f57f af1b 	bpl.w	8012e20 <_scanf_float+0x60>
 8012fea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	f8cd 9004 	str.w	r9, [sp, #4]
 8012ff4:	e7a8      	b.n	8012f48 <_scanf_float+0x188>
 8012ff6:	6822      	ldr	r2, [r4, #0]
 8012ff8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012ffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013000:	d006      	beq.n	8013010 <_scanf_float+0x250>
 8013002:	0550      	lsls	r0, r2, #21
 8013004:	f57f af0c 	bpl.w	8012e20 <_scanf_float+0x60>
 8013008:	f1b9 0f00 	cmp.w	r9, #0
 801300c:	f43f af0f 	beq.w	8012e2e <_scanf_float+0x6e>
 8013010:	0591      	lsls	r1, r2, #22
 8013012:	bf58      	it	pl
 8013014:	9901      	ldrpl	r1, [sp, #4]
 8013016:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801301a:	bf58      	it	pl
 801301c:	eba9 0101 	subpl.w	r1, r9, r1
 8013020:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013024:	bf58      	it	pl
 8013026:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801302a:	6022      	str	r2, [r4, #0]
 801302c:	f04f 0900 	mov.w	r9, #0
 8013030:	e78a      	b.n	8012f48 <_scanf_float+0x188>
 8013032:	f04f 0a03 	mov.w	sl, #3
 8013036:	e787      	b.n	8012f48 <_scanf_float+0x188>
 8013038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801303c:	4639      	mov	r1, r7
 801303e:	4640      	mov	r0, r8
 8013040:	4798      	blx	r3
 8013042:	2800      	cmp	r0, #0
 8013044:	f43f aedf 	beq.w	8012e06 <_scanf_float+0x46>
 8013048:	e6ea      	b.n	8012e20 <_scanf_float+0x60>
 801304a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801304e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013052:	463a      	mov	r2, r7
 8013054:	4640      	mov	r0, r8
 8013056:	4798      	blx	r3
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	3b01      	subs	r3, #1
 801305c:	6123      	str	r3, [r4, #16]
 801305e:	e6ec      	b.n	8012e3a <_scanf_float+0x7a>
 8013060:	1e6b      	subs	r3, r5, #1
 8013062:	2b06      	cmp	r3, #6
 8013064:	d825      	bhi.n	80130b2 <_scanf_float+0x2f2>
 8013066:	2d02      	cmp	r5, #2
 8013068:	d836      	bhi.n	80130d8 <_scanf_float+0x318>
 801306a:	455e      	cmp	r6, fp
 801306c:	f67f aee8 	bls.w	8012e40 <_scanf_float+0x80>
 8013070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013074:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013078:	463a      	mov	r2, r7
 801307a:	4640      	mov	r0, r8
 801307c:	4798      	blx	r3
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	3b01      	subs	r3, #1
 8013082:	6123      	str	r3, [r4, #16]
 8013084:	e7f1      	b.n	801306a <_scanf_float+0x2aa>
 8013086:	9802      	ldr	r0, [sp, #8]
 8013088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801308c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013090:	9002      	str	r0, [sp, #8]
 8013092:	463a      	mov	r2, r7
 8013094:	4640      	mov	r0, r8
 8013096:	4798      	blx	r3
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	3b01      	subs	r3, #1
 801309c:	6123      	str	r3, [r4, #16]
 801309e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80130a2:	fa5f fa8a 	uxtb.w	sl, sl
 80130a6:	f1ba 0f02 	cmp.w	sl, #2
 80130aa:	d1ec      	bne.n	8013086 <_scanf_float+0x2c6>
 80130ac:	3d03      	subs	r5, #3
 80130ae:	b2ed      	uxtb	r5, r5
 80130b0:	1b76      	subs	r6, r6, r5
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	05da      	lsls	r2, r3, #23
 80130b6:	d52f      	bpl.n	8013118 <_scanf_float+0x358>
 80130b8:	055b      	lsls	r3, r3, #21
 80130ba:	d510      	bpl.n	80130de <_scanf_float+0x31e>
 80130bc:	455e      	cmp	r6, fp
 80130be:	f67f aebf 	bls.w	8012e40 <_scanf_float+0x80>
 80130c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80130ca:	463a      	mov	r2, r7
 80130cc:	4640      	mov	r0, r8
 80130ce:	4798      	blx	r3
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	3b01      	subs	r3, #1
 80130d4:	6123      	str	r3, [r4, #16]
 80130d6:	e7f1      	b.n	80130bc <_scanf_float+0x2fc>
 80130d8:	46aa      	mov	sl, r5
 80130da:	9602      	str	r6, [sp, #8]
 80130dc:	e7df      	b.n	801309e <_scanf_float+0x2de>
 80130de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80130e2:	6923      	ldr	r3, [r4, #16]
 80130e4:	2965      	cmp	r1, #101	; 0x65
 80130e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80130ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80130ee:	6123      	str	r3, [r4, #16]
 80130f0:	d00c      	beq.n	801310c <_scanf_float+0x34c>
 80130f2:	2945      	cmp	r1, #69	; 0x45
 80130f4:	d00a      	beq.n	801310c <_scanf_float+0x34c>
 80130f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80130fa:	463a      	mov	r2, r7
 80130fc:	4640      	mov	r0, r8
 80130fe:	4798      	blx	r3
 8013100:	6923      	ldr	r3, [r4, #16]
 8013102:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013106:	3b01      	subs	r3, #1
 8013108:	1eb5      	subs	r5, r6, #2
 801310a:	6123      	str	r3, [r4, #16]
 801310c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013110:	463a      	mov	r2, r7
 8013112:	4640      	mov	r0, r8
 8013114:	4798      	blx	r3
 8013116:	462e      	mov	r6, r5
 8013118:	6825      	ldr	r5, [r4, #0]
 801311a:	f015 0510 	ands.w	r5, r5, #16
 801311e:	d158      	bne.n	80131d2 <_scanf_float+0x412>
 8013120:	7035      	strb	r5, [r6, #0]
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801312c:	d11c      	bne.n	8013168 <_scanf_float+0x3a8>
 801312e:	9b01      	ldr	r3, [sp, #4]
 8013130:	454b      	cmp	r3, r9
 8013132:	eba3 0209 	sub.w	r2, r3, r9
 8013136:	d124      	bne.n	8013182 <_scanf_float+0x3c2>
 8013138:	2200      	movs	r2, #0
 801313a:	4659      	mov	r1, fp
 801313c:	4640      	mov	r0, r8
 801313e:	f000 fee9 	bl	8013f14 <_strtod_r>
 8013142:	9b03      	ldr	r3, [sp, #12]
 8013144:	6821      	ldr	r1, [r4, #0]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f011 0f02 	tst.w	r1, #2
 801314c:	ec57 6b10 	vmov	r6, r7, d0
 8013150:	f103 0204 	add.w	r2, r3, #4
 8013154:	d020      	beq.n	8013198 <_scanf_float+0x3d8>
 8013156:	9903      	ldr	r1, [sp, #12]
 8013158:	600a      	str	r2, [r1, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	e9c3 6700 	strd	r6, r7, [r3]
 8013160:	68e3      	ldr	r3, [r4, #12]
 8013162:	3301      	adds	r3, #1
 8013164:	60e3      	str	r3, [r4, #12]
 8013166:	e66c      	b.n	8012e42 <_scanf_float+0x82>
 8013168:	9b04      	ldr	r3, [sp, #16]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d0e4      	beq.n	8013138 <_scanf_float+0x378>
 801316e:	9905      	ldr	r1, [sp, #20]
 8013170:	230a      	movs	r3, #10
 8013172:	462a      	mov	r2, r5
 8013174:	3101      	adds	r1, #1
 8013176:	4640      	mov	r0, r8
 8013178:	f000 ff56 	bl	8014028 <_strtol_r>
 801317c:	9b04      	ldr	r3, [sp, #16]
 801317e:	9e05      	ldr	r6, [sp, #20]
 8013180:	1ac2      	subs	r2, r0, r3
 8013182:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013186:	429e      	cmp	r6, r3
 8013188:	bf28      	it	cs
 801318a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801318e:	4912      	ldr	r1, [pc, #72]	; (80131d8 <_scanf_float+0x418>)
 8013190:	4630      	mov	r0, r6
 8013192:	f000 f879 	bl	8013288 <siprintf>
 8013196:	e7cf      	b.n	8013138 <_scanf_float+0x378>
 8013198:	f011 0f04 	tst.w	r1, #4
 801319c:	9903      	ldr	r1, [sp, #12]
 801319e:	600a      	str	r2, [r1, #0]
 80131a0:	d1db      	bne.n	801315a <_scanf_float+0x39a>
 80131a2:	f8d3 8000 	ldr.w	r8, [r3]
 80131a6:	ee10 2a10 	vmov	r2, s0
 80131aa:	ee10 0a10 	vmov	r0, s0
 80131ae:	463b      	mov	r3, r7
 80131b0:	4639      	mov	r1, r7
 80131b2:	f7ed fce3 	bl	8000b7c <__aeabi_dcmpun>
 80131b6:	b128      	cbz	r0, 80131c4 <_scanf_float+0x404>
 80131b8:	4808      	ldr	r0, [pc, #32]	; (80131dc <_scanf_float+0x41c>)
 80131ba:	f7ff f875 	bl	80122a8 <nanf>
 80131be:	ed88 0a00 	vstr	s0, [r8]
 80131c2:	e7cd      	b.n	8013160 <_scanf_float+0x3a0>
 80131c4:	4630      	mov	r0, r6
 80131c6:	4639      	mov	r1, r7
 80131c8:	f7ed fd36 	bl	8000c38 <__aeabi_d2f>
 80131cc:	f8c8 0000 	str.w	r0, [r8]
 80131d0:	e7c6      	b.n	8013160 <_scanf_float+0x3a0>
 80131d2:	2500      	movs	r5, #0
 80131d4:	e635      	b.n	8012e42 <_scanf_float+0x82>
 80131d6:	bf00      	nop
 80131d8:	08016d20 	.word	0x08016d20
 80131dc:	08017138 	.word	0x08017138

080131e0 <_sbrk_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4d06      	ldr	r5, [pc, #24]	; (80131fc <_sbrk_r+0x1c>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4604      	mov	r4, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	f7f4 fe42 	bl	8007e74 <_sbrk>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_sbrk_r+0x1a>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_sbrk_r+0x1a>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	20003edc 	.word	0x20003edc

08013200 <_raise_r>:
 8013200:	291f      	cmp	r1, #31
 8013202:	b538      	push	{r3, r4, r5, lr}
 8013204:	4604      	mov	r4, r0
 8013206:	460d      	mov	r5, r1
 8013208:	d904      	bls.n	8013214 <_raise_r+0x14>
 801320a:	2316      	movs	r3, #22
 801320c:	6003      	str	r3, [r0, #0]
 801320e:	f04f 30ff 	mov.w	r0, #4294967295
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013216:	b112      	cbz	r2, 801321e <_raise_r+0x1e>
 8013218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801321c:	b94b      	cbnz	r3, 8013232 <_raise_r+0x32>
 801321e:	4620      	mov	r0, r4
 8013220:	f000 f830 	bl	8013284 <_getpid_r>
 8013224:	462a      	mov	r2, r5
 8013226:	4601      	mov	r1, r0
 8013228:	4620      	mov	r0, r4
 801322a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801322e:	f000 b817 	b.w	8013260 <_kill_r>
 8013232:	2b01      	cmp	r3, #1
 8013234:	d00a      	beq.n	801324c <_raise_r+0x4c>
 8013236:	1c59      	adds	r1, r3, #1
 8013238:	d103      	bne.n	8013242 <_raise_r+0x42>
 801323a:	2316      	movs	r3, #22
 801323c:	6003      	str	r3, [r0, #0]
 801323e:	2001      	movs	r0, #1
 8013240:	e7e7      	b.n	8013212 <_raise_r+0x12>
 8013242:	2400      	movs	r4, #0
 8013244:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013248:	4628      	mov	r0, r5
 801324a:	4798      	blx	r3
 801324c:	2000      	movs	r0, #0
 801324e:	e7e0      	b.n	8013212 <_raise_r+0x12>

08013250 <raise>:
 8013250:	4b02      	ldr	r3, [pc, #8]	; (801325c <raise+0xc>)
 8013252:	4601      	mov	r1, r0
 8013254:	6818      	ldr	r0, [r3, #0]
 8013256:	f7ff bfd3 	b.w	8013200 <_raise_r>
 801325a:	bf00      	nop
 801325c:	2000019c 	.word	0x2000019c

08013260 <_kill_r>:
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	4d07      	ldr	r5, [pc, #28]	; (8013280 <_kill_r+0x20>)
 8013264:	2300      	movs	r3, #0
 8013266:	4604      	mov	r4, r0
 8013268:	4608      	mov	r0, r1
 801326a:	4611      	mov	r1, r2
 801326c:	602b      	str	r3, [r5, #0]
 801326e:	f7f4 fd79 	bl	8007d64 <_kill>
 8013272:	1c43      	adds	r3, r0, #1
 8013274:	d102      	bne.n	801327c <_kill_r+0x1c>
 8013276:	682b      	ldr	r3, [r5, #0]
 8013278:	b103      	cbz	r3, 801327c <_kill_r+0x1c>
 801327a:	6023      	str	r3, [r4, #0]
 801327c:	bd38      	pop	{r3, r4, r5, pc}
 801327e:	bf00      	nop
 8013280:	20003edc 	.word	0x20003edc

08013284 <_getpid_r>:
 8013284:	f7f4 bd66 	b.w	8007d54 <_getpid>

08013288 <siprintf>:
 8013288:	b40e      	push	{r1, r2, r3}
 801328a:	b500      	push	{lr}
 801328c:	b09c      	sub	sp, #112	; 0x70
 801328e:	ab1d      	add	r3, sp, #116	; 0x74
 8013290:	9002      	str	r0, [sp, #8]
 8013292:	9006      	str	r0, [sp, #24]
 8013294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013298:	4809      	ldr	r0, [pc, #36]	; (80132c0 <siprintf+0x38>)
 801329a:	9107      	str	r1, [sp, #28]
 801329c:	9104      	str	r1, [sp, #16]
 801329e:	4909      	ldr	r1, [pc, #36]	; (80132c4 <siprintf+0x3c>)
 80132a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80132a4:	9105      	str	r1, [sp, #20]
 80132a6:	6800      	ldr	r0, [r0, #0]
 80132a8:	9301      	str	r3, [sp, #4]
 80132aa:	a902      	add	r1, sp, #8
 80132ac:	f002 fdf0 	bl	8015e90 <_svfiprintf_r>
 80132b0:	9b02      	ldr	r3, [sp, #8]
 80132b2:	2200      	movs	r2, #0
 80132b4:	701a      	strb	r2, [r3, #0]
 80132b6:	b01c      	add	sp, #112	; 0x70
 80132b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132bc:	b003      	add	sp, #12
 80132be:	4770      	bx	lr
 80132c0:	2000019c 	.word	0x2000019c
 80132c4:	ffff0208 	.word	0xffff0208

080132c8 <sulp>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	4604      	mov	r4, r0
 80132cc:	460d      	mov	r5, r1
 80132ce:	ec45 4b10 	vmov	d0, r4, r5
 80132d2:	4616      	mov	r6, r2
 80132d4:	f002 fc22 	bl	8015b1c <__ulp>
 80132d8:	ec51 0b10 	vmov	r0, r1, d0
 80132dc:	b17e      	cbz	r6, 80132fe <sulp+0x36>
 80132de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	dd09      	ble.n	80132fe <sulp+0x36>
 80132ea:	051b      	lsls	r3, r3, #20
 80132ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80132f0:	2400      	movs	r4, #0
 80132f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80132f6:	4622      	mov	r2, r4
 80132f8:	462b      	mov	r3, r5
 80132fa:	f7ed f9a5 	bl	8000648 <__aeabi_dmul>
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <_strtod_l>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	b0a3      	sub	sp, #140	; 0x8c
 8013306:	461f      	mov	r7, r3
 8013308:	2300      	movs	r3, #0
 801330a:	931e      	str	r3, [sp, #120]	; 0x78
 801330c:	4ba4      	ldr	r3, [pc, #656]	; (80135a0 <_strtod_l+0x2a0>)
 801330e:	9219      	str	r2, [sp, #100]	; 0x64
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	9307      	str	r3, [sp, #28]
 8013314:	4604      	mov	r4, r0
 8013316:	4618      	mov	r0, r3
 8013318:	4688      	mov	r8, r1
 801331a:	f7ec ff81 	bl	8000220 <strlen>
 801331e:	f04f 0a00 	mov.w	sl, #0
 8013322:	4605      	mov	r5, r0
 8013324:	f04f 0b00 	mov.w	fp, #0
 8013328:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801332c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801332e:	781a      	ldrb	r2, [r3, #0]
 8013330:	2a2b      	cmp	r2, #43	; 0x2b
 8013332:	d04c      	beq.n	80133ce <_strtod_l+0xce>
 8013334:	d839      	bhi.n	80133aa <_strtod_l+0xaa>
 8013336:	2a0d      	cmp	r2, #13
 8013338:	d832      	bhi.n	80133a0 <_strtod_l+0xa0>
 801333a:	2a08      	cmp	r2, #8
 801333c:	d832      	bhi.n	80133a4 <_strtod_l+0xa4>
 801333e:	2a00      	cmp	r2, #0
 8013340:	d03c      	beq.n	80133bc <_strtod_l+0xbc>
 8013342:	2300      	movs	r3, #0
 8013344:	930e      	str	r3, [sp, #56]	; 0x38
 8013346:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013348:	7833      	ldrb	r3, [r6, #0]
 801334a:	2b30      	cmp	r3, #48	; 0x30
 801334c:	f040 80b4 	bne.w	80134b8 <_strtod_l+0x1b8>
 8013350:	7873      	ldrb	r3, [r6, #1]
 8013352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013356:	2b58      	cmp	r3, #88	; 0x58
 8013358:	d16c      	bne.n	8013434 <_strtod_l+0x134>
 801335a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	ab1e      	add	r3, sp, #120	; 0x78
 8013360:	9702      	str	r7, [sp, #8]
 8013362:	9300      	str	r3, [sp, #0]
 8013364:	4a8f      	ldr	r2, [pc, #572]	; (80135a4 <_strtod_l+0x2a4>)
 8013366:	ab1f      	add	r3, sp, #124	; 0x7c
 8013368:	a91d      	add	r1, sp, #116	; 0x74
 801336a:	4620      	mov	r0, r4
 801336c:	f001 fd40 	bl	8014df0 <__gethex>
 8013370:	f010 0707 	ands.w	r7, r0, #7
 8013374:	4605      	mov	r5, r0
 8013376:	d005      	beq.n	8013384 <_strtod_l+0x84>
 8013378:	2f06      	cmp	r7, #6
 801337a:	d12a      	bne.n	80133d2 <_strtod_l+0xd2>
 801337c:	3601      	adds	r6, #1
 801337e:	2300      	movs	r3, #0
 8013380:	961d      	str	r6, [sp, #116]	; 0x74
 8013382:	930e      	str	r3, [sp, #56]	; 0x38
 8013384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013386:	2b00      	cmp	r3, #0
 8013388:	f040 8596 	bne.w	8013eb8 <_strtod_l+0xbb8>
 801338c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801338e:	b1db      	cbz	r3, 80133c8 <_strtod_l+0xc8>
 8013390:	4652      	mov	r2, sl
 8013392:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013396:	ec43 2b10 	vmov	d0, r2, r3
 801339a:	b023      	add	sp, #140	; 0x8c
 801339c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a0:	2a20      	cmp	r2, #32
 80133a2:	d1ce      	bne.n	8013342 <_strtod_l+0x42>
 80133a4:	3301      	adds	r3, #1
 80133a6:	931d      	str	r3, [sp, #116]	; 0x74
 80133a8:	e7c0      	b.n	801332c <_strtod_l+0x2c>
 80133aa:	2a2d      	cmp	r2, #45	; 0x2d
 80133ac:	d1c9      	bne.n	8013342 <_strtod_l+0x42>
 80133ae:	2201      	movs	r2, #1
 80133b0:	920e      	str	r2, [sp, #56]	; 0x38
 80133b2:	1c5a      	adds	r2, r3, #1
 80133b4:	921d      	str	r2, [sp, #116]	; 0x74
 80133b6:	785b      	ldrb	r3, [r3, #1]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d1c4      	bne.n	8013346 <_strtod_l+0x46>
 80133bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80133be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f040 8576 	bne.w	8013eb4 <_strtod_l+0xbb4>
 80133c8:	4652      	mov	r2, sl
 80133ca:	465b      	mov	r3, fp
 80133cc:	e7e3      	b.n	8013396 <_strtod_l+0x96>
 80133ce:	2200      	movs	r2, #0
 80133d0:	e7ee      	b.n	80133b0 <_strtod_l+0xb0>
 80133d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80133d4:	b13a      	cbz	r2, 80133e6 <_strtod_l+0xe6>
 80133d6:	2135      	movs	r1, #53	; 0x35
 80133d8:	a820      	add	r0, sp, #128	; 0x80
 80133da:	f002 fcaa 	bl	8015d32 <__copybits>
 80133de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80133e0:	4620      	mov	r0, r4
 80133e2:	f002 f86f 	bl	80154c4 <_Bfree>
 80133e6:	3f01      	subs	r7, #1
 80133e8:	2f05      	cmp	r7, #5
 80133ea:	d807      	bhi.n	80133fc <_strtod_l+0xfc>
 80133ec:	e8df f007 	tbb	[pc, r7]
 80133f0:	1d180b0e 	.word	0x1d180b0e
 80133f4:	030e      	.short	0x030e
 80133f6:	f04f 0b00 	mov.w	fp, #0
 80133fa:	46da      	mov	sl, fp
 80133fc:	0728      	lsls	r0, r5, #28
 80133fe:	d5c1      	bpl.n	8013384 <_strtod_l+0x84>
 8013400:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013404:	e7be      	b.n	8013384 <_strtod_l+0x84>
 8013406:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801340a:	e7f7      	b.n	80133fc <_strtod_l+0xfc>
 801340c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013410:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013412:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013416:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801341a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801341e:	e7ed      	b.n	80133fc <_strtod_l+0xfc>
 8013420:	f8df b184 	ldr.w	fp, [pc, #388]	; 80135a8 <_strtod_l+0x2a8>
 8013424:	f04f 0a00 	mov.w	sl, #0
 8013428:	e7e8      	b.n	80133fc <_strtod_l+0xfc>
 801342a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801342e:	f04f 3aff 	mov.w	sl, #4294967295
 8013432:	e7e3      	b.n	80133fc <_strtod_l+0xfc>
 8013434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013436:	1c5a      	adds	r2, r3, #1
 8013438:	921d      	str	r2, [sp, #116]	; 0x74
 801343a:	785b      	ldrb	r3, [r3, #1]
 801343c:	2b30      	cmp	r3, #48	; 0x30
 801343e:	d0f9      	beq.n	8013434 <_strtod_l+0x134>
 8013440:	2b00      	cmp	r3, #0
 8013442:	d09f      	beq.n	8013384 <_strtod_l+0x84>
 8013444:	2301      	movs	r3, #1
 8013446:	f04f 0900 	mov.w	r9, #0
 801344a:	9304      	str	r3, [sp, #16]
 801344c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801344e:	930a      	str	r3, [sp, #40]	; 0x28
 8013450:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013454:	464f      	mov	r7, r9
 8013456:	220a      	movs	r2, #10
 8013458:	981d      	ldr	r0, [sp, #116]	; 0x74
 801345a:	7806      	ldrb	r6, [r0, #0]
 801345c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013460:	b2d9      	uxtb	r1, r3
 8013462:	2909      	cmp	r1, #9
 8013464:	d92a      	bls.n	80134bc <_strtod_l+0x1bc>
 8013466:	9907      	ldr	r1, [sp, #28]
 8013468:	462a      	mov	r2, r5
 801346a:	f002 fe19 	bl	80160a0 <strncmp>
 801346e:	b398      	cbz	r0, 80134d8 <_strtod_l+0x1d8>
 8013470:	2000      	movs	r0, #0
 8013472:	4633      	mov	r3, r6
 8013474:	463d      	mov	r5, r7
 8013476:	9007      	str	r0, [sp, #28]
 8013478:	4602      	mov	r2, r0
 801347a:	2b65      	cmp	r3, #101	; 0x65
 801347c:	d001      	beq.n	8013482 <_strtod_l+0x182>
 801347e:	2b45      	cmp	r3, #69	; 0x45
 8013480:	d118      	bne.n	80134b4 <_strtod_l+0x1b4>
 8013482:	b91d      	cbnz	r5, 801348c <_strtod_l+0x18c>
 8013484:	9b04      	ldr	r3, [sp, #16]
 8013486:	4303      	orrs	r3, r0
 8013488:	d098      	beq.n	80133bc <_strtod_l+0xbc>
 801348a:	2500      	movs	r5, #0
 801348c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013490:	f108 0301 	add.w	r3, r8, #1
 8013494:	931d      	str	r3, [sp, #116]	; 0x74
 8013496:	f898 3001 	ldrb.w	r3, [r8, #1]
 801349a:	2b2b      	cmp	r3, #43	; 0x2b
 801349c:	d075      	beq.n	801358a <_strtod_l+0x28a>
 801349e:	2b2d      	cmp	r3, #45	; 0x2d
 80134a0:	d07b      	beq.n	801359a <_strtod_l+0x29a>
 80134a2:	f04f 0c00 	mov.w	ip, #0
 80134a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80134aa:	2909      	cmp	r1, #9
 80134ac:	f240 8082 	bls.w	80135b4 <_strtod_l+0x2b4>
 80134b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80134b4:	2600      	movs	r6, #0
 80134b6:	e09d      	b.n	80135f4 <_strtod_l+0x2f4>
 80134b8:	2300      	movs	r3, #0
 80134ba:	e7c4      	b.n	8013446 <_strtod_l+0x146>
 80134bc:	2f08      	cmp	r7, #8
 80134be:	bfd8      	it	le
 80134c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80134c2:	f100 0001 	add.w	r0, r0, #1
 80134c6:	bfda      	itte	le
 80134c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80134cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80134ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80134d2:	3701      	adds	r7, #1
 80134d4:	901d      	str	r0, [sp, #116]	; 0x74
 80134d6:	e7bf      	b.n	8013458 <_strtod_l+0x158>
 80134d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134da:	195a      	adds	r2, r3, r5
 80134dc:	921d      	str	r2, [sp, #116]	; 0x74
 80134de:	5d5b      	ldrb	r3, [r3, r5]
 80134e0:	2f00      	cmp	r7, #0
 80134e2:	d037      	beq.n	8013554 <_strtod_l+0x254>
 80134e4:	9007      	str	r0, [sp, #28]
 80134e6:	463d      	mov	r5, r7
 80134e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80134ec:	2a09      	cmp	r2, #9
 80134ee:	d912      	bls.n	8013516 <_strtod_l+0x216>
 80134f0:	2201      	movs	r2, #1
 80134f2:	e7c2      	b.n	801347a <_strtod_l+0x17a>
 80134f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	921d      	str	r2, [sp, #116]	; 0x74
 80134fa:	785b      	ldrb	r3, [r3, #1]
 80134fc:	3001      	adds	r0, #1
 80134fe:	2b30      	cmp	r3, #48	; 0x30
 8013500:	d0f8      	beq.n	80134f4 <_strtod_l+0x1f4>
 8013502:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013506:	2a08      	cmp	r2, #8
 8013508:	f200 84db 	bhi.w	8013ec2 <_strtod_l+0xbc2>
 801350c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801350e:	9007      	str	r0, [sp, #28]
 8013510:	2000      	movs	r0, #0
 8013512:	920a      	str	r2, [sp, #40]	; 0x28
 8013514:	4605      	mov	r5, r0
 8013516:	3b30      	subs	r3, #48	; 0x30
 8013518:	f100 0201 	add.w	r2, r0, #1
 801351c:	d014      	beq.n	8013548 <_strtod_l+0x248>
 801351e:	9907      	ldr	r1, [sp, #28]
 8013520:	4411      	add	r1, r2
 8013522:	9107      	str	r1, [sp, #28]
 8013524:	462a      	mov	r2, r5
 8013526:	eb00 0e05 	add.w	lr, r0, r5
 801352a:	210a      	movs	r1, #10
 801352c:	4572      	cmp	r2, lr
 801352e:	d113      	bne.n	8013558 <_strtod_l+0x258>
 8013530:	182a      	adds	r2, r5, r0
 8013532:	2a08      	cmp	r2, #8
 8013534:	f105 0501 	add.w	r5, r5, #1
 8013538:	4405      	add	r5, r0
 801353a:	dc1c      	bgt.n	8013576 <_strtod_l+0x276>
 801353c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801353e:	220a      	movs	r2, #10
 8013540:	fb02 3301 	mla	r3, r2, r1, r3
 8013544:	9309      	str	r3, [sp, #36]	; 0x24
 8013546:	2200      	movs	r2, #0
 8013548:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801354a:	1c59      	adds	r1, r3, #1
 801354c:	911d      	str	r1, [sp, #116]	; 0x74
 801354e:	785b      	ldrb	r3, [r3, #1]
 8013550:	4610      	mov	r0, r2
 8013552:	e7c9      	b.n	80134e8 <_strtod_l+0x1e8>
 8013554:	4638      	mov	r0, r7
 8013556:	e7d2      	b.n	80134fe <_strtod_l+0x1fe>
 8013558:	2a08      	cmp	r2, #8
 801355a:	dc04      	bgt.n	8013566 <_strtod_l+0x266>
 801355c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801355e:	434e      	muls	r6, r1
 8013560:	9609      	str	r6, [sp, #36]	; 0x24
 8013562:	3201      	adds	r2, #1
 8013564:	e7e2      	b.n	801352c <_strtod_l+0x22c>
 8013566:	f102 0c01 	add.w	ip, r2, #1
 801356a:	f1bc 0f10 	cmp.w	ip, #16
 801356e:	bfd8      	it	le
 8013570:	fb01 f909 	mulle.w	r9, r1, r9
 8013574:	e7f5      	b.n	8013562 <_strtod_l+0x262>
 8013576:	2d10      	cmp	r5, #16
 8013578:	bfdc      	itt	le
 801357a:	220a      	movle	r2, #10
 801357c:	fb02 3909 	mlale	r9, r2, r9, r3
 8013580:	e7e1      	b.n	8013546 <_strtod_l+0x246>
 8013582:	2300      	movs	r3, #0
 8013584:	9307      	str	r3, [sp, #28]
 8013586:	2201      	movs	r2, #1
 8013588:	e77c      	b.n	8013484 <_strtod_l+0x184>
 801358a:	f04f 0c00 	mov.w	ip, #0
 801358e:	f108 0302 	add.w	r3, r8, #2
 8013592:	931d      	str	r3, [sp, #116]	; 0x74
 8013594:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013598:	e785      	b.n	80134a6 <_strtod_l+0x1a6>
 801359a:	f04f 0c01 	mov.w	ip, #1
 801359e:	e7f6      	b.n	801358e <_strtod_l+0x28e>
 80135a0:	08016f78 	.word	0x08016f78
 80135a4:	08016d28 	.word	0x08016d28
 80135a8:	7ff00000 	.word	0x7ff00000
 80135ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135ae:	1c59      	adds	r1, r3, #1
 80135b0:	911d      	str	r1, [sp, #116]	; 0x74
 80135b2:	785b      	ldrb	r3, [r3, #1]
 80135b4:	2b30      	cmp	r3, #48	; 0x30
 80135b6:	d0f9      	beq.n	80135ac <_strtod_l+0x2ac>
 80135b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80135bc:	2908      	cmp	r1, #8
 80135be:	f63f af79 	bhi.w	80134b4 <_strtod_l+0x1b4>
 80135c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80135c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135c8:	9308      	str	r3, [sp, #32]
 80135ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80135cc:	1c59      	adds	r1, r3, #1
 80135ce:	911d      	str	r1, [sp, #116]	; 0x74
 80135d0:	785b      	ldrb	r3, [r3, #1]
 80135d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80135d6:	2e09      	cmp	r6, #9
 80135d8:	d937      	bls.n	801364a <_strtod_l+0x34a>
 80135da:	9e08      	ldr	r6, [sp, #32]
 80135dc:	1b89      	subs	r1, r1, r6
 80135de:	2908      	cmp	r1, #8
 80135e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80135e4:	dc02      	bgt.n	80135ec <_strtod_l+0x2ec>
 80135e6:	4576      	cmp	r6, lr
 80135e8:	bfa8      	it	ge
 80135ea:	4676      	movge	r6, lr
 80135ec:	f1bc 0f00 	cmp.w	ip, #0
 80135f0:	d000      	beq.n	80135f4 <_strtod_l+0x2f4>
 80135f2:	4276      	negs	r6, r6
 80135f4:	2d00      	cmp	r5, #0
 80135f6:	d14f      	bne.n	8013698 <_strtod_l+0x398>
 80135f8:	9904      	ldr	r1, [sp, #16]
 80135fa:	4301      	orrs	r1, r0
 80135fc:	f47f aec2 	bne.w	8013384 <_strtod_l+0x84>
 8013600:	2a00      	cmp	r2, #0
 8013602:	f47f aedb 	bne.w	80133bc <_strtod_l+0xbc>
 8013606:	2b69      	cmp	r3, #105	; 0x69
 8013608:	d027      	beq.n	801365a <_strtod_l+0x35a>
 801360a:	dc24      	bgt.n	8013656 <_strtod_l+0x356>
 801360c:	2b49      	cmp	r3, #73	; 0x49
 801360e:	d024      	beq.n	801365a <_strtod_l+0x35a>
 8013610:	2b4e      	cmp	r3, #78	; 0x4e
 8013612:	f47f aed3 	bne.w	80133bc <_strtod_l+0xbc>
 8013616:	499e      	ldr	r1, [pc, #632]	; (8013890 <_strtod_l+0x590>)
 8013618:	a81d      	add	r0, sp, #116	; 0x74
 801361a:	f001 fe41 	bl	80152a0 <__match>
 801361e:	2800      	cmp	r0, #0
 8013620:	f43f aecc 	beq.w	80133bc <_strtod_l+0xbc>
 8013624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	2b28      	cmp	r3, #40	; 0x28
 801362a:	d12d      	bne.n	8013688 <_strtod_l+0x388>
 801362c:	4999      	ldr	r1, [pc, #612]	; (8013894 <_strtod_l+0x594>)
 801362e:	aa20      	add	r2, sp, #128	; 0x80
 8013630:	a81d      	add	r0, sp, #116	; 0x74
 8013632:	f001 fe49 	bl	80152c8 <__hexnan>
 8013636:	2805      	cmp	r0, #5
 8013638:	d126      	bne.n	8013688 <_strtod_l+0x388>
 801363a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801363c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013640:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013644:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013648:	e69c      	b.n	8013384 <_strtod_l+0x84>
 801364a:	210a      	movs	r1, #10
 801364c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013650:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013654:	e7b9      	b.n	80135ca <_strtod_l+0x2ca>
 8013656:	2b6e      	cmp	r3, #110	; 0x6e
 8013658:	e7db      	b.n	8013612 <_strtod_l+0x312>
 801365a:	498f      	ldr	r1, [pc, #572]	; (8013898 <_strtod_l+0x598>)
 801365c:	a81d      	add	r0, sp, #116	; 0x74
 801365e:	f001 fe1f 	bl	80152a0 <__match>
 8013662:	2800      	cmp	r0, #0
 8013664:	f43f aeaa 	beq.w	80133bc <_strtod_l+0xbc>
 8013668:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801366a:	498c      	ldr	r1, [pc, #560]	; (801389c <_strtod_l+0x59c>)
 801366c:	3b01      	subs	r3, #1
 801366e:	a81d      	add	r0, sp, #116	; 0x74
 8013670:	931d      	str	r3, [sp, #116]	; 0x74
 8013672:	f001 fe15 	bl	80152a0 <__match>
 8013676:	b910      	cbnz	r0, 801367e <_strtod_l+0x37e>
 8013678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801367a:	3301      	adds	r3, #1
 801367c:	931d      	str	r3, [sp, #116]	; 0x74
 801367e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80138ac <_strtod_l+0x5ac>
 8013682:	f04f 0a00 	mov.w	sl, #0
 8013686:	e67d      	b.n	8013384 <_strtod_l+0x84>
 8013688:	4885      	ldr	r0, [pc, #532]	; (80138a0 <_strtod_l+0x5a0>)
 801368a:	f002 fd01 	bl	8016090 <nan>
 801368e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013692:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013696:	e675      	b.n	8013384 <_strtod_l+0x84>
 8013698:	9b07      	ldr	r3, [sp, #28]
 801369a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801369c:	1af3      	subs	r3, r6, r3
 801369e:	2f00      	cmp	r7, #0
 80136a0:	bf08      	it	eq
 80136a2:	462f      	moveq	r7, r5
 80136a4:	2d10      	cmp	r5, #16
 80136a6:	9308      	str	r3, [sp, #32]
 80136a8:	46a8      	mov	r8, r5
 80136aa:	bfa8      	it	ge
 80136ac:	f04f 0810 	movge.w	r8, #16
 80136b0:	f7ec ff50 	bl	8000554 <__aeabi_ui2d>
 80136b4:	2d09      	cmp	r5, #9
 80136b6:	4682      	mov	sl, r0
 80136b8:	468b      	mov	fp, r1
 80136ba:	dd13      	ble.n	80136e4 <_strtod_l+0x3e4>
 80136bc:	4b79      	ldr	r3, [pc, #484]	; (80138a4 <_strtod_l+0x5a4>)
 80136be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80136c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80136c6:	f7ec ffbf 	bl	8000648 <__aeabi_dmul>
 80136ca:	4682      	mov	sl, r0
 80136cc:	4648      	mov	r0, r9
 80136ce:	468b      	mov	fp, r1
 80136d0:	f7ec ff40 	bl	8000554 <__aeabi_ui2d>
 80136d4:	4602      	mov	r2, r0
 80136d6:	460b      	mov	r3, r1
 80136d8:	4650      	mov	r0, sl
 80136da:	4659      	mov	r1, fp
 80136dc:	f7ec fdfe 	bl	80002dc <__adddf3>
 80136e0:	4682      	mov	sl, r0
 80136e2:	468b      	mov	fp, r1
 80136e4:	2d0f      	cmp	r5, #15
 80136e6:	dc38      	bgt.n	801375a <_strtod_l+0x45a>
 80136e8:	9b08      	ldr	r3, [sp, #32]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f43f ae4a 	beq.w	8013384 <_strtod_l+0x84>
 80136f0:	dd24      	ble.n	801373c <_strtod_l+0x43c>
 80136f2:	2b16      	cmp	r3, #22
 80136f4:	dc0b      	bgt.n	801370e <_strtod_l+0x40e>
 80136f6:	4d6b      	ldr	r5, [pc, #428]	; (80138a4 <_strtod_l+0x5a4>)
 80136f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80136fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013700:	4652      	mov	r2, sl
 8013702:	465b      	mov	r3, fp
 8013704:	f7ec ffa0 	bl	8000648 <__aeabi_dmul>
 8013708:	4682      	mov	sl, r0
 801370a:	468b      	mov	fp, r1
 801370c:	e63a      	b.n	8013384 <_strtod_l+0x84>
 801370e:	9a08      	ldr	r2, [sp, #32]
 8013710:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013714:	4293      	cmp	r3, r2
 8013716:	db20      	blt.n	801375a <_strtod_l+0x45a>
 8013718:	4c62      	ldr	r4, [pc, #392]	; (80138a4 <_strtod_l+0x5a4>)
 801371a:	f1c5 050f 	rsb	r5, r5, #15
 801371e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013722:	4652      	mov	r2, sl
 8013724:	465b      	mov	r3, fp
 8013726:	e9d1 0100 	ldrd	r0, r1, [r1]
 801372a:	f7ec ff8d 	bl	8000648 <__aeabi_dmul>
 801372e:	9b08      	ldr	r3, [sp, #32]
 8013730:	1b5d      	subs	r5, r3, r5
 8013732:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013736:	e9d4 2300 	ldrd	r2, r3, [r4]
 801373a:	e7e3      	b.n	8013704 <_strtod_l+0x404>
 801373c:	9b08      	ldr	r3, [sp, #32]
 801373e:	3316      	adds	r3, #22
 8013740:	db0b      	blt.n	801375a <_strtod_l+0x45a>
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	4a57      	ldr	r2, [pc, #348]	; (80138a4 <_strtod_l+0x5a4>)
 8013746:	1b9e      	subs	r6, r3, r6
 8013748:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801374c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013750:	4650      	mov	r0, sl
 8013752:	4659      	mov	r1, fp
 8013754:	f7ed f8a2 	bl	800089c <__aeabi_ddiv>
 8013758:	e7d6      	b.n	8013708 <_strtod_l+0x408>
 801375a:	9b08      	ldr	r3, [sp, #32]
 801375c:	eba5 0808 	sub.w	r8, r5, r8
 8013760:	4498      	add	r8, r3
 8013762:	f1b8 0f00 	cmp.w	r8, #0
 8013766:	dd71      	ble.n	801384c <_strtod_l+0x54c>
 8013768:	f018 030f 	ands.w	r3, r8, #15
 801376c:	d00a      	beq.n	8013784 <_strtod_l+0x484>
 801376e:	494d      	ldr	r1, [pc, #308]	; (80138a4 <_strtod_l+0x5a4>)
 8013770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013774:	4652      	mov	r2, sl
 8013776:	465b      	mov	r3, fp
 8013778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801377c:	f7ec ff64 	bl	8000648 <__aeabi_dmul>
 8013780:	4682      	mov	sl, r0
 8013782:	468b      	mov	fp, r1
 8013784:	f038 080f 	bics.w	r8, r8, #15
 8013788:	d04d      	beq.n	8013826 <_strtod_l+0x526>
 801378a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801378e:	dd22      	ble.n	80137d6 <_strtod_l+0x4d6>
 8013790:	2500      	movs	r5, #0
 8013792:	462e      	mov	r6, r5
 8013794:	9509      	str	r5, [sp, #36]	; 0x24
 8013796:	9507      	str	r5, [sp, #28]
 8013798:	2322      	movs	r3, #34	; 0x22
 801379a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80138ac <_strtod_l+0x5ac>
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	f04f 0a00 	mov.w	sl, #0
 80137a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f43f adec 	beq.w	8013384 <_strtod_l+0x84>
 80137ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137ae:	4620      	mov	r0, r4
 80137b0:	f001 fe88 	bl	80154c4 <_Bfree>
 80137b4:	9907      	ldr	r1, [sp, #28]
 80137b6:	4620      	mov	r0, r4
 80137b8:	f001 fe84 	bl	80154c4 <_Bfree>
 80137bc:	4631      	mov	r1, r6
 80137be:	4620      	mov	r0, r4
 80137c0:	f001 fe80 	bl	80154c4 <_Bfree>
 80137c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80137c6:	4620      	mov	r0, r4
 80137c8:	f001 fe7c 	bl	80154c4 <_Bfree>
 80137cc:	4629      	mov	r1, r5
 80137ce:	4620      	mov	r0, r4
 80137d0:	f001 fe78 	bl	80154c4 <_Bfree>
 80137d4:	e5d6      	b.n	8013384 <_strtod_l+0x84>
 80137d6:	2300      	movs	r3, #0
 80137d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80137dc:	4650      	mov	r0, sl
 80137de:	4659      	mov	r1, fp
 80137e0:	4699      	mov	r9, r3
 80137e2:	f1b8 0f01 	cmp.w	r8, #1
 80137e6:	dc21      	bgt.n	801382c <_strtod_l+0x52c>
 80137e8:	b10b      	cbz	r3, 80137ee <_strtod_l+0x4ee>
 80137ea:	4682      	mov	sl, r0
 80137ec:	468b      	mov	fp, r1
 80137ee:	4b2e      	ldr	r3, [pc, #184]	; (80138a8 <_strtod_l+0x5a8>)
 80137f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80137f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80137f8:	4652      	mov	r2, sl
 80137fa:	465b      	mov	r3, fp
 80137fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013800:	f7ec ff22 	bl	8000648 <__aeabi_dmul>
 8013804:	4b29      	ldr	r3, [pc, #164]	; (80138ac <_strtod_l+0x5ac>)
 8013806:	460a      	mov	r2, r1
 8013808:	400b      	ands	r3, r1
 801380a:	4929      	ldr	r1, [pc, #164]	; (80138b0 <_strtod_l+0x5b0>)
 801380c:	428b      	cmp	r3, r1
 801380e:	4682      	mov	sl, r0
 8013810:	d8be      	bhi.n	8013790 <_strtod_l+0x490>
 8013812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013816:	428b      	cmp	r3, r1
 8013818:	bf86      	itte	hi
 801381a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80138b4 <_strtod_l+0x5b4>
 801381e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013822:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013826:	2300      	movs	r3, #0
 8013828:	9304      	str	r3, [sp, #16]
 801382a:	e081      	b.n	8013930 <_strtod_l+0x630>
 801382c:	f018 0f01 	tst.w	r8, #1
 8013830:	d007      	beq.n	8013842 <_strtod_l+0x542>
 8013832:	4b1d      	ldr	r3, [pc, #116]	; (80138a8 <_strtod_l+0x5a8>)
 8013834:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383c:	f7ec ff04 	bl	8000648 <__aeabi_dmul>
 8013840:	2301      	movs	r3, #1
 8013842:	f109 0901 	add.w	r9, r9, #1
 8013846:	ea4f 0868 	mov.w	r8, r8, asr #1
 801384a:	e7ca      	b.n	80137e2 <_strtod_l+0x4e2>
 801384c:	d0eb      	beq.n	8013826 <_strtod_l+0x526>
 801384e:	f1c8 0800 	rsb	r8, r8, #0
 8013852:	f018 020f 	ands.w	r2, r8, #15
 8013856:	d00a      	beq.n	801386e <_strtod_l+0x56e>
 8013858:	4b12      	ldr	r3, [pc, #72]	; (80138a4 <_strtod_l+0x5a4>)
 801385a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801385e:	4650      	mov	r0, sl
 8013860:	4659      	mov	r1, fp
 8013862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013866:	f7ed f819 	bl	800089c <__aeabi_ddiv>
 801386a:	4682      	mov	sl, r0
 801386c:	468b      	mov	fp, r1
 801386e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013872:	d0d8      	beq.n	8013826 <_strtod_l+0x526>
 8013874:	f1b8 0f1f 	cmp.w	r8, #31
 8013878:	dd1e      	ble.n	80138b8 <_strtod_l+0x5b8>
 801387a:	2500      	movs	r5, #0
 801387c:	462e      	mov	r6, r5
 801387e:	9509      	str	r5, [sp, #36]	; 0x24
 8013880:	9507      	str	r5, [sp, #28]
 8013882:	2322      	movs	r3, #34	; 0x22
 8013884:	f04f 0a00 	mov.w	sl, #0
 8013888:	f04f 0b00 	mov.w	fp, #0
 801388c:	6023      	str	r3, [r4, #0]
 801388e:	e789      	b.n	80137a4 <_strtod_l+0x4a4>
 8013890:	08016cf9 	.word	0x08016cf9
 8013894:	08016d3c 	.word	0x08016d3c
 8013898:	08016cf1 	.word	0x08016cf1
 801389c:	08016e7c 	.word	0x08016e7c
 80138a0:	08017138 	.word	0x08017138
 80138a4:	08017018 	.word	0x08017018
 80138a8:	08016ff0 	.word	0x08016ff0
 80138ac:	7ff00000 	.word	0x7ff00000
 80138b0:	7ca00000 	.word	0x7ca00000
 80138b4:	7fefffff 	.word	0x7fefffff
 80138b8:	f018 0310 	ands.w	r3, r8, #16
 80138bc:	bf18      	it	ne
 80138be:	236a      	movne	r3, #106	; 0x6a
 80138c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8013c78 <_strtod_l+0x978>
 80138c4:	9304      	str	r3, [sp, #16]
 80138c6:	4650      	mov	r0, sl
 80138c8:	4659      	mov	r1, fp
 80138ca:	2300      	movs	r3, #0
 80138cc:	f018 0f01 	tst.w	r8, #1
 80138d0:	d004      	beq.n	80138dc <_strtod_l+0x5dc>
 80138d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80138d6:	f7ec feb7 	bl	8000648 <__aeabi_dmul>
 80138da:	2301      	movs	r3, #1
 80138dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80138e0:	f109 0908 	add.w	r9, r9, #8
 80138e4:	d1f2      	bne.n	80138cc <_strtod_l+0x5cc>
 80138e6:	b10b      	cbz	r3, 80138ec <_strtod_l+0x5ec>
 80138e8:	4682      	mov	sl, r0
 80138ea:	468b      	mov	fp, r1
 80138ec:	9b04      	ldr	r3, [sp, #16]
 80138ee:	b1bb      	cbz	r3, 8013920 <_strtod_l+0x620>
 80138f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80138f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	4659      	mov	r1, fp
 80138fc:	dd10      	ble.n	8013920 <_strtod_l+0x620>
 80138fe:	2b1f      	cmp	r3, #31
 8013900:	f340 8128 	ble.w	8013b54 <_strtod_l+0x854>
 8013904:	2b34      	cmp	r3, #52	; 0x34
 8013906:	bfde      	ittt	le
 8013908:	3b20      	suble	r3, #32
 801390a:	f04f 32ff 	movle.w	r2, #4294967295
 801390e:	fa02 f303 	lslle.w	r3, r2, r3
 8013912:	f04f 0a00 	mov.w	sl, #0
 8013916:	bfcc      	ite	gt
 8013918:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801391c:	ea03 0b01 	andle.w	fp, r3, r1
 8013920:	2200      	movs	r2, #0
 8013922:	2300      	movs	r3, #0
 8013924:	4650      	mov	r0, sl
 8013926:	4659      	mov	r1, fp
 8013928:	f7ed f8f6 	bl	8000b18 <__aeabi_dcmpeq>
 801392c:	2800      	cmp	r0, #0
 801392e:	d1a4      	bne.n	801387a <_strtod_l+0x57a>
 8013930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013936:	462b      	mov	r3, r5
 8013938:	463a      	mov	r2, r7
 801393a:	4620      	mov	r0, r4
 801393c:	f001 fe2e 	bl	801559c <__s2b>
 8013940:	9009      	str	r0, [sp, #36]	; 0x24
 8013942:	2800      	cmp	r0, #0
 8013944:	f43f af24 	beq.w	8013790 <_strtod_l+0x490>
 8013948:	9b07      	ldr	r3, [sp, #28]
 801394a:	1b9e      	subs	r6, r3, r6
 801394c:	9b08      	ldr	r3, [sp, #32]
 801394e:	2b00      	cmp	r3, #0
 8013950:	bfb4      	ite	lt
 8013952:	4633      	movlt	r3, r6
 8013954:	2300      	movge	r3, #0
 8013956:	9310      	str	r3, [sp, #64]	; 0x40
 8013958:	9b08      	ldr	r3, [sp, #32]
 801395a:	2500      	movs	r5, #0
 801395c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013960:	9318      	str	r3, [sp, #96]	; 0x60
 8013962:	462e      	mov	r6, r5
 8013964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013966:	4620      	mov	r0, r4
 8013968:	6859      	ldr	r1, [r3, #4]
 801396a:	f001 fd6b 	bl	8015444 <_Balloc>
 801396e:	9007      	str	r0, [sp, #28]
 8013970:	2800      	cmp	r0, #0
 8013972:	f43f af11 	beq.w	8013798 <_strtod_l+0x498>
 8013976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013978:	691a      	ldr	r2, [r3, #16]
 801397a:	3202      	adds	r2, #2
 801397c:	f103 010c 	add.w	r1, r3, #12
 8013980:	0092      	lsls	r2, r2, #2
 8013982:	300c      	adds	r0, #12
 8013984:	f7fe fcd8 	bl	8012338 <memcpy>
 8013988:	ec4b ab10 	vmov	d0, sl, fp
 801398c:	aa20      	add	r2, sp, #128	; 0x80
 801398e:	a91f      	add	r1, sp, #124	; 0x7c
 8013990:	4620      	mov	r0, r4
 8013992:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8013996:	f002 f93d 	bl	8015c14 <__d2b>
 801399a:	901e      	str	r0, [sp, #120]	; 0x78
 801399c:	2800      	cmp	r0, #0
 801399e:	f43f aefb 	beq.w	8013798 <_strtod_l+0x498>
 80139a2:	2101      	movs	r1, #1
 80139a4:	4620      	mov	r0, r4
 80139a6:	f001 fe93 	bl	80156d0 <__i2b>
 80139aa:	4606      	mov	r6, r0
 80139ac:	2800      	cmp	r0, #0
 80139ae:	f43f aef3 	beq.w	8013798 <_strtod_l+0x498>
 80139b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80139b4:	9904      	ldr	r1, [sp, #16]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	bfab      	itete	ge
 80139ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80139bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80139be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80139c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80139c4:	bfac      	ite	ge
 80139c6:	eb03 0902 	addge.w	r9, r3, r2
 80139ca:	1ad7      	sublt	r7, r2, r3
 80139cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80139ce:	eba3 0801 	sub.w	r8, r3, r1
 80139d2:	4490      	add	r8, r2
 80139d4:	4ba3      	ldr	r3, [pc, #652]	; (8013c64 <_strtod_l+0x964>)
 80139d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80139da:	4598      	cmp	r8, r3
 80139dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80139e0:	f280 80cc 	bge.w	8013b7c <_strtod_l+0x87c>
 80139e4:	eba3 0308 	sub.w	r3, r3, r8
 80139e8:	2b1f      	cmp	r3, #31
 80139ea:	eba2 0203 	sub.w	r2, r2, r3
 80139ee:	f04f 0101 	mov.w	r1, #1
 80139f2:	f300 80b6 	bgt.w	8013b62 <_strtod_l+0x862>
 80139f6:	fa01 f303 	lsl.w	r3, r1, r3
 80139fa:	9311      	str	r3, [sp, #68]	; 0x44
 80139fc:	2300      	movs	r3, #0
 80139fe:	930c      	str	r3, [sp, #48]	; 0x30
 8013a00:	eb09 0802 	add.w	r8, r9, r2
 8013a04:	9b04      	ldr	r3, [sp, #16]
 8013a06:	45c1      	cmp	r9, r8
 8013a08:	4417      	add	r7, r2
 8013a0a:	441f      	add	r7, r3
 8013a0c:	464b      	mov	r3, r9
 8013a0e:	bfa8      	it	ge
 8013a10:	4643      	movge	r3, r8
 8013a12:	42bb      	cmp	r3, r7
 8013a14:	bfa8      	it	ge
 8013a16:	463b      	movge	r3, r7
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	bfc2      	ittt	gt
 8013a1c:	eba8 0803 	subgt.w	r8, r8, r3
 8013a20:	1aff      	subgt	r7, r7, r3
 8013a22:	eba9 0903 	subgt.w	r9, r9, r3
 8013a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	dd17      	ble.n	8013a5c <_strtod_l+0x75c>
 8013a2c:	4631      	mov	r1, r6
 8013a2e:	461a      	mov	r2, r3
 8013a30:	4620      	mov	r0, r4
 8013a32:	f001 ff09 	bl	8015848 <__pow5mult>
 8013a36:	4606      	mov	r6, r0
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	f43f aead 	beq.w	8013798 <_strtod_l+0x498>
 8013a3e:	4601      	mov	r1, r0
 8013a40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013a42:	4620      	mov	r0, r4
 8013a44:	f001 fe5a 	bl	80156fc <__multiply>
 8013a48:	900f      	str	r0, [sp, #60]	; 0x3c
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	f43f aea4 	beq.w	8013798 <_strtod_l+0x498>
 8013a50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013a52:	4620      	mov	r0, r4
 8013a54:	f001 fd36 	bl	80154c4 <_Bfree>
 8013a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a5a:	931e      	str	r3, [sp, #120]	; 0x78
 8013a5c:	f1b8 0f00 	cmp.w	r8, #0
 8013a60:	f300 8091 	bgt.w	8013b86 <_strtod_l+0x886>
 8013a64:	9b08      	ldr	r3, [sp, #32]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	dd08      	ble.n	8013a7c <_strtod_l+0x77c>
 8013a6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a6c:	9907      	ldr	r1, [sp, #28]
 8013a6e:	4620      	mov	r0, r4
 8013a70:	f001 feea 	bl	8015848 <__pow5mult>
 8013a74:	9007      	str	r0, [sp, #28]
 8013a76:	2800      	cmp	r0, #0
 8013a78:	f43f ae8e 	beq.w	8013798 <_strtod_l+0x498>
 8013a7c:	2f00      	cmp	r7, #0
 8013a7e:	dd08      	ble.n	8013a92 <_strtod_l+0x792>
 8013a80:	9907      	ldr	r1, [sp, #28]
 8013a82:	463a      	mov	r2, r7
 8013a84:	4620      	mov	r0, r4
 8013a86:	f001 ff39 	bl	80158fc <__lshift>
 8013a8a:	9007      	str	r0, [sp, #28]
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	f43f ae83 	beq.w	8013798 <_strtod_l+0x498>
 8013a92:	f1b9 0f00 	cmp.w	r9, #0
 8013a96:	dd08      	ble.n	8013aaa <_strtod_l+0x7aa>
 8013a98:	4631      	mov	r1, r6
 8013a9a:	464a      	mov	r2, r9
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f001 ff2d 	bl	80158fc <__lshift>
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	f43f ae77 	beq.w	8013798 <_strtod_l+0x498>
 8013aaa:	9a07      	ldr	r2, [sp, #28]
 8013aac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f001 ffac 	bl	8015a0c <__mdiff>
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	f43f ae6e 	beq.w	8013798 <_strtod_l+0x498>
 8013abc:	68c3      	ldr	r3, [r0, #12]
 8013abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	60c3      	str	r3, [r0, #12]
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	f001 ff85 	bl	80159d4 <__mcmp>
 8013aca:	2800      	cmp	r0, #0
 8013acc:	da65      	bge.n	8013b9a <_strtod_l+0x89a>
 8013ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ad0:	ea53 030a 	orrs.w	r3, r3, sl
 8013ad4:	f040 8087 	bne.w	8013be6 <_strtod_l+0x8e6>
 8013ad8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f040 8082 	bne.w	8013be6 <_strtod_l+0x8e6>
 8013ae2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013ae6:	0d1b      	lsrs	r3, r3, #20
 8013ae8:	051b      	lsls	r3, r3, #20
 8013aea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013aee:	d97a      	bls.n	8013be6 <_strtod_l+0x8e6>
 8013af0:	696b      	ldr	r3, [r5, #20]
 8013af2:	b913      	cbnz	r3, 8013afa <_strtod_l+0x7fa>
 8013af4:	692b      	ldr	r3, [r5, #16]
 8013af6:	2b01      	cmp	r3, #1
 8013af8:	dd75      	ble.n	8013be6 <_strtod_l+0x8e6>
 8013afa:	4629      	mov	r1, r5
 8013afc:	2201      	movs	r2, #1
 8013afe:	4620      	mov	r0, r4
 8013b00:	f001 fefc 	bl	80158fc <__lshift>
 8013b04:	4631      	mov	r1, r6
 8013b06:	4605      	mov	r5, r0
 8013b08:	f001 ff64 	bl	80159d4 <__mcmp>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	dd6a      	ble.n	8013be6 <_strtod_l+0x8e6>
 8013b10:	9904      	ldr	r1, [sp, #16]
 8013b12:	4a55      	ldr	r2, [pc, #340]	; (8013c68 <_strtod_l+0x968>)
 8013b14:	465b      	mov	r3, fp
 8013b16:	2900      	cmp	r1, #0
 8013b18:	f000 8085 	beq.w	8013c26 <_strtod_l+0x926>
 8013b1c:	ea02 010b 	and.w	r1, r2, fp
 8013b20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b24:	dc7f      	bgt.n	8013c26 <_strtod_l+0x926>
 8013b26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b2a:	f77f aeaa 	ble.w	8013882 <_strtod_l+0x582>
 8013b2e:	4a4f      	ldr	r2, [pc, #316]	; (8013c6c <_strtod_l+0x96c>)
 8013b30:	2300      	movs	r3, #0
 8013b32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8013b36:	4650      	mov	r0, sl
 8013b38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013b3c:	4659      	mov	r1, fp
 8013b3e:	f7ec fd83 	bl	8000648 <__aeabi_dmul>
 8013b42:	460b      	mov	r3, r1
 8013b44:	4303      	orrs	r3, r0
 8013b46:	bf08      	it	eq
 8013b48:	2322      	moveq	r3, #34	; 0x22
 8013b4a:	4682      	mov	sl, r0
 8013b4c:	468b      	mov	fp, r1
 8013b4e:	bf08      	it	eq
 8013b50:	6023      	streq	r3, [r4, #0]
 8013b52:	e62b      	b.n	80137ac <_strtod_l+0x4ac>
 8013b54:	f04f 32ff 	mov.w	r2, #4294967295
 8013b58:	fa02 f303 	lsl.w	r3, r2, r3
 8013b5c:	ea03 0a0a 	and.w	sl, r3, sl
 8013b60:	e6de      	b.n	8013920 <_strtod_l+0x620>
 8013b62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013b66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013b6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013b6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013b72:	fa01 f308 	lsl.w	r3, r1, r8
 8013b76:	930c      	str	r3, [sp, #48]	; 0x30
 8013b78:	9111      	str	r1, [sp, #68]	; 0x44
 8013b7a:	e741      	b.n	8013a00 <_strtod_l+0x700>
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	930c      	str	r3, [sp, #48]	; 0x30
 8013b80:	2301      	movs	r3, #1
 8013b82:	9311      	str	r3, [sp, #68]	; 0x44
 8013b84:	e73c      	b.n	8013a00 <_strtod_l+0x700>
 8013b86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013b88:	4642      	mov	r2, r8
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f001 feb6 	bl	80158fc <__lshift>
 8013b90:	901e      	str	r0, [sp, #120]	; 0x78
 8013b92:	2800      	cmp	r0, #0
 8013b94:	f47f af66 	bne.w	8013a64 <_strtod_l+0x764>
 8013b98:	e5fe      	b.n	8013798 <_strtod_l+0x498>
 8013b9a:	465f      	mov	r7, fp
 8013b9c:	d16e      	bne.n	8013c7c <_strtod_l+0x97c>
 8013b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ba0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ba4:	b342      	cbz	r2, 8013bf8 <_strtod_l+0x8f8>
 8013ba6:	4a32      	ldr	r2, [pc, #200]	; (8013c70 <_strtod_l+0x970>)
 8013ba8:	4293      	cmp	r3, r2
 8013baa:	d128      	bne.n	8013bfe <_strtod_l+0x8fe>
 8013bac:	9b04      	ldr	r3, [sp, #16]
 8013bae:	4650      	mov	r0, sl
 8013bb0:	b1eb      	cbz	r3, 8013bee <_strtod_l+0x8ee>
 8013bb2:	4a2d      	ldr	r2, [pc, #180]	; (8013c68 <_strtod_l+0x968>)
 8013bb4:	403a      	ands	r2, r7
 8013bb6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013bba:	f04f 31ff 	mov.w	r1, #4294967295
 8013bbe:	d819      	bhi.n	8013bf4 <_strtod_l+0x8f4>
 8013bc0:	0d12      	lsrs	r2, r2, #20
 8013bc2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8013bca:	4298      	cmp	r0, r3
 8013bcc:	d117      	bne.n	8013bfe <_strtod_l+0x8fe>
 8013bce:	4b29      	ldr	r3, [pc, #164]	; (8013c74 <_strtod_l+0x974>)
 8013bd0:	429f      	cmp	r7, r3
 8013bd2:	d102      	bne.n	8013bda <_strtod_l+0x8da>
 8013bd4:	3001      	adds	r0, #1
 8013bd6:	f43f addf 	beq.w	8013798 <_strtod_l+0x498>
 8013bda:	4b23      	ldr	r3, [pc, #140]	; (8013c68 <_strtod_l+0x968>)
 8013bdc:	403b      	ands	r3, r7
 8013bde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013be2:	f04f 0a00 	mov.w	sl, #0
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1a0      	bne.n	8013b2e <_strtod_l+0x82e>
 8013bec:	e5de      	b.n	80137ac <_strtod_l+0x4ac>
 8013bee:	f04f 33ff 	mov.w	r3, #4294967295
 8013bf2:	e7ea      	b.n	8013bca <_strtod_l+0x8ca>
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	e7e8      	b.n	8013bca <_strtod_l+0x8ca>
 8013bf8:	ea53 030a 	orrs.w	r3, r3, sl
 8013bfc:	d088      	beq.n	8013b10 <_strtod_l+0x810>
 8013bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c00:	b1db      	cbz	r3, 8013c3a <_strtod_l+0x93a>
 8013c02:	423b      	tst	r3, r7
 8013c04:	d0ef      	beq.n	8013be6 <_strtod_l+0x8e6>
 8013c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c08:	9a04      	ldr	r2, [sp, #16]
 8013c0a:	4650      	mov	r0, sl
 8013c0c:	4659      	mov	r1, fp
 8013c0e:	b1c3      	cbz	r3, 8013c42 <_strtod_l+0x942>
 8013c10:	f7ff fb5a 	bl	80132c8 <sulp>
 8013c14:	4602      	mov	r2, r0
 8013c16:	460b      	mov	r3, r1
 8013c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c1c:	f7ec fb5e 	bl	80002dc <__adddf3>
 8013c20:	4682      	mov	sl, r0
 8013c22:	468b      	mov	fp, r1
 8013c24:	e7df      	b.n	8013be6 <_strtod_l+0x8e6>
 8013c26:	4013      	ands	r3, r2
 8013c28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013c30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013c34:	f04f 3aff 	mov.w	sl, #4294967295
 8013c38:	e7d5      	b.n	8013be6 <_strtod_l+0x8e6>
 8013c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c3c:	ea13 0f0a 	tst.w	r3, sl
 8013c40:	e7e0      	b.n	8013c04 <_strtod_l+0x904>
 8013c42:	f7ff fb41 	bl	80132c8 <sulp>
 8013c46:	4602      	mov	r2, r0
 8013c48:	460b      	mov	r3, r1
 8013c4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c4e:	f7ec fb43 	bl	80002d8 <__aeabi_dsub>
 8013c52:	2200      	movs	r2, #0
 8013c54:	2300      	movs	r3, #0
 8013c56:	4682      	mov	sl, r0
 8013c58:	468b      	mov	fp, r1
 8013c5a:	f7ec ff5d 	bl	8000b18 <__aeabi_dcmpeq>
 8013c5e:	2800      	cmp	r0, #0
 8013c60:	d0c1      	beq.n	8013be6 <_strtod_l+0x8e6>
 8013c62:	e60e      	b.n	8013882 <_strtod_l+0x582>
 8013c64:	fffffc02 	.word	0xfffffc02
 8013c68:	7ff00000 	.word	0x7ff00000
 8013c6c:	39500000 	.word	0x39500000
 8013c70:	000fffff 	.word	0x000fffff
 8013c74:	7fefffff 	.word	0x7fefffff
 8013c78:	08016d50 	.word	0x08016d50
 8013c7c:	4631      	mov	r1, r6
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f002 f824 	bl	8015ccc <__ratio>
 8013c84:	ec59 8b10 	vmov	r8, r9, d0
 8013c88:	ee10 0a10 	vmov	r0, s0
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c92:	4649      	mov	r1, r9
 8013c94:	f7ec ff54 	bl	8000b40 <__aeabi_dcmple>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d07c      	beq.n	8013d96 <_strtod_l+0xa96>
 8013c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d04c      	beq.n	8013d3c <_strtod_l+0xa3c>
 8013ca2:	4b95      	ldr	r3, [pc, #596]	; (8013ef8 <_strtod_l+0xbf8>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013caa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013ef8 <_strtod_l+0xbf8>
 8013cae:	f04f 0800 	mov.w	r8, #0
 8013cb2:	4b92      	ldr	r3, [pc, #584]	; (8013efc <_strtod_l+0xbfc>)
 8013cb4:	403b      	ands	r3, r7
 8013cb6:	9311      	str	r3, [sp, #68]	; 0x44
 8013cb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013cba:	4b91      	ldr	r3, [pc, #580]	; (8013f00 <_strtod_l+0xc00>)
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	f040 80b2 	bne.w	8013e26 <_strtod_l+0xb26>
 8013cc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013cca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013cce:	ec4b ab10 	vmov	d0, sl, fp
 8013cd2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8013cd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013cda:	f001 ff1f 	bl	8015b1c <__ulp>
 8013cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013ce2:	ec53 2b10 	vmov	r2, r3, d0
 8013ce6:	f7ec fcaf 	bl	8000648 <__aeabi_dmul>
 8013cea:	4652      	mov	r2, sl
 8013cec:	465b      	mov	r3, fp
 8013cee:	f7ec faf5 	bl	80002dc <__adddf3>
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	4981      	ldr	r1, [pc, #516]	; (8013efc <_strtod_l+0xbfc>)
 8013cf6:	4a83      	ldr	r2, [pc, #524]	; (8013f04 <_strtod_l+0xc04>)
 8013cf8:	4019      	ands	r1, r3
 8013cfa:	4291      	cmp	r1, r2
 8013cfc:	4682      	mov	sl, r0
 8013cfe:	d95e      	bls.n	8013dbe <_strtod_l+0xabe>
 8013d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d103      	bne.n	8013d12 <_strtod_l+0xa12>
 8013d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	f43f ad43 	beq.w	8013798 <_strtod_l+0x498>
 8013d12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013f10 <_strtod_l+0xc10>
 8013d16:	f04f 3aff 	mov.w	sl, #4294967295
 8013d1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	f001 fbd1 	bl	80154c4 <_Bfree>
 8013d22:	9907      	ldr	r1, [sp, #28]
 8013d24:	4620      	mov	r0, r4
 8013d26:	f001 fbcd 	bl	80154c4 <_Bfree>
 8013d2a:	4631      	mov	r1, r6
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f001 fbc9 	bl	80154c4 <_Bfree>
 8013d32:	4629      	mov	r1, r5
 8013d34:	4620      	mov	r0, r4
 8013d36:	f001 fbc5 	bl	80154c4 <_Bfree>
 8013d3a:	e613      	b.n	8013964 <_strtod_l+0x664>
 8013d3c:	f1ba 0f00 	cmp.w	sl, #0
 8013d40:	d11b      	bne.n	8013d7a <_strtod_l+0xa7a>
 8013d42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d46:	b9f3      	cbnz	r3, 8013d86 <_strtod_l+0xa86>
 8013d48:	4b6b      	ldr	r3, [pc, #428]	; (8013ef8 <_strtod_l+0xbf8>)
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	4640      	mov	r0, r8
 8013d4e:	4649      	mov	r1, r9
 8013d50:	f7ec feec 	bl	8000b2c <__aeabi_dcmplt>
 8013d54:	b9d0      	cbnz	r0, 8013d8c <_strtod_l+0xa8c>
 8013d56:	4640      	mov	r0, r8
 8013d58:	4649      	mov	r1, r9
 8013d5a:	4b6b      	ldr	r3, [pc, #428]	; (8013f08 <_strtod_l+0xc08>)
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	f7ec fc73 	bl	8000648 <__aeabi_dmul>
 8013d62:	4680      	mov	r8, r0
 8013d64:	4689      	mov	r9, r1
 8013d66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013d6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013d6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8013d74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013d78:	e79b      	b.n	8013cb2 <_strtod_l+0x9b2>
 8013d7a:	f1ba 0f01 	cmp.w	sl, #1
 8013d7e:	d102      	bne.n	8013d86 <_strtod_l+0xa86>
 8013d80:	2f00      	cmp	r7, #0
 8013d82:	f43f ad7e 	beq.w	8013882 <_strtod_l+0x582>
 8013d86:	4b61      	ldr	r3, [pc, #388]	; (8013f0c <_strtod_l+0xc0c>)
 8013d88:	2200      	movs	r2, #0
 8013d8a:	e78c      	b.n	8013ca6 <_strtod_l+0x9a6>
 8013d8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013f08 <_strtod_l+0xc08>
 8013d90:	f04f 0800 	mov.w	r8, #0
 8013d94:	e7e7      	b.n	8013d66 <_strtod_l+0xa66>
 8013d96:	4b5c      	ldr	r3, [pc, #368]	; (8013f08 <_strtod_l+0xc08>)
 8013d98:	4640      	mov	r0, r8
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	f7ec fc53 	bl	8000648 <__aeabi_dmul>
 8013da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013da4:	4680      	mov	r8, r0
 8013da6:	4689      	mov	r9, r1
 8013da8:	b933      	cbnz	r3, 8013db8 <_strtod_l+0xab8>
 8013daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dae:	9012      	str	r0, [sp, #72]	; 0x48
 8013db0:	9313      	str	r3, [sp, #76]	; 0x4c
 8013db2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013db6:	e7dd      	b.n	8013d74 <_strtod_l+0xa74>
 8013db8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013dbc:	e7f9      	b.n	8013db2 <_strtod_l+0xab2>
 8013dbe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013dc2:	9b04      	ldr	r3, [sp, #16]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1a8      	bne.n	8013d1a <_strtod_l+0xa1a>
 8013dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013dcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013dce:	0d1b      	lsrs	r3, r3, #20
 8013dd0:	051b      	lsls	r3, r3, #20
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d1a1      	bne.n	8013d1a <_strtod_l+0xa1a>
 8013dd6:	4640      	mov	r0, r8
 8013dd8:	4649      	mov	r1, r9
 8013dda:	f7ec ff7d 	bl	8000cd8 <__aeabi_d2lz>
 8013dde:	f7ec fc05 	bl	80005ec <__aeabi_l2d>
 8013de2:	4602      	mov	r2, r0
 8013de4:	460b      	mov	r3, r1
 8013de6:	4640      	mov	r0, r8
 8013de8:	4649      	mov	r1, r9
 8013dea:	f7ec fa75 	bl	80002d8 <__aeabi_dsub>
 8013dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013df0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013df4:	ea43 030a 	orr.w	r3, r3, sl
 8013df8:	4313      	orrs	r3, r2
 8013dfa:	4680      	mov	r8, r0
 8013dfc:	4689      	mov	r9, r1
 8013dfe:	d053      	beq.n	8013ea8 <_strtod_l+0xba8>
 8013e00:	a335      	add	r3, pc, #212	; (adr r3, 8013ed8 <_strtod_l+0xbd8>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	f7ec fe91 	bl	8000b2c <__aeabi_dcmplt>
 8013e0a:	2800      	cmp	r0, #0
 8013e0c:	f47f acce 	bne.w	80137ac <_strtod_l+0x4ac>
 8013e10:	a333      	add	r3, pc, #204	; (adr r3, 8013ee0 <_strtod_l+0xbe0>)
 8013e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e16:	4640      	mov	r0, r8
 8013e18:	4649      	mov	r1, r9
 8013e1a:	f7ec fea5 	bl	8000b68 <__aeabi_dcmpgt>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	f43f af7b 	beq.w	8013d1a <_strtod_l+0xa1a>
 8013e24:	e4c2      	b.n	80137ac <_strtod_l+0x4ac>
 8013e26:	9b04      	ldr	r3, [sp, #16]
 8013e28:	b333      	cbz	r3, 8013e78 <_strtod_l+0xb78>
 8013e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e30:	d822      	bhi.n	8013e78 <_strtod_l+0xb78>
 8013e32:	a32d      	add	r3, pc, #180	; (adr r3, 8013ee8 <_strtod_l+0xbe8>)
 8013e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e38:	4640      	mov	r0, r8
 8013e3a:	4649      	mov	r1, r9
 8013e3c:	f7ec fe80 	bl	8000b40 <__aeabi_dcmple>
 8013e40:	b1a0      	cbz	r0, 8013e6c <_strtod_l+0xb6c>
 8013e42:	4649      	mov	r1, r9
 8013e44:	4640      	mov	r0, r8
 8013e46:	f7ec fed7 	bl	8000bf8 <__aeabi_d2uiz>
 8013e4a:	2801      	cmp	r0, #1
 8013e4c:	bf38      	it	cc
 8013e4e:	2001      	movcc	r0, #1
 8013e50:	f7ec fb80 	bl	8000554 <__aeabi_ui2d>
 8013e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e56:	4680      	mov	r8, r0
 8013e58:	4689      	mov	r9, r1
 8013e5a:	bb13      	cbnz	r3, 8013ea2 <_strtod_l+0xba2>
 8013e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013e60:	9014      	str	r0, [sp, #80]	; 0x50
 8013e62:	9315      	str	r3, [sp, #84]	; 0x54
 8013e64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013e68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013e74:	1a9b      	subs	r3, r3, r2
 8013e76:	930d      	str	r3, [sp, #52]	; 0x34
 8013e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013e80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013e84:	f001 fe4a 	bl	8015b1c <__ulp>
 8013e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e8c:	ec53 2b10 	vmov	r2, r3, d0
 8013e90:	f7ec fbda 	bl	8000648 <__aeabi_dmul>
 8013e94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013e98:	f7ec fa20 	bl	80002dc <__adddf3>
 8013e9c:	4682      	mov	sl, r0
 8013e9e:	468b      	mov	fp, r1
 8013ea0:	e78f      	b.n	8013dc2 <_strtod_l+0xac2>
 8013ea2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8013ea6:	e7dd      	b.n	8013e64 <_strtod_l+0xb64>
 8013ea8:	a311      	add	r3, pc, #68	; (adr r3, 8013ef0 <_strtod_l+0xbf0>)
 8013eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eae:	f7ec fe3d 	bl	8000b2c <__aeabi_dcmplt>
 8013eb2:	e7b4      	b.n	8013e1e <_strtod_l+0xb1e>
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8013eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013eba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ebc:	6013      	str	r3, [r2, #0]
 8013ebe:	f7ff ba65 	b.w	801338c <_strtod_l+0x8c>
 8013ec2:	2b65      	cmp	r3, #101	; 0x65
 8013ec4:	f43f ab5d 	beq.w	8013582 <_strtod_l+0x282>
 8013ec8:	2b45      	cmp	r3, #69	; 0x45
 8013eca:	f43f ab5a 	beq.w	8013582 <_strtod_l+0x282>
 8013ece:	2201      	movs	r2, #1
 8013ed0:	f7ff bb92 	b.w	80135f8 <_strtod_l+0x2f8>
 8013ed4:	f3af 8000 	nop.w
 8013ed8:	94a03595 	.word	0x94a03595
 8013edc:	3fdfffff 	.word	0x3fdfffff
 8013ee0:	35afe535 	.word	0x35afe535
 8013ee4:	3fe00000 	.word	0x3fe00000
 8013ee8:	ffc00000 	.word	0xffc00000
 8013eec:	41dfffff 	.word	0x41dfffff
 8013ef0:	94a03595 	.word	0x94a03595
 8013ef4:	3fcfffff 	.word	0x3fcfffff
 8013ef8:	3ff00000 	.word	0x3ff00000
 8013efc:	7ff00000 	.word	0x7ff00000
 8013f00:	7fe00000 	.word	0x7fe00000
 8013f04:	7c9fffff 	.word	0x7c9fffff
 8013f08:	3fe00000 	.word	0x3fe00000
 8013f0c:	bff00000 	.word	0xbff00000
 8013f10:	7fefffff 	.word	0x7fefffff

08013f14 <_strtod_r>:
 8013f14:	4b01      	ldr	r3, [pc, #4]	; (8013f1c <_strtod_r+0x8>)
 8013f16:	f7ff b9f3 	b.w	8013300 <_strtod_l>
 8013f1a:	bf00      	nop
 8013f1c:	20000204 	.word	0x20000204

08013f20 <_strtol_l.isra.0>:
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f26:	d001      	beq.n	8013f2c <_strtol_l.isra.0+0xc>
 8013f28:	2b24      	cmp	r3, #36	; 0x24
 8013f2a:	d906      	bls.n	8013f3a <_strtol_l.isra.0+0x1a>
 8013f2c:	f7fe f9ca 	bl	80122c4 <__errno>
 8013f30:	2316      	movs	r3, #22
 8013f32:	6003      	str	r3, [r0, #0]
 8013f34:	2000      	movs	r0, #0
 8013f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3a:	4f3a      	ldr	r7, [pc, #232]	; (8014024 <_strtol_l.isra.0+0x104>)
 8013f3c:	468e      	mov	lr, r1
 8013f3e:	4676      	mov	r6, lr
 8013f40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013f44:	5de5      	ldrb	r5, [r4, r7]
 8013f46:	f015 0508 	ands.w	r5, r5, #8
 8013f4a:	d1f8      	bne.n	8013f3e <_strtol_l.isra.0+0x1e>
 8013f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8013f4e:	d134      	bne.n	8013fba <_strtol_l.isra.0+0x9a>
 8013f50:	f89e 4000 	ldrb.w	r4, [lr]
 8013f54:	f04f 0801 	mov.w	r8, #1
 8013f58:	f106 0e02 	add.w	lr, r6, #2
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d05c      	beq.n	801401a <_strtol_l.isra.0+0xfa>
 8013f60:	2b10      	cmp	r3, #16
 8013f62:	d10c      	bne.n	8013f7e <_strtol_l.isra.0+0x5e>
 8013f64:	2c30      	cmp	r4, #48	; 0x30
 8013f66:	d10a      	bne.n	8013f7e <_strtol_l.isra.0+0x5e>
 8013f68:	f89e 4000 	ldrb.w	r4, [lr]
 8013f6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013f70:	2c58      	cmp	r4, #88	; 0x58
 8013f72:	d14d      	bne.n	8014010 <_strtol_l.isra.0+0xf0>
 8013f74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013f78:	2310      	movs	r3, #16
 8013f7a:	f10e 0e02 	add.w	lr, lr, #2
 8013f7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013f82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013f86:	2600      	movs	r6, #0
 8013f88:	fbbc f9f3 	udiv	r9, ip, r3
 8013f8c:	4635      	mov	r5, r6
 8013f8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013f92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013f96:	2f09      	cmp	r7, #9
 8013f98:	d818      	bhi.n	8013fcc <_strtol_l.isra.0+0xac>
 8013f9a:	463c      	mov	r4, r7
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	dd24      	ble.n	8013fea <_strtol_l.isra.0+0xca>
 8013fa0:	2e00      	cmp	r6, #0
 8013fa2:	db1f      	blt.n	8013fe4 <_strtol_l.isra.0+0xc4>
 8013fa4:	45a9      	cmp	r9, r5
 8013fa6:	d31d      	bcc.n	8013fe4 <_strtol_l.isra.0+0xc4>
 8013fa8:	d101      	bne.n	8013fae <_strtol_l.isra.0+0x8e>
 8013faa:	45a2      	cmp	sl, r4
 8013fac:	db1a      	blt.n	8013fe4 <_strtol_l.isra.0+0xc4>
 8013fae:	fb05 4503 	mla	r5, r5, r3, r4
 8013fb2:	2601      	movs	r6, #1
 8013fb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013fb8:	e7eb      	b.n	8013f92 <_strtol_l.isra.0+0x72>
 8013fba:	2c2b      	cmp	r4, #43	; 0x2b
 8013fbc:	bf08      	it	eq
 8013fbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013fc2:	46a8      	mov	r8, r5
 8013fc4:	bf08      	it	eq
 8013fc6:	f106 0e02 	addeq.w	lr, r6, #2
 8013fca:	e7c7      	b.n	8013f5c <_strtol_l.isra.0+0x3c>
 8013fcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013fd0:	2f19      	cmp	r7, #25
 8013fd2:	d801      	bhi.n	8013fd8 <_strtol_l.isra.0+0xb8>
 8013fd4:	3c37      	subs	r4, #55	; 0x37
 8013fd6:	e7e1      	b.n	8013f9c <_strtol_l.isra.0+0x7c>
 8013fd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013fdc:	2f19      	cmp	r7, #25
 8013fde:	d804      	bhi.n	8013fea <_strtol_l.isra.0+0xca>
 8013fe0:	3c57      	subs	r4, #87	; 0x57
 8013fe2:	e7db      	b.n	8013f9c <_strtol_l.isra.0+0x7c>
 8013fe4:	f04f 36ff 	mov.w	r6, #4294967295
 8013fe8:	e7e4      	b.n	8013fb4 <_strtol_l.isra.0+0x94>
 8013fea:	2e00      	cmp	r6, #0
 8013fec:	da05      	bge.n	8013ffa <_strtol_l.isra.0+0xda>
 8013fee:	2322      	movs	r3, #34	; 0x22
 8013ff0:	6003      	str	r3, [r0, #0]
 8013ff2:	4665      	mov	r5, ip
 8013ff4:	b942      	cbnz	r2, 8014008 <_strtol_l.isra.0+0xe8>
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	e79d      	b.n	8013f36 <_strtol_l.isra.0+0x16>
 8013ffa:	f1b8 0f00 	cmp.w	r8, #0
 8013ffe:	d000      	beq.n	8014002 <_strtol_l.isra.0+0xe2>
 8014000:	426d      	negs	r5, r5
 8014002:	2a00      	cmp	r2, #0
 8014004:	d0f7      	beq.n	8013ff6 <_strtol_l.isra.0+0xd6>
 8014006:	b10e      	cbz	r6, 801400c <_strtol_l.isra.0+0xec>
 8014008:	f10e 31ff 	add.w	r1, lr, #4294967295
 801400c:	6011      	str	r1, [r2, #0]
 801400e:	e7f2      	b.n	8013ff6 <_strtol_l.isra.0+0xd6>
 8014010:	2430      	movs	r4, #48	; 0x30
 8014012:	2b00      	cmp	r3, #0
 8014014:	d1b3      	bne.n	8013f7e <_strtol_l.isra.0+0x5e>
 8014016:	2308      	movs	r3, #8
 8014018:	e7b1      	b.n	8013f7e <_strtol_l.isra.0+0x5e>
 801401a:	2c30      	cmp	r4, #48	; 0x30
 801401c:	d0a4      	beq.n	8013f68 <_strtol_l.isra.0+0x48>
 801401e:	230a      	movs	r3, #10
 8014020:	e7ad      	b.n	8013f7e <_strtol_l.isra.0+0x5e>
 8014022:	bf00      	nop
 8014024:	08016d79 	.word	0x08016d79

08014028 <_strtol_r>:
 8014028:	f7ff bf7a 	b.w	8013f20 <_strtol_l.isra.0>

0801402c <quorem>:
 801402c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014030:	6903      	ldr	r3, [r0, #16]
 8014032:	690c      	ldr	r4, [r1, #16]
 8014034:	42a3      	cmp	r3, r4
 8014036:	4607      	mov	r7, r0
 8014038:	f2c0 8081 	blt.w	801413e <quorem+0x112>
 801403c:	3c01      	subs	r4, #1
 801403e:	f101 0814 	add.w	r8, r1, #20
 8014042:	f100 0514 	add.w	r5, r0, #20
 8014046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801404a:	9301      	str	r3, [sp, #4]
 801404c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014054:	3301      	adds	r3, #1
 8014056:	429a      	cmp	r2, r3
 8014058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801405c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014060:	fbb2 f6f3 	udiv	r6, r2, r3
 8014064:	d331      	bcc.n	80140ca <quorem+0x9e>
 8014066:	f04f 0e00 	mov.w	lr, #0
 801406a:	4640      	mov	r0, r8
 801406c:	46ac      	mov	ip, r5
 801406e:	46f2      	mov	sl, lr
 8014070:	f850 2b04 	ldr.w	r2, [r0], #4
 8014074:	b293      	uxth	r3, r2
 8014076:	fb06 e303 	mla	r3, r6, r3, lr
 801407a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801407e:	b29b      	uxth	r3, r3
 8014080:	ebaa 0303 	sub.w	r3, sl, r3
 8014084:	0c12      	lsrs	r2, r2, #16
 8014086:	f8dc a000 	ldr.w	sl, [ip]
 801408a:	fb06 e202 	mla	r2, r6, r2, lr
 801408e:	fa13 f38a 	uxtah	r3, r3, sl
 8014092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014096:	fa1f fa82 	uxth.w	sl, r2
 801409a:	f8dc 2000 	ldr.w	r2, [ip]
 801409e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80140a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140ac:	4581      	cmp	r9, r0
 80140ae:	f84c 3b04 	str.w	r3, [ip], #4
 80140b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80140b6:	d2db      	bcs.n	8014070 <quorem+0x44>
 80140b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80140bc:	b92b      	cbnz	r3, 80140ca <quorem+0x9e>
 80140be:	9b01      	ldr	r3, [sp, #4]
 80140c0:	3b04      	subs	r3, #4
 80140c2:	429d      	cmp	r5, r3
 80140c4:	461a      	mov	r2, r3
 80140c6:	d32e      	bcc.n	8014126 <quorem+0xfa>
 80140c8:	613c      	str	r4, [r7, #16]
 80140ca:	4638      	mov	r0, r7
 80140cc:	f001 fc82 	bl	80159d4 <__mcmp>
 80140d0:	2800      	cmp	r0, #0
 80140d2:	db24      	blt.n	801411e <quorem+0xf2>
 80140d4:	3601      	adds	r6, #1
 80140d6:	4628      	mov	r0, r5
 80140d8:	f04f 0c00 	mov.w	ip, #0
 80140dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80140e0:	f8d0 e000 	ldr.w	lr, [r0]
 80140e4:	b293      	uxth	r3, r2
 80140e6:	ebac 0303 	sub.w	r3, ip, r3
 80140ea:	0c12      	lsrs	r2, r2, #16
 80140ec:	fa13 f38e 	uxtah	r3, r3, lr
 80140f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80140f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80140f8:	b29b      	uxth	r3, r3
 80140fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140fe:	45c1      	cmp	r9, r8
 8014100:	f840 3b04 	str.w	r3, [r0], #4
 8014104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014108:	d2e8      	bcs.n	80140dc <quorem+0xb0>
 801410a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801410e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014112:	b922      	cbnz	r2, 801411e <quorem+0xf2>
 8014114:	3b04      	subs	r3, #4
 8014116:	429d      	cmp	r5, r3
 8014118:	461a      	mov	r2, r3
 801411a:	d30a      	bcc.n	8014132 <quorem+0x106>
 801411c:	613c      	str	r4, [r7, #16]
 801411e:	4630      	mov	r0, r6
 8014120:	b003      	add	sp, #12
 8014122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014126:	6812      	ldr	r2, [r2, #0]
 8014128:	3b04      	subs	r3, #4
 801412a:	2a00      	cmp	r2, #0
 801412c:	d1cc      	bne.n	80140c8 <quorem+0x9c>
 801412e:	3c01      	subs	r4, #1
 8014130:	e7c7      	b.n	80140c2 <quorem+0x96>
 8014132:	6812      	ldr	r2, [r2, #0]
 8014134:	3b04      	subs	r3, #4
 8014136:	2a00      	cmp	r2, #0
 8014138:	d1f0      	bne.n	801411c <quorem+0xf0>
 801413a:	3c01      	subs	r4, #1
 801413c:	e7eb      	b.n	8014116 <quorem+0xea>
 801413e:	2000      	movs	r0, #0
 8014140:	e7ee      	b.n	8014120 <quorem+0xf4>
 8014142:	0000      	movs	r0, r0
 8014144:	0000      	movs	r0, r0
	...

08014148 <_dtoa_r>:
 8014148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801414c:	ed2d 8b02 	vpush	{d8}
 8014150:	ec57 6b10 	vmov	r6, r7, d0
 8014154:	b095      	sub	sp, #84	; 0x54
 8014156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801415c:	9105      	str	r1, [sp, #20]
 801415e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014162:	4604      	mov	r4, r0
 8014164:	9209      	str	r2, [sp, #36]	; 0x24
 8014166:	930f      	str	r3, [sp, #60]	; 0x3c
 8014168:	b975      	cbnz	r5, 8014188 <_dtoa_r+0x40>
 801416a:	2010      	movs	r0, #16
 801416c:	f7fe f8d4 	bl	8012318 <malloc>
 8014170:	4602      	mov	r2, r0
 8014172:	6260      	str	r0, [r4, #36]	; 0x24
 8014174:	b920      	cbnz	r0, 8014180 <_dtoa_r+0x38>
 8014176:	4bb2      	ldr	r3, [pc, #712]	; (8014440 <_dtoa_r+0x2f8>)
 8014178:	21ea      	movs	r1, #234	; 0xea
 801417a:	48b2      	ldr	r0, [pc, #712]	; (8014444 <_dtoa_r+0x2fc>)
 801417c:	f001 ffb0 	bl	80160e0 <__assert_func>
 8014180:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014184:	6005      	str	r5, [r0, #0]
 8014186:	60c5      	str	r5, [r0, #12]
 8014188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801418a:	6819      	ldr	r1, [r3, #0]
 801418c:	b151      	cbz	r1, 80141a4 <_dtoa_r+0x5c>
 801418e:	685a      	ldr	r2, [r3, #4]
 8014190:	604a      	str	r2, [r1, #4]
 8014192:	2301      	movs	r3, #1
 8014194:	4093      	lsls	r3, r2
 8014196:	608b      	str	r3, [r1, #8]
 8014198:	4620      	mov	r0, r4
 801419a:	f001 f993 	bl	80154c4 <_Bfree>
 801419e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141a0:	2200      	movs	r2, #0
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	1e3b      	subs	r3, r7, #0
 80141a6:	bfb9      	ittee	lt
 80141a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80141ac:	9303      	strlt	r3, [sp, #12]
 80141ae:	2300      	movge	r3, #0
 80141b0:	f8c8 3000 	strge.w	r3, [r8]
 80141b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80141b8:	4ba3      	ldr	r3, [pc, #652]	; (8014448 <_dtoa_r+0x300>)
 80141ba:	bfbc      	itt	lt
 80141bc:	2201      	movlt	r2, #1
 80141be:	f8c8 2000 	strlt.w	r2, [r8]
 80141c2:	ea33 0309 	bics.w	r3, r3, r9
 80141c6:	d11b      	bne.n	8014200 <_dtoa_r+0xb8>
 80141c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80141ce:	6013      	str	r3, [r2, #0]
 80141d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80141d4:	4333      	orrs	r3, r6
 80141d6:	f000 857a 	beq.w	8014cce <_dtoa_r+0xb86>
 80141da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80141dc:	b963      	cbnz	r3, 80141f8 <_dtoa_r+0xb0>
 80141de:	4b9b      	ldr	r3, [pc, #620]	; (801444c <_dtoa_r+0x304>)
 80141e0:	e024      	b.n	801422c <_dtoa_r+0xe4>
 80141e2:	4b9b      	ldr	r3, [pc, #620]	; (8014450 <_dtoa_r+0x308>)
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	3308      	adds	r3, #8
 80141e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80141ea:	6013      	str	r3, [r2, #0]
 80141ec:	9800      	ldr	r0, [sp, #0]
 80141ee:	b015      	add	sp, #84	; 0x54
 80141f0:	ecbd 8b02 	vpop	{d8}
 80141f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f8:	4b94      	ldr	r3, [pc, #592]	; (801444c <_dtoa_r+0x304>)
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	3303      	adds	r3, #3
 80141fe:	e7f3      	b.n	80141e8 <_dtoa_r+0xa0>
 8014200:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014204:	2200      	movs	r2, #0
 8014206:	ec51 0b17 	vmov	r0, r1, d7
 801420a:	2300      	movs	r3, #0
 801420c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014210:	f7ec fc82 	bl	8000b18 <__aeabi_dcmpeq>
 8014214:	4680      	mov	r8, r0
 8014216:	b158      	cbz	r0, 8014230 <_dtoa_r+0xe8>
 8014218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801421a:	2301      	movs	r3, #1
 801421c:	6013      	str	r3, [r2, #0]
 801421e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014220:	2b00      	cmp	r3, #0
 8014222:	f000 8551 	beq.w	8014cc8 <_dtoa_r+0xb80>
 8014226:	488b      	ldr	r0, [pc, #556]	; (8014454 <_dtoa_r+0x30c>)
 8014228:	6018      	str	r0, [r3, #0]
 801422a:	1e43      	subs	r3, r0, #1
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	e7dd      	b.n	80141ec <_dtoa_r+0xa4>
 8014230:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014234:	aa12      	add	r2, sp, #72	; 0x48
 8014236:	a913      	add	r1, sp, #76	; 0x4c
 8014238:	4620      	mov	r0, r4
 801423a:	f001 fceb 	bl	8015c14 <__d2b>
 801423e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014242:	4683      	mov	fp, r0
 8014244:	2d00      	cmp	r5, #0
 8014246:	d07c      	beq.n	8014342 <_dtoa_r+0x1fa>
 8014248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801424a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801424e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014252:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014256:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801425a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801425e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014262:	4b7d      	ldr	r3, [pc, #500]	; (8014458 <_dtoa_r+0x310>)
 8014264:	2200      	movs	r2, #0
 8014266:	4630      	mov	r0, r6
 8014268:	4639      	mov	r1, r7
 801426a:	f7ec f835 	bl	80002d8 <__aeabi_dsub>
 801426e:	a36e      	add	r3, pc, #440	; (adr r3, 8014428 <_dtoa_r+0x2e0>)
 8014270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014274:	f7ec f9e8 	bl	8000648 <__aeabi_dmul>
 8014278:	a36d      	add	r3, pc, #436	; (adr r3, 8014430 <_dtoa_r+0x2e8>)
 801427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427e:	f7ec f82d 	bl	80002dc <__adddf3>
 8014282:	4606      	mov	r6, r0
 8014284:	4628      	mov	r0, r5
 8014286:	460f      	mov	r7, r1
 8014288:	f7ec f974 	bl	8000574 <__aeabi_i2d>
 801428c:	a36a      	add	r3, pc, #424	; (adr r3, 8014438 <_dtoa_r+0x2f0>)
 801428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014292:	f7ec f9d9 	bl	8000648 <__aeabi_dmul>
 8014296:	4602      	mov	r2, r0
 8014298:	460b      	mov	r3, r1
 801429a:	4630      	mov	r0, r6
 801429c:	4639      	mov	r1, r7
 801429e:	f7ec f81d 	bl	80002dc <__adddf3>
 80142a2:	4606      	mov	r6, r0
 80142a4:	460f      	mov	r7, r1
 80142a6:	f7ec fc7f 	bl	8000ba8 <__aeabi_d2iz>
 80142aa:	2200      	movs	r2, #0
 80142ac:	4682      	mov	sl, r0
 80142ae:	2300      	movs	r3, #0
 80142b0:	4630      	mov	r0, r6
 80142b2:	4639      	mov	r1, r7
 80142b4:	f7ec fc3a 	bl	8000b2c <__aeabi_dcmplt>
 80142b8:	b148      	cbz	r0, 80142ce <_dtoa_r+0x186>
 80142ba:	4650      	mov	r0, sl
 80142bc:	f7ec f95a 	bl	8000574 <__aeabi_i2d>
 80142c0:	4632      	mov	r2, r6
 80142c2:	463b      	mov	r3, r7
 80142c4:	f7ec fc28 	bl	8000b18 <__aeabi_dcmpeq>
 80142c8:	b908      	cbnz	r0, 80142ce <_dtoa_r+0x186>
 80142ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142ce:	f1ba 0f16 	cmp.w	sl, #22
 80142d2:	d854      	bhi.n	801437e <_dtoa_r+0x236>
 80142d4:	4b61      	ldr	r3, [pc, #388]	; (801445c <_dtoa_r+0x314>)
 80142d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142e2:	f7ec fc23 	bl	8000b2c <__aeabi_dcmplt>
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d04b      	beq.n	8014382 <_dtoa_r+0x23a>
 80142ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80142ee:	2300      	movs	r3, #0
 80142f0:	930e      	str	r3, [sp, #56]	; 0x38
 80142f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142f4:	1b5d      	subs	r5, r3, r5
 80142f6:	1e6b      	subs	r3, r5, #1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	bf43      	ittte	mi
 80142fc:	2300      	movmi	r3, #0
 80142fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8014302:	9304      	strmi	r3, [sp, #16]
 8014304:	f04f 0800 	movpl.w	r8, #0
 8014308:	f1ba 0f00 	cmp.w	sl, #0
 801430c:	db3b      	blt.n	8014386 <_dtoa_r+0x23e>
 801430e:	9b04      	ldr	r3, [sp, #16]
 8014310:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014314:	4453      	add	r3, sl
 8014316:	9304      	str	r3, [sp, #16]
 8014318:	2300      	movs	r3, #0
 801431a:	9306      	str	r3, [sp, #24]
 801431c:	9b05      	ldr	r3, [sp, #20]
 801431e:	2b09      	cmp	r3, #9
 8014320:	d869      	bhi.n	80143f6 <_dtoa_r+0x2ae>
 8014322:	2b05      	cmp	r3, #5
 8014324:	bfc4      	itt	gt
 8014326:	3b04      	subgt	r3, #4
 8014328:	9305      	strgt	r3, [sp, #20]
 801432a:	9b05      	ldr	r3, [sp, #20]
 801432c:	f1a3 0302 	sub.w	r3, r3, #2
 8014330:	bfcc      	ite	gt
 8014332:	2500      	movgt	r5, #0
 8014334:	2501      	movle	r5, #1
 8014336:	2b03      	cmp	r3, #3
 8014338:	d869      	bhi.n	801440e <_dtoa_r+0x2c6>
 801433a:	e8df f003 	tbb	[pc, r3]
 801433e:	4e2c      	.short	0x4e2c
 8014340:	5a4c      	.short	0x5a4c
 8014342:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014346:	441d      	add	r5, r3
 8014348:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801434c:	2b20      	cmp	r3, #32
 801434e:	bfc1      	itttt	gt
 8014350:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014354:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014358:	fa09 f303 	lslgt.w	r3, r9, r3
 801435c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014360:	bfda      	itte	le
 8014362:	f1c3 0320 	rsble	r3, r3, #32
 8014366:	fa06 f003 	lslle.w	r0, r6, r3
 801436a:	4318      	orrgt	r0, r3
 801436c:	f7ec f8f2 	bl	8000554 <__aeabi_ui2d>
 8014370:	2301      	movs	r3, #1
 8014372:	4606      	mov	r6, r0
 8014374:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014378:	3d01      	subs	r5, #1
 801437a:	9310      	str	r3, [sp, #64]	; 0x40
 801437c:	e771      	b.n	8014262 <_dtoa_r+0x11a>
 801437e:	2301      	movs	r3, #1
 8014380:	e7b6      	b.n	80142f0 <_dtoa_r+0x1a8>
 8014382:	900e      	str	r0, [sp, #56]	; 0x38
 8014384:	e7b5      	b.n	80142f2 <_dtoa_r+0x1aa>
 8014386:	f1ca 0300 	rsb	r3, sl, #0
 801438a:	9306      	str	r3, [sp, #24]
 801438c:	2300      	movs	r3, #0
 801438e:	eba8 080a 	sub.w	r8, r8, sl
 8014392:	930d      	str	r3, [sp, #52]	; 0x34
 8014394:	e7c2      	b.n	801431c <_dtoa_r+0x1d4>
 8014396:	2300      	movs	r3, #0
 8014398:	9308      	str	r3, [sp, #32]
 801439a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801439c:	2b00      	cmp	r3, #0
 801439e:	dc39      	bgt.n	8014414 <_dtoa_r+0x2cc>
 80143a0:	f04f 0901 	mov.w	r9, #1
 80143a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80143a8:	464b      	mov	r3, r9
 80143aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80143ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80143b0:	2200      	movs	r2, #0
 80143b2:	6042      	str	r2, [r0, #4]
 80143b4:	2204      	movs	r2, #4
 80143b6:	f102 0614 	add.w	r6, r2, #20
 80143ba:	429e      	cmp	r6, r3
 80143bc:	6841      	ldr	r1, [r0, #4]
 80143be:	d92f      	bls.n	8014420 <_dtoa_r+0x2d8>
 80143c0:	4620      	mov	r0, r4
 80143c2:	f001 f83f 	bl	8015444 <_Balloc>
 80143c6:	9000      	str	r0, [sp, #0]
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d14b      	bne.n	8014464 <_dtoa_r+0x31c>
 80143cc:	4b24      	ldr	r3, [pc, #144]	; (8014460 <_dtoa_r+0x318>)
 80143ce:	4602      	mov	r2, r0
 80143d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80143d4:	e6d1      	b.n	801417a <_dtoa_r+0x32>
 80143d6:	2301      	movs	r3, #1
 80143d8:	e7de      	b.n	8014398 <_dtoa_r+0x250>
 80143da:	2300      	movs	r3, #0
 80143dc:	9308      	str	r3, [sp, #32]
 80143de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143e0:	eb0a 0903 	add.w	r9, sl, r3
 80143e4:	f109 0301 	add.w	r3, r9, #1
 80143e8:	2b01      	cmp	r3, #1
 80143ea:	9301      	str	r3, [sp, #4]
 80143ec:	bfb8      	it	lt
 80143ee:	2301      	movlt	r3, #1
 80143f0:	e7dd      	b.n	80143ae <_dtoa_r+0x266>
 80143f2:	2301      	movs	r3, #1
 80143f4:	e7f2      	b.n	80143dc <_dtoa_r+0x294>
 80143f6:	2501      	movs	r5, #1
 80143f8:	2300      	movs	r3, #0
 80143fa:	9305      	str	r3, [sp, #20]
 80143fc:	9508      	str	r5, [sp, #32]
 80143fe:	f04f 39ff 	mov.w	r9, #4294967295
 8014402:	2200      	movs	r2, #0
 8014404:	f8cd 9004 	str.w	r9, [sp, #4]
 8014408:	2312      	movs	r3, #18
 801440a:	9209      	str	r2, [sp, #36]	; 0x24
 801440c:	e7cf      	b.n	80143ae <_dtoa_r+0x266>
 801440e:	2301      	movs	r3, #1
 8014410:	9308      	str	r3, [sp, #32]
 8014412:	e7f4      	b.n	80143fe <_dtoa_r+0x2b6>
 8014414:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014418:	f8cd 9004 	str.w	r9, [sp, #4]
 801441c:	464b      	mov	r3, r9
 801441e:	e7c6      	b.n	80143ae <_dtoa_r+0x266>
 8014420:	3101      	adds	r1, #1
 8014422:	6041      	str	r1, [r0, #4]
 8014424:	0052      	lsls	r2, r2, #1
 8014426:	e7c6      	b.n	80143b6 <_dtoa_r+0x26e>
 8014428:	636f4361 	.word	0x636f4361
 801442c:	3fd287a7 	.word	0x3fd287a7
 8014430:	8b60c8b3 	.word	0x8b60c8b3
 8014434:	3fc68a28 	.word	0x3fc68a28
 8014438:	509f79fb 	.word	0x509f79fb
 801443c:	3fd34413 	.word	0x3fd34413
 8014440:	08016e86 	.word	0x08016e86
 8014444:	08016e9d 	.word	0x08016e9d
 8014448:	7ff00000 	.word	0x7ff00000
 801444c:	08016e82 	.word	0x08016e82
 8014450:	08016e79 	.word	0x08016e79
 8014454:	08016cfd 	.word	0x08016cfd
 8014458:	3ff80000 	.word	0x3ff80000
 801445c:	08017018 	.word	0x08017018
 8014460:	08016efc 	.word	0x08016efc
 8014464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014466:	9a00      	ldr	r2, [sp, #0]
 8014468:	601a      	str	r2, [r3, #0]
 801446a:	9b01      	ldr	r3, [sp, #4]
 801446c:	2b0e      	cmp	r3, #14
 801446e:	f200 80ad 	bhi.w	80145cc <_dtoa_r+0x484>
 8014472:	2d00      	cmp	r5, #0
 8014474:	f000 80aa 	beq.w	80145cc <_dtoa_r+0x484>
 8014478:	f1ba 0f00 	cmp.w	sl, #0
 801447c:	dd36      	ble.n	80144ec <_dtoa_r+0x3a4>
 801447e:	4ac3      	ldr	r2, [pc, #780]	; (801478c <_dtoa_r+0x644>)
 8014480:	f00a 030f 	and.w	r3, sl, #15
 8014484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014488:	ed93 7b00 	vldr	d7, [r3]
 801448c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014490:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014494:	eeb0 8a47 	vmov.f32	s16, s14
 8014498:	eef0 8a67 	vmov.f32	s17, s15
 801449c:	d016      	beq.n	80144cc <_dtoa_r+0x384>
 801449e:	4bbc      	ldr	r3, [pc, #752]	; (8014790 <_dtoa_r+0x648>)
 80144a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80144a8:	f7ec f9f8 	bl	800089c <__aeabi_ddiv>
 80144ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144b0:	f007 070f 	and.w	r7, r7, #15
 80144b4:	2503      	movs	r5, #3
 80144b6:	4eb6      	ldr	r6, [pc, #728]	; (8014790 <_dtoa_r+0x648>)
 80144b8:	b957      	cbnz	r7, 80144d0 <_dtoa_r+0x388>
 80144ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144be:	ec53 2b18 	vmov	r2, r3, d8
 80144c2:	f7ec f9eb 	bl	800089c <__aeabi_ddiv>
 80144c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144ca:	e029      	b.n	8014520 <_dtoa_r+0x3d8>
 80144cc:	2502      	movs	r5, #2
 80144ce:	e7f2      	b.n	80144b6 <_dtoa_r+0x36e>
 80144d0:	07f9      	lsls	r1, r7, #31
 80144d2:	d508      	bpl.n	80144e6 <_dtoa_r+0x39e>
 80144d4:	ec51 0b18 	vmov	r0, r1, d8
 80144d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80144dc:	f7ec f8b4 	bl	8000648 <__aeabi_dmul>
 80144e0:	ec41 0b18 	vmov	d8, r0, r1
 80144e4:	3501      	adds	r5, #1
 80144e6:	107f      	asrs	r7, r7, #1
 80144e8:	3608      	adds	r6, #8
 80144ea:	e7e5      	b.n	80144b8 <_dtoa_r+0x370>
 80144ec:	f000 80a6 	beq.w	801463c <_dtoa_r+0x4f4>
 80144f0:	f1ca 0600 	rsb	r6, sl, #0
 80144f4:	4ba5      	ldr	r3, [pc, #660]	; (801478c <_dtoa_r+0x644>)
 80144f6:	4fa6      	ldr	r7, [pc, #664]	; (8014790 <_dtoa_r+0x648>)
 80144f8:	f006 020f 	and.w	r2, r6, #15
 80144fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014508:	f7ec f89e 	bl	8000648 <__aeabi_dmul>
 801450c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014510:	1136      	asrs	r6, r6, #4
 8014512:	2300      	movs	r3, #0
 8014514:	2502      	movs	r5, #2
 8014516:	2e00      	cmp	r6, #0
 8014518:	f040 8085 	bne.w	8014626 <_dtoa_r+0x4de>
 801451c:	2b00      	cmp	r3, #0
 801451e:	d1d2      	bne.n	80144c6 <_dtoa_r+0x37e>
 8014520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014522:	2b00      	cmp	r3, #0
 8014524:	f000 808c 	beq.w	8014640 <_dtoa_r+0x4f8>
 8014528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801452c:	4b99      	ldr	r3, [pc, #612]	; (8014794 <_dtoa_r+0x64c>)
 801452e:	2200      	movs	r2, #0
 8014530:	4630      	mov	r0, r6
 8014532:	4639      	mov	r1, r7
 8014534:	f7ec fafa 	bl	8000b2c <__aeabi_dcmplt>
 8014538:	2800      	cmp	r0, #0
 801453a:	f000 8081 	beq.w	8014640 <_dtoa_r+0x4f8>
 801453e:	9b01      	ldr	r3, [sp, #4]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d07d      	beq.n	8014640 <_dtoa_r+0x4f8>
 8014544:	f1b9 0f00 	cmp.w	r9, #0
 8014548:	dd3c      	ble.n	80145c4 <_dtoa_r+0x47c>
 801454a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801454e:	9307      	str	r3, [sp, #28]
 8014550:	2200      	movs	r2, #0
 8014552:	4b91      	ldr	r3, [pc, #580]	; (8014798 <_dtoa_r+0x650>)
 8014554:	4630      	mov	r0, r6
 8014556:	4639      	mov	r1, r7
 8014558:	f7ec f876 	bl	8000648 <__aeabi_dmul>
 801455c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014560:	3501      	adds	r5, #1
 8014562:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014566:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801456a:	4628      	mov	r0, r5
 801456c:	f7ec f802 	bl	8000574 <__aeabi_i2d>
 8014570:	4632      	mov	r2, r6
 8014572:	463b      	mov	r3, r7
 8014574:	f7ec f868 	bl	8000648 <__aeabi_dmul>
 8014578:	4b88      	ldr	r3, [pc, #544]	; (801479c <_dtoa_r+0x654>)
 801457a:	2200      	movs	r2, #0
 801457c:	f7eb feae 	bl	80002dc <__adddf3>
 8014580:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014588:	9303      	str	r3, [sp, #12]
 801458a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801458c:	2b00      	cmp	r3, #0
 801458e:	d15c      	bne.n	801464a <_dtoa_r+0x502>
 8014590:	4b83      	ldr	r3, [pc, #524]	; (80147a0 <_dtoa_r+0x658>)
 8014592:	2200      	movs	r2, #0
 8014594:	4630      	mov	r0, r6
 8014596:	4639      	mov	r1, r7
 8014598:	f7eb fe9e 	bl	80002d8 <__aeabi_dsub>
 801459c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145a0:	4606      	mov	r6, r0
 80145a2:	460f      	mov	r7, r1
 80145a4:	f7ec fae0 	bl	8000b68 <__aeabi_dcmpgt>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	f040 8296 	bne.w	8014ada <_dtoa_r+0x992>
 80145ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80145b2:	4630      	mov	r0, r6
 80145b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145b8:	4639      	mov	r1, r7
 80145ba:	f7ec fab7 	bl	8000b2c <__aeabi_dcmplt>
 80145be:	2800      	cmp	r0, #0
 80145c0:	f040 8288 	bne.w	8014ad4 <_dtoa_r+0x98c>
 80145c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80145c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80145cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f2c0 8158 	blt.w	8014884 <_dtoa_r+0x73c>
 80145d4:	f1ba 0f0e 	cmp.w	sl, #14
 80145d8:	f300 8154 	bgt.w	8014884 <_dtoa_r+0x73c>
 80145dc:	4b6b      	ldr	r3, [pc, #428]	; (801478c <_dtoa_r+0x644>)
 80145de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80145e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80145e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f280 80e3 	bge.w	80147b4 <_dtoa_r+0x66c>
 80145ee:	9b01      	ldr	r3, [sp, #4]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f300 80df 	bgt.w	80147b4 <_dtoa_r+0x66c>
 80145f6:	f040 826d 	bne.w	8014ad4 <_dtoa_r+0x98c>
 80145fa:	4b69      	ldr	r3, [pc, #420]	; (80147a0 <_dtoa_r+0x658>)
 80145fc:	2200      	movs	r2, #0
 80145fe:	4640      	mov	r0, r8
 8014600:	4649      	mov	r1, r9
 8014602:	f7ec f821 	bl	8000648 <__aeabi_dmul>
 8014606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801460a:	f7ec faa3 	bl	8000b54 <__aeabi_dcmpge>
 801460e:	9e01      	ldr	r6, [sp, #4]
 8014610:	4637      	mov	r7, r6
 8014612:	2800      	cmp	r0, #0
 8014614:	f040 8243 	bne.w	8014a9e <_dtoa_r+0x956>
 8014618:	9d00      	ldr	r5, [sp, #0]
 801461a:	2331      	movs	r3, #49	; 0x31
 801461c:	f805 3b01 	strb.w	r3, [r5], #1
 8014620:	f10a 0a01 	add.w	sl, sl, #1
 8014624:	e23f      	b.n	8014aa6 <_dtoa_r+0x95e>
 8014626:	07f2      	lsls	r2, r6, #31
 8014628:	d505      	bpl.n	8014636 <_dtoa_r+0x4ee>
 801462a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801462e:	f7ec f80b 	bl	8000648 <__aeabi_dmul>
 8014632:	3501      	adds	r5, #1
 8014634:	2301      	movs	r3, #1
 8014636:	1076      	asrs	r6, r6, #1
 8014638:	3708      	adds	r7, #8
 801463a:	e76c      	b.n	8014516 <_dtoa_r+0x3ce>
 801463c:	2502      	movs	r5, #2
 801463e:	e76f      	b.n	8014520 <_dtoa_r+0x3d8>
 8014640:	9b01      	ldr	r3, [sp, #4]
 8014642:	f8cd a01c 	str.w	sl, [sp, #28]
 8014646:	930c      	str	r3, [sp, #48]	; 0x30
 8014648:	e78d      	b.n	8014566 <_dtoa_r+0x41e>
 801464a:	9900      	ldr	r1, [sp, #0]
 801464c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801464e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014650:	4b4e      	ldr	r3, [pc, #312]	; (801478c <_dtoa_r+0x644>)
 8014652:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014656:	4401      	add	r1, r0
 8014658:	9102      	str	r1, [sp, #8]
 801465a:	9908      	ldr	r1, [sp, #32]
 801465c:	eeb0 8a47 	vmov.f32	s16, s14
 8014660:	eef0 8a67 	vmov.f32	s17, s15
 8014664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801466c:	2900      	cmp	r1, #0
 801466e:	d045      	beq.n	80146fc <_dtoa_r+0x5b4>
 8014670:	494c      	ldr	r1, [pc, #304]	; (80147a4 <_dtoa_r+0x65c>)
 8014672:	2000      	movs	r0, #0
 8014674:	f7ec f912 	bl	800089c <__aeabi_ddiv>
 8014678:	ec53 2b18 	vmov	r2, r3, d8
 801467c:	f7eb fe2c 	bl	80002d8 <__aeabi_dsub>
 8014680:	9d00      	ldr	r5, [sp, #0]
 8014682:	ec41 0b18 	vmov	d8, r0, r1
 8014686:	4639      	mov	r1, r7
 8014688:	4630      	mov	r0, r6
 801468a:	f7ec fa8d 	bl	8000ba8 <__aeabi_d2iz>
 801468e:	900c      	str	r0, [sp, #48]	; 0x30
 8014690:	f7eb ff70 	bl	8000574 <__aeabi_i2d>
 8014694:	4602      	mov	r2, r0
 8014696:	460b      	mov	r3, r1
 8014698:	4630      	mov	r0, r6
 801469a:	4639      	mov	r1, r7
 801469c:	f7eb fe1c 	bl	80002d8 <__aeabi_dsub>
 80146a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146a2:	3330      	adds	r3, #48	; 0x30
 80146a4:	f805 3b01 	strb.w	r3, [r5], #1
 80146a8:	ec53 2b18 	vmov	r2, r3, d8
 80146ac:	4606      	mov	r6, r0
 80146ae:	460f      	mov	r7, r1
 80146b0:	f7ec fa3c 	bl	8000b2c <__aeabi_dcmplt>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d165      	bne.n	8014784 <_dtoa_r+0x63c>
 80146b8:	4632      	mov	r2, r6
 80146ba:	463b      	mov	r3, r7
 80146bc:	4935      	ldr	r1, [pc, #212]	; (8014794 <_dtoa_r+0x64c>)
 80146be:	2000      	movs	r0, #0
 80146c0:	f7eb fe0a 	bl	80002d8 <__aeabi_dsub>
 80146c4:	ec53 2b18 	vmov	r2, r3, d8
 80146c8:	f7ec fa30 	bl	8000b2c <__aeabi_dcmplt>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	f040 80b9 	bne.w	8014844 <_dtoa_r+0x6fc>
 80146d2:	9b02      	ldr	r3, [sp, #8]
 80146d4:	429d      	cmp	r5, r3
 80146d6:	f43f af75 	beq.w	80145c4 <_dtoa_r+0x47c>
 80146da:	4b2f      	ldr	r3, [pc, #188]	; (8014798 <_dtoa_r+0x650>)
 80146dc:	ec51 0b18 	vmov	r0, r1, d8
 80146e0:	2200      	movs	r2, #0
 80146e2:	f7eb ffb1 	bl	8000648 <__aeabi_dmul>
 80146e6:	4b2c      	ldr	r3, [pc, #176]	; (8014798 <_dtoa_r+0x650>)
 80146e8:	ec41 0b18 	vmov	d8, r0, r1
 80146ec:	2200      	movs	r2, #0
 80146ee:	4630      	mov	r0, r6
 80146f0:	4639      	mov	r1, r7
 80146f2:	f7eb ffa9 	bl	8000648 <__aeabi_dmul>
 80146f6:	4606      	mov	r6, r0
 80146f8:	460f      	mov	r7, r1
 80146fa:	e7c4      	b.n	8014686 <_dtoa_r+0x53e>
 80146fc:	ec51 0b17 	vmov	r0, r1, d7
 8014700:	f7eb ffa2 	bl	8000648 <__aeabi_dmul>
 8014704:	9b02      	ldr	r3, [sp, #8]
 8014706:	9d00      	ldr	r5, [sp, #0]
 8014708:	930c      	str	r3, [sp, #48]	; 0x30
 801470a:	ec41 0b18 	vmov	d8, r0, r1
 801470e:	4639      	mov	r1, r7
 8014710:	4630      	mov	r0, r6
 8014712:	f7ec fa49 	bl	8000ba8 <__aeabi_d2iz>
 8014716:	9011      	str	r0, [sp, #68]	; 0x44
 8014718:	f7eb ff2c 	bl	8000574 <__aeabi_i2d>
 801471c:	4602      	mov	r2, r0
 801471e:	460b      	mov	r3, r1
 8014720:	4630      	mov	r0, r6
 8014722:	4639      	mov	r1, r7
 8014724:	f7eb fdd8 	bl	80002d8 <__aeabi_dsub>
 8014728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801472a:	3330      	adds	r3, #48	; 0x30
 801472c:	f805 3b01 	strb.w	r3, [r5], #1
 8014730:	9b02      	ldr	r3, [sp, #8]
 8014732:	429d      	cmp	r5, r3
 8014734:	4606      	mov	r6, r0
 8014736:	460f      	mov	r7, r1
 8014738:	f04f 0200 	mov.w	r2, #0
 801473c:	d134      	bne.n	80147a8 <_dtoa_r+0x660>
 801473e:	4b19      	ldr	r3, [pc, #100]	; (80147a4 <_dtoa_r+0x65c>)
 8014740:	ec51 0b18 	vmov	r0, r1, d8
 8014744:	f7eb fdca 	bl	80002dc <__adddf3>
 8014748:	4602      	mov	r2, r0
 801474a:	460b      	mov	r3, r1
 801474c:	4630      	mov	r0, r6
 801474e:	4639      	mov	r1, r7
 8014750:	f7ec fa0a 	bl	8000b68 <__aeabi_dcmpgt>
 8014754:	2800      	cmp	r0, #0
 8014756:	d175      	bne.n	8014844 <_dtoa_r+0x6fc>
 8014758:	ec53 2b18 	vmov	r2, r3, d8
 801475c:	4911      	ldr	r1, [pc, #68]	; (80147a4 <_dtoa_r+0x65c>)
 801475e:	2000      	movs	r0, #0
 8014760:	f7eb fdba 	bl	80002d8 <__aeabi_dsub>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4630      	mov	r0, r6
 801476a:	4639      	mov	r1, r7
 801476c:	f7ec f9de 	bl	8000b2c <__aeabi_dcmplt>
 8014770:	2800      	cmp	r0, #0
 8014772:	f43f af27 	beq.w	80145c4 <_dtoa_r+0x47c>
 8014776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014778:	1e6b      	subs	r3, r5, #1
 801477a:	930c      	str	r3, [sp, #48]	; 0x30
 801477c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014780:	2b30      	cmp	r3, #48	; 0x30
 8014782:	d0f8      	beq.n	8014776 <_dtoa_r+0x62e>
 8014784:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014788:	e04a      	b.n	8014820 <_dtoa_r+0x6d8>
 801478a:	bf00      	nop
 801478c:	08017018 	.word	0x08017018
 8014790:	08016ff0 	.word	0x08016ff0
 8014794:	3ff00000 	.word	0x3ff00000
 8014798:	40240000 	.word	0x40240000
 801479c:	401c0000 	.word	0x401c0000
 80147a0:	40140000 	.word	0x40140000
 80147a4:	3fe00000 	.word	0x3fe00000
 80147a8:	4baf      	ldr	r3, [pc, #700]	; (8014a68 <_dtoa_r+0x920>)
 80147aa:	f7eb ff4d 	bl	8000648 <__aeabi_dmul>
 80147ae:	4606      	mov	r6, r0
 80147b0:	460f      	mov	r7, r1
 80147b2:	e7ac      	b.n	801470e <_dtoa_r+0x5c6>
 80147b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80147b8:	9d00      	ldr	r5, [sp, #0]
 80147ba:	4642      	mov	r2, r8
 80147bc:	464b      	mov	r3, r9
 80147be:	4630      	mov	r0, r6
 80147c0:	4639      	mov	r1, r7
 80147c2:	f7ec f86b 	bl	800089c <__aeabi_ddiv>
 80147c6:	f7ec f9ef 	bl	8000ba8 <__aeabi_d2iz>
 80147ca:	9002      	str	r0, [sp, #8]
 80147cc:	f7eb fed2 	bl	8000574 <__aeabi_i2d>
 80147d0:	4642      	mov	r2, r8
 80147d2:	464b      	mov	r3, r9
 80147d4:	f7eb ff38 	bl	8000648 <__aeabi_dmul>
 80147d8:	4602      	mov	r2, r0
 80147da:	460b      	mov	r3, r1
 80147dc:	4630      	mov	r0, r6
 80147de:	4639      	mov	r1, r7
 80147e0:	f7eb fd7a 	bl	80002d8 <__aeabi_dsub>
 80147e4:	9e02      	ldr	r6, [sp, #8]
 80147e6:	9f01      	ldr	r7, [sp, #4]
 80147e8:	3630      	adds	r6, #48	; 0x30
 80147ea:	f805 6b01 	strb.w	r6, [r5], #1
 80147ee:	9e00      	ldr	r6, [sp, #0]
 80147f0:	1bae      	subs	r6, r5, r6
 80147f2:	42b7      	cmp	r7, r6
 80147f4:	4602      	mov	r2, r0
 80147f6:	460b      	mov	r3, r1
 80147f8:	d137      	bne.n	801486a <_dtoa_r+0x722>
 80147fa:	f7eb fd6f 	bl	80002dc <__adddf3>
 80147fe:	4642      	mov	r2, r8
 8014800:	464b      	mov	r3, r9
 8014802:	4606      	mov	r6, r0
 8014804:	460f      	mov	r7, r1
 8014806:	f7ec f9af 	bl	8000b68 <__aeabi_dcmpgt>
 801480a:	b9c8      	cbnz	r0, 8014840 <_dtoa_r+0x6f8>
 801480c:	4642      	mov	r2, r8
 801480e:	464b      	mov	r3, r9
 8014810:	4630      	mov	r0, r6
 8014812:	4639      	mov	r1, r7
 8014814:	f7ec f980 	bl	8000b18 <__aeabi_dcmpeq>
 8014818:	b110      	cbz	r0, 8014820 <_dtoa_r+0x6d8>
 801481a:	9b02      	ldr	r3, [sp, #8]
 801481c:	07d9      	lsls	r1, r3, #31
 801481e:	d40f      	bmi.n	8014840 <_dtoa_r+0x6f8>
 8014820:	4620      	mov	r0, r4
 8014822:	4659      	mov	r1, fp
 8014824:	f000 fe4e 	bl	80154c4 <_Bfree>
 8014828:	2300      	movs	r3, #0
 801482a:	702b      	strb	r3, [r5, #0]
 801482c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801482e:	f10a 0001 	add.w	r0, sl, #1
 8014832:	6018      	str	r0, [r3, #0]
 8014834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014836:	2b00      	cmp	r3, #0
 8014838:	f43f acd8 	beq.w	80141ec <_dtoa_r+0xa4>
 801483c:	601d      	str	r5, [r3, #0]
 801483e:	e4d5      	b.n	80141ec <_dtoa_r+0xa4>
 8014840:	f8cd a01c 	str.w	sl, [sp, #28]
 8014844:	462b      	mov	r3, r5
 8014846:	461d      	mov	r5, r3
 8014848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801484c:	2a39      	cmp	r2, #57	; 0x39
 801484e:	d108      	bne.n	8014862 <_dtoa_r+0x71a>
 8014850:	9a00      	ldr	r2, [sp, #0]
 8014852:	429a      	cmp	r2, r3
 8014854:	d1f7      	bne.n	8014846 <_dtoa_r+0x6fe>
 8014856:	9a07      	ldr	r2, [sp, #28]
 8014858:	9900      	ldr	r1, [sp, #0]
 801485a:	3201      	adds	r2, #1
 801485c:	9207      	str	r2, [sp, #28]
 801485e:	2230      	movs	r2, #48	; 0x30
 8014860:	700a      	strb	r2, [r1, #0]
 8014862:	781a      	ldrb	r2, [r3, #0]
 8014864:	3201      	adds	r2, #1
 8014866:	701a      	strb	r2, [r3, #0]
 8014868:	e78c      	b.n	8014784 <_dtoa_r+0x63c>
 801486a:	4b7f      	ldr	r3, [pc, #508]	; (8014a68 <_dtoa_r+0x920>)
 801486c:	2200      	movs	r2, #0
 801486e:	f7eb feeb 	bl	8000648 <__aeabi_dmul>
 8014872:	2200      	movs	r2, #0
 8014874:	2300      	movs	r3, #0
 8014876:	4606      	mov	r6, r0
 8014878:	460f      	mov	r7, r1
 801487a:	f7ec f94d 	bl	8000b18 <__aeabi_dcmpeq>
 801487e:	2800      	cmp	r0, #0
 8014880:	d09b      	beq.n	80147ba <_dtoa_r+0x672>
 8014882:	e7cd      	b.n	8014820 <_dtoa_r+0x6d8>
 8014884:	9a08      	ldr	r2, [sp, #32]
 8014886:	2a00      	cmp	r2, #0
 8014888:	f000 80c4 	beq.w	8014a14 <_dtoa_r+0x8cc>
 801488c:	9a05      	ldr	r2, [sp, #20]
 801488e:	2a01      	cmp	r2, #1
 8014890:	f300 80a8 	bgt.w	80149e4 <_dtoa_r+0x89c>
 8014894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014896:	2a00      	cmp	r2, #0
 8014898:	f000 80a0 	beq.w	80149dc <_dtoa_r+0x894>
 801489c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80148a0:	9e06      	ldr	r6, [sp, #24]
 80148a2:	4645      	mov	r5, r8
 80148a4:	9a04      	ldr	r2, [sp, #16]
 80148a6:	2101      	movs	r1, #1
 80148a8:	441a      	add	r2, r3
 80148aa:	4620      	mov	r0, r4
 80148ac:	4498      	add	r8, r3
 80148ae:	9204      	str	r2, [sp, #16]
 80148b0:	f000 ff0e 	bl	80156d0 <__i2b>
 80148b4:	4607      	mov	r7, r0
 80148b6:	2d00      	cmp	r5, #0
 80148b8:	dd0b      	ble.n	80148d2 <_dtoa_r+0x78a>
 80148ba:	9b04      	ldr	r3, [sp, #16]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	dd08      	ble.n	80148d2 <_dtoa_r+0x78a>
 80148c0:	42ab      	cmp	r3, r5
 80148c2:	9a04      	ldr	r2, [sp, #16]
 80148c4:	bfa8      	it	ge
 80148c6:	462b      	movge	r3, r5
 80148c8:	eba8 0803 	sub.w	r8, r8, r3
 80148cc:	1aed      	subs	r5, r5, r3
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	9304      	str	r3, [sp, #16]
 80148d2:	9b06      	ldr	r3, [sp, #24]
 80148d4:	b1fb      	cbz	r3, 8014916 <_dtoa_r+0x7ce>
 80148d6:	9b08      	ldr	r3, [sp, #32]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f000 809f 	beq.w	8014a1c <_dtoa_r+0x8d4>
 80148de:	2e00      	cmp	r6, #0
 80148e0:	dd11      	ble.n	8014906 <_dtoa_r+0x7be>
 80148e2:	4639      	mov	r1, r7
 80148e4:	4632      	mov	r2, r6
 80148e6:	4620      	mov	r0, r4
 80148e8:	f000 ffae 	bl	8015848 <__pow5mult>
 80148ec:	465a      	mov	r2, fp
 80148ee:	4601      	mov	r1, r0
 80148f0:	4607      	mov	r7, r0
 80148f2:	4620      	mov	r0, r4
 80148f4:	f000 ff02 	bl	80156fc <__multiply>
 80148f8:	4659      	mov	r1, fp
 80148fa:	9007      	str	r0, [sp, #28]
 80148fc:	4620      	mov	r0, r4
 80148fe:	f000 fde1 	bl	80154c4 <_Bfree>
 8014902:	9b07      	ldr	r3, [sp, #28]
 8014904:	469b      	mov	fp, r3
 8014906:	9b06      	ldr	r3, [sp, #24]
 8014908:	1b9a      	subs	r2, r3, r6
 801490a:	d004      	beq.n	8014916 <_dtoa_r+0x7ce>
 801490c:	4659      	mov	r1, fp
 801490e:	4620      	mov	r0, r4
 8014910:	f000 ff9a 	bl	8015848 <__pow5mult>
 8014914:	4683      	mov	fp, r0
 8014916:	2101      	movs	r1, #1
 8014918:	4620      	mov	r0, r4
 801491a:	f000 fed9 	bl	80156d0 <__i2b>
 801491e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014920:	2b00      	cmp	r3, #0
 8014922:	4606      	mov	r6, r0
 8014924:	dd7c      	ble.n	8014a20 <_dtoa_r+0x8d8>
 8014926:	461a      	mov	r2, r3
 8014928:	4601      	mov	r1, r0
 801492a:	4620      	mov	r0, r4
 801492c:	f000 ff8c 	bl	8015848 <__pow5mult>
 8014930:	9b05      	ldr	r3, [sp, #20]
 8014932:	2b01      	cmp	r3, #1
 8014934:	4606      	mov	r6, r0
 8014936:	dd76      	ble.n	8014a26 <_dtoa_r+0x8de>
 8014938:	2300      	movs	r3, #0
 801493a:	9306      	str	r3, [sp, #24]
 801493c:	6933      	ldr	r3, [r6, #16]
 801493e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014942:	6918      	ldr	r0, [r3, #16]
 8014944:	f000 fe74 	bl	8015630 <__hi0bits>
 8014948:	f1c0 0020 	rsb	r0, r0, #32
 801494c:	9b04      	ldr	r3, [sp, #16]
 801494e:	4418      	add	r0, r3
 8014950:	f010 001f 	ands.w	r0, r0, #31
 8014954:	f000 8086 	beq.w	8014a64 <_dtoa_r+0x91c>
 8014958:	f1c0 0320 	rsb	r3, r0, #32
 801495c:	2b04      	cmp	r3, #4
 801495e:	dd7f      	ble.n	8014a60 <_dtoa_r+0x918>
 8014960:	f1c0 001c 	rsb	r0, r0, #28
 8014964:	9b04      	ldr	r3, [sp, #16]
 8014966:	4403      	add	r3, r0
 8014968:	4480      	add	r8, r0
 801496a:	4405      	add	r5, r0
 801496c:	9304      	str	r3, [sp, #16]
 801496e:	f1b8 0f00 	cmp.w	r8, #0
 8014972:	dd05      	ble.n	8014980 <_dtoa_r+0x838>
 8014974:	4659      	mov	r1, fp
 8014976:	4642      	mov	r2, r8
 8014978:	4620      	mov	r0, r4
 801497a:	f000 ffbf 	bl	80158fc <__lshift>
 801497e:	4683      	mov	fp, r0
 8014980:	9b04      	ldr	r3, [sp, #16]
 8014982:	2b00      	cmp	r3, #0
 8014984:	dd05      	ble.n	8014992 <_dtoa_r+0x84a>
 8014986:	4631      	mov	r1, r6
 8014988:	461a      	mov	r2, r3
 801498a:	4620      	mov	r0, r4
 801498c:	f000 ffb6 	bl	80158fc <__lshift>
 8014990:	4606      	mov	r6, r0
 8014992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014994:	2b00      	cmp	r3, #0
 8014996:	d069      	beq.n	8014a6c <_dtoa_r+0x924>
 8014998:	4631      	mov	r1, r6
 801499a:	4658      	mov	r0, fp
 801499c:	f001 f81a 	bl	80159d4 <__mcmp>
 80149a0:	2800      	cmp	r0, #0
 80149a2:	da63      	bge.n	8014a6c <_dtoa_r+0x924>
 80149a4:	2300      	movs	r3, #0
 80149a6:	4659      	mov	r1, fp
 80149a8:	220a      	movs	r2, #10
 80149aa:	4620      	mov	r0, r4
 80149ac:	f000 fdac 	bl	8015508 <__multadd>
 80149b0:	9b08      	ldr	r3, [sp, #32]
 80149b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80149b6:	4683      	mov	fp, r0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f000 818f 	beq.w	8014cdc <_dtoa_r+0xb94>
 80149be:	4639      	mov	r1, r7
 80149c0:	2300      	movs	r3, #0
 80149c2:	220a      	movs	r2, #10
 80149c4:	4620      	mov	r0, r4
 80149c6:	f000 fd9f 	bl	8015508 <__multadd>
 80149ca:	f1b9 0f00 	cmp.w	r9, #0
 80149ce:	4607      	mov	r7, r0
 80149d0:	f300 808e 	bgt.w	8014af0 <_dtoa_r+0x9a8>
 80149d4:	9b05      	ldr	r3, [sp, #20]
 80149d6:	2b02      	cmp	r3, #2
 80149d8:	dc50      	bgt.n	8014a7c <_dtoa_r+0x934>
 80149da:	e089      	b.n	8014af0 <_dtoa_r+0x9a8>
 80149dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80149e2:	e75d      	b.n	80148a0 <_dtoa_r+0x758>
 80149e4:	9b01      	ldr	r3, [sp, #4]
 80149e6:	1e5e      	subs	r6, r3, #1
 80149e8:	9b06      	ldr	r3, [sp, #24]
 80149ea:	42b3      	cmp	r3, r6
 80149ec:	bfbf      	itttt	lt
 80149ee:	9b06      	ldrlt	r3, [sp, #24]
 80149f0:	9606      	strlt	r6, [sp, #24]
 80149f2:	1af2      	sublt	r2, r6, r3
 80149f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80149f6:	bfb6      	itet	lt
 80149f8:	189b      	addlt	r3, r3, r2
 80149fa:	1b9e      	subge	r6, r3, r6
 80149fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80149fe:	9b01      	ldr	r3, [sp, #4]
 8014a00:	bfb8      	it	lt
 8014a02:	2600      	movlt	r6, #0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	bfb5      	itete	lt
 8014a08:	eba8 0503 	sublt.w	r5, r8, r3
 8014a0c:	9b01      	ldrge	r3, [sp, #4]
 8014a0e:	2300      	movlt	r3, #0
 8014a10:	4645      	movge	r5, r8
 8014a12:	e747      	b.n	80148a4 <_dtoa_r+0x75c>
 8014a14:	9e06      	ldr	r6, [sp, #24]
 8014a16:	9f08      	ldr	r7, [sp, #32]
 8014a18:	4645      	mov	r5, r8
 8014a1a:	e74c      	b.n	80148b6 <_dtoa_r+0x76e>
 8014a1c:	9a06      	ldr	r2, [sp, #24]
 8014a1e:	e775      	b.n	801490c <_dtoa_r+0x7c4>
 8014a20:	9b05      	ldr	r3, [sp, #20]
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	dc18      	bgt.n	8014a58 <_dtoa_r+0x910>
 8014a26:	9b02      	ldr	r3, [sp, #8]
 8014a28:	b9b3      	cbnz	r3, 8014a58 <_dtoa_r+0x910>
 8014a2a:	9b03      	ldr	r3, [sp, #12]
 8014a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a30:	b9a3      	cbnz	r3, 8014a5c <_dtoa_r+0x914>
 8014a32:	9b03      	ldr	r3, [sp, #12]
 8014a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a38:	0d1b      	lsrs	r3, r3, #20
 8014a3a:	051b      	lsls	r3, r3, #20
 8014a3c:	b12b      	cbz	r3, 8014a4a <_dtoa_r+0x902>
 8014a3e:	9b04      	ldr	r3, [sp, #16]
 8014a40:	3301      	adds	r3, #1
 8014a42:	9304      	str	r3, [sp, #16]
 8014a44:	f108 0801 	add.w	r8, r8, #1
 8014a48:	2301      	movs	r3, #1
 8014a4a:	9306      	str	r3, [sp, #24]
 8014a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f47f af74 	bne.w	801493c <_dtoa_r+0x7f4>
 8014a54:	2001      	movs	r0, #1
 8014a56:	e779      	b.n	801494c <_dtoa_r+0x804>
 8014a58:	2300      	movs	r3, #0
 8014a5a:	e7f6      	b.n	8014a4a <_dtoa_r+0x902>
 8014a5c:	9b02      	ldr	r3, [sp, #8]
 8014a5e:	e7f4      	b.n	8014a4a <_dtoa_r+0x902>
 8014a60:	d085      	beq.n	801496e <_dtoa_r+0x826>
 8014a62:	4618      	mov	r0, r3
 8014a64:	301c      	adds	r0, #28
 8014a66:	e77d      	b.n	8014964 <_dtoa_r+0x81c>
 8014a68:	40240000 	.word	0x40240000
 8014a6c:	9b01      	ldr	r3, [sp, #4]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	dc38      	bgt.n	8014ae4 <_dtoa_r+0x99c>
 8014a72:	9b05      	ldr	r3, [sp, #20]
 8014a74:	2b02      	cmp	r3, #2
 8014a76:	dd35      	ble.n	8014ae4 <_dtoa_r+0x99c>
 8014a78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014a7c:	f1b9 0f00 	cmp.w	r9, #0
 8014a80:	d10d      	bne.n	8014a9e <_dtoa_r+0x956>
 8014a82:	4631      	mov	r1, r6
 8014a84:	464b      	mov	r3, r9
 8014a86:	2205      	movs	r2, #5
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f000 fd3d 	bl	8015508 <__multadd>
 8014a8e:	4601      	mov	r1, r0
 8014a90:	4606      	mov	r6, r0
 8014a92:	4658      	mov	r0, fp
 8014a94:	f000 ff9e 	bl	80159d4 <__mcmp>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	f73f adbd 	bgt.w	8014618 <_dtoa_r+0x4d0>
 8014a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aa0:	9d00      	ldr	r5, [sp, #0]
 8014aa2:	ea6f 0a03 	mvn.w	sl, r3
 8014aa6:	f04f 0800 	mov.w	r8, #0
 8014aaa:	4631      	mov	r1, r6
 8014aac:	4620      	mov	r0, r4
 8014aae:	f000 fd09 	bl	80154c4 <_Bfree>
 8014ab2:	2f00      	cmp	r7, #0
 8014ab4:	f43f aeb4 	beq.w	8014820 <_dtoa_r+0x6d8>
 8014ab8:	f1b8 0f00 	cmp.w	r8, #0
 8014abc:	d005      	beq.n	8014aca <_dtoa_r+0x982>
 8014abe:	45b8      	cmp	r8, r7
 8014ac0:	d003      	beq.n	8014aca <_dtoa_r+0x982>
 8014ac2:	4641      	mov	r1, r8
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f000 fcfd 	bl	80154c4 <_Bfree>
 8014aca:	4639      	mov	r1, r7
 8014acc:	4620      	mov	r0, r4
 8014ace:	f000 fcf9 	bl	80154c4 <_Bfree>
 8014ad2:	e6a5      	b.n	8014820 <_dtoa_r+0x6d8>
 8014ad4:	2600      	movs	r6, #0
 8014ad6:	4637      	mov	r7, r6
 8014ad8:	e7e1      	b.n	8014a9e <_dtoa_r+0x956>
 8014ada:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014adc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014ae0:	4637      	mov	r7, r6
 8014ae2:	e599      	b.n	8014618 <_dtoa_r+0x4d0>
 8014ae4:	9b08      	ldr	r3, [sp, #32]
 8014ae6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f000 80fd 	beq.w	8014cea <_dtoa_r+0xba2>
 8014af0:	2d00      	cmp	r5, #0
 8014af2:	dd05      	ble.n	8014b00 <_dtoa_r+0x9b8>
 8014af4:	4639      	mov	r1, r7
 8014af6:	462a      	mov	r2, r5
 8014af8:	4620      	mov	r0, r4
 8014afa:	f000 feff 	bl	80158fc <__lshift>
 8014afe:	4607      	mov	r7, r0
 8014b00:	9b06      	ldr	r3, [sp, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d05c      	beq.n	8014bc0 <_dtoa_r+0xa78>
 8014b06:	6879      	ldr	r1, [r7, #4]
 8014b08:	4620      	mov	r0, r4
 8014b0a:	f000 fc9b 	bl	8015444 <_Balloc>
 8014b0e:	4605      	mov	r5, r0
 8014b10:	b928      	cbnz	r0, 8014b1e <_dtoa_r+0x9d6>
 8014b12:	4b80      	ldr	r3, [pc, #512]	; (8014d14 <_dtoa_r+0xbcc>)
 8014b14:	4602      	mov	r2, r0
 8014b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014b1a:	f7ff bb2e 	b.w	801417a <_dtoa_r+0x32>
 8014b1e:	693a      	ldr	r2, [r7, #16]
 8014b20:	3202      	adds	r2, #2
 8014b22:	0092      	lsls	r2, r2, #2
 8014b24:	f107 010c 	add.w	r1, r7, #12
 8014b28:	300c      	adds	r0, #12
 8014b2a:	f7fd fc05 	bl	8012338 <memcpy>
 8014b2e:	2201      	movs	r2, #1
 8014b30:	4629      	mov	r1, r5
 8014b32:	4620      	mov	r0, r4
 8014b34:	f000 fee2 	bl	80158fc <__lshift>
 8014b38:	9b00      	ldr	r3, [sp, #0]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	9b00      	ldr	r3, [sp, #0]
 8014b40:	444b      	add	r3, r9
 8014b42:	9307      	str	r3, [sp, #28]
 8014b44:	9b02      	ldr	r3, [sp, #8]
 8014b46:	f003 0301 	and.w	r3, r3, #1
 8014b4a:	46b8      	mov	r8, r7
 8014b4c:	9306      	str	r3, [sp, #24]
 8014b4e:	4607      	mov	r7, r0
 8014b50:	9b01      	ldr	r3, [sp, #4]
 8014b52:	4631      	mov	r1, r6
 8014b54:	3b01      	subs	r3, #1
 8014b56:	4658      	mov	r0, fp
 8014b58:	9302      	str	r3, [sp, #8]
 8014b5a:	f7ff fa67 	bl	801402c <quorem>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	3330      	adds	r3, #48	; 0x30
 8014b62:	9004      	str	r0, [sp, #16]
 8014b64:	4641      	mov	r1, r8
 8014b66:	4658      	mov	r0, fp
 8014b68:	9308      	str	r3, [sp, #32]
 8014b6a:	f000 ff33 	bl	80159d4 <__mcmp>
 8014b6e:	463a      	mov	r2, r7
 8014b70:	4681      	mov	r9, r0
 8014b72:	4631      	mov	r1, r6
 8014b74:	4620      	mov	r0, r4
 8014b76:	f000 ff49 	bl	8015a0c <__mdiff>
 8014b7a:	68c2      	ldr	r2, [r0, #12]
 8014b7c:	9b08      	ldr	r3, [sp, #32]
 8014b7e:	4605      	mov	r5, r0
 8014b80:	bb02      	cbnz	r2, 8014bc4 <_dtoa_r+0xa7c>
 8014b82:	4601      	mov	r1, r0
 8014b84:	4658      	mov	r0, fp
 8014b86:	f000 ff25 	bl	80159d4 <__mcmp>
 8014b8a:	9b08      	ldr	r3, [sp, #32]
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	4629      	mov	r1, r5
 8014b90:	4620      	mov	r0, r4
 8014b92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014b96:	f000 fc95 	bl	80154c4 <_Bfree>
 8014b9a:	9b05      	ldr	r3, [sp, #20]
 8014b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b9e:	9d01      	ldr	r5, [sp, #4]
 8014ba0:	ea43 0102 	orr.w	r1, r3, r2
 8014ba4:	9b06      	ldr	r3, [sp, #24]
 8014ba6:	430b      	orrs	r3, r1
 8014ba8:	9b08      	ldr	r3, [sp, #32]
 8014baa:	d10d      	bne.n	8014bc8 <_dtoa_r+0xa80>
 8014bac:	2b39      	cmp	r3, #57	; 0x39
 8014bae:	d029      	beq.n	8014c04 <_dtoa_r+0xabc>
 8014bb0:	f1b9 0f00 	cmp.w	r9, #0
 8014bb4:	dd01      	ble.n	8014bba <_dtoa_r+0xa72>
 8014bb6:	9b04      	ldr	r3, [sp, #16]
 8014bb8:	3331      	adds	r3, #49	; 0x31
 8014bba:	9a02      	ldr	r2, [sp, #8]
 8014bbc:	7013      	strb	r3, [r2, #0]
 8014bbe:	e774      	b.n	8014aaa <_dtoa_r+0x962>
 8014bc0:	4638      	mov	r0, r7
 8014bc2:	e7b9      	b.n	8014b38 <_dtoa_r+0x9f0>
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	e7e2      	b.n	8014b8e <_dtoa_r+0xa46>
 8014bc8:	f1b9 0f00 	cmp.w	r9, #0
 8014bcc:	db06      	blt.n	8014bdc <_dtoa_r+0xa94>
 8014bce:	9905      	ldr	r1, [sp, #20]
 8014bd0:	ea41 0909 	orr.w	r9, r1, r9
 8014bd4:	9906      	ldr	r1, [sp, #24]
 8014bd6:	ea59 0101 	orrs.w	r1, r9, r1
 8014bda:	d120      	bne.n	8014c1e <_dtoa_r+0xad6>
 8014bdc:	2a00      	cmp	r2, #0
 8014bde:	ddec      	ble.n	8014bba <_dtoa_r+0xa72>
 8014be0:	4659      	mov	r1, fp
 8014be2:	2201      	movs	r2, #1
 8014be4:	4620      	mov	r0, r4
 8014be6:	9301      	str	r3, [sp, #4]
 8014be8:	f000 fe88 	bl	80158fc <__lshift>
 8014bec:	4631      	mov	r1, r6
 8014bee:	4683      	mov	fp, r0
 8014bf0:	f000 fef0 	bl	80159d4 <__mcmp>
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	9b01      	ldr	r3, [sp, #4]
 8014bf8:	dc02      	bgt.n	8014c00 <_dtoa_r+0xab8>
 8014bfa:	d1de      	bne.n	8014bba <_dtoa_r+0xa72>
 8014bfc:	07da      	lsls	r2, r3, #31
 8014bfe:	d5dc      	bpl.n	8014bba <_dtoa_r+0xa72>
 8014c00:	2b39      	cmp	r3, #57	; 0x39
 8014c02:	d1d8      	bne.n	8014bb6 <_dtoa_r+0xa6e>
 8014c04:	9a02      	ldr	r2, [sp, #8]
 8014c06:	2339      	movs	r3, #57	; 0x39
 8014c08:	7013      	strb	r3, [r2, #0]
 8014c0a:	462b      	mov	r3, r5
 8014c0c:	461d      	mov	r5, r3
 8014c0e:	3b01      	subs	r3, #1
 8014c10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014c14:	2a39      	cmp	r2, #57	; 0x39
 8014c16:	d050      	beq.n	8014cba <_dtoa_r+0xb72>
 8014c18:	3201      	adds	r2, #1
 8014c1a:	701a      	strb	r2, [r3, #0]
 8014c1c:	e745      	b.n	8014aaa <_dtoa_r+0x962>
 8014c1e:	2a00      	cmp	r2, #0
 8014c20:	dd03      	ble.n	8014c2a <_dtoa_r+0xae2>
 8014c22:	2b39      	cmp	r3, #57	; 0x39
 8014c24:	d0ee      	beq.n	8014c04 <_dtoa_r+0xabc>
 8014c26:	3301      	adds	r3, #1
 8014c28:	e7c7      	b.n	8014bba <_dtoa_r+0xa72>
 8014c2a:	9a01      	ldr	r2, [sp, #4]
 8014c2c:	9907      	ldr	r1, [sp, #28]
 8014c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014c32:	428a      	cmp	r2, r1
 8014c34:	d02a      	beq.n	8014c8c <_dtoa_r+0xb44>
 8014c36:	4659      	mov	r1, fp
 8014c38:	2300      	movs	r3, #0
 8014c3a:	220a      	movs	r2, #10
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f000 fc63 	bl	8015508 <__multadd>
 8014c42:	45b8      	cmp	r8, r7
 8014c44:	4683      	mov	fp, r0
 8014c46:	f04f 0300 	mov.w	r3, #0
 8014c4a:	f04f 020a 	mov.w	r2, #10
 8014c4e:	4641      	mov	r1, r8
 8014c50:	4620      	mov	r0, r4
 8014c52:	d107      	bne.n	8014c64 <_dtoa_r+0xb1c>
 8014c54:	f000 fc58 	bl	8015508 <__multadd>
 8014c58:	4680      	mov	r8, r0
 8014c5a:	4607      	mov	r7, r0
 8014c5c:	9b01      	ldr	r3, [sp, #4]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	9301      	str	r3, [sp, #4]
 8014c62:	e775      	b.n	8014b50 <_dtoa_r+0xa08>
 8014c64:	f000 fc50 	bl	8015508 <__multadd>
 8014c68:	4639      	mov	r1, r7
 8014c6a:	4680      	mov	r8, r0
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	220a      	movs	r2, #10
 8014c70:	4620      	mov	r0, r4
 8014c72:	f000 fc49 	bl	8015508 <__multadd>
 8014c76:	4607      	mov	r7, r0
 8014c78:	e7f0      	b.n	8014c5c <_dtoa_r+0xb14>
 8014c7a:	f1b9 0f00 	cmp.w	r9, #0
 8014c7e:	9a00      	ldr	r2, [sp, #0]
 8014c80:	bfcc      	ite	gt
 8014c82:	464d      	movgt	r5, r9
 8014c84:	2501      	movle	r5, #1
 8014c86:	4415      	add	r5, r2
 8014c88:	f04f 0800 	mov.w	r8, #0
 8014c8c:	4659      	mov	r1, fp
 8014c8e:	2201      	movs	r2, #1
 8014c90:	4620      	mov	r0, r4
 8014c92:	9301      	str	r3, [sp, #4]
 8014c94:	f000 fe32 	bl	80158fc <__lshift>
 8014c98:	4631      	mov	r1, r6
 8014c9a:	4683      	mov	fp, r0
 8014c9c:	f000 fe9a 	bl	80159d4 <__mcmp>
 8014ca0:	2800      	cmp	r0, #0
 8014ca2:	dcb2      	bgt.n	8014c0a <_dtoa_r+0xac2>
 8014ca4:	d102      	bne.n	8014cac <_dtoa_r+0xb64>
 8014ca6:	9b01      	ldr	r3, [sp, #4]
 8014ca8:	07db      	lsls	r3, r3, #31
 8014caa:	d4ae      	bmi.n	8014c0a <_dtoa_r+0xac2>
 8014cac:	462b      	mov	r3, r5
 8014cae:	461d      	mov	r5, r3
 8014cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014cb4:	2a30      	cmp	r2, #48	; 0x30
 8014cb6:	d0fa      	beq.n	8014cae <_dtoa_r+0xb66>
 8014cb8:	e6f7      	b.n	8014aaa <_dtoa_r+0x962>
 8014cba:	9a00      	ldr	r2, [sp, #0]
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d1a5      	bne.n	8014c0c <_dtoa_r+0xac4>
 8014cc0:	f10a 0a01 	add.w	sl, sl, #1
 8014cc4:	2331      	movs	r3, #49	; 0x31
 8014cc6:	e779      	b.n	8014bbc <_dtoa_r+0xa74>
 8014cc8:	4b13      	ldr	r3, [pc, #76]	; (8014d18 <_dtoa_r+0xbd0>)
 8014cca:	f7ff baaf 	b.w	801422c <_dtoa_r+0xe4>
 8014cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f47f aa86 	bne.w	80141e2 <_dtoa_r+0x9a>
 8014cd6:	4b11      	ldr	r3, [pc, #68]	; (8014d1c <_dtoa_r+0xbd4>)
 8014cd8:	f7ff baa8 	b.w	801422c <_dtoa_r+0xe4>
 8014cdc:	f1b9 0f00 	cmp.w	r9, #0
 8014ce0:	dc03      	bgt.n	8014cea <_dtoa_r+0xba2>
 8014ce2:	9b05      	ldr	r3, [sp, #20]
 8014ce4:	2b02      	cmp	r3, #2
 8014ce6:	f73f aec9 	bgt.w	8014a7c <_dtoa_r+0x934>
 8014cea:	9d00      	ldr	r5, [sp, #0]
 8014cec:	4631      	mov	r1, r6
 8014cee:	4658      	mov	r0, fp
 8014cf0:	f7ff f99c 	bl	801402c <quorem>
 8014cf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8014cfc:	9a00      	ldr	r2, [sp, #0]
 8014cfe:	1aaa      	subs	r2, r5, r2
 8014d00:	4591      	cmp	r9, r2
 8014d02:	ddba      	ble.n	8014c7a <_dtoa_r+0xb32>
 8014d04:	4659      	mov	r1, fp
 8014d06:	2300      	movs	r3, #0
 8014d08:	220a      	movs	r2, #10
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f000 fbfc 	bl	8015508 <__multadd>
 8014d10:	4683      	mov	fp, r0
 8014d12:	e7eb      	b.n	8014cec <_dtoa_r+0xba4>
 8014d14:	08016efc 	.word	0x08016efc
 8014d18:	08016cfc 	.word	0x08016cfc
 8014d1c:	08016e79 	.word	0x08016e79

08014d20 <rshift>:
 8014d20:	6903      	ldr	r3, [r0, #16]
 8014d22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014d2e:	f100 0414 	add.w	r4, r0, #20
 8014d32:	dd45      	ble.n	8014dc0 <rshift+0xa0>
 8014d34:	f011 011f 	ands.w	r1, r1, #31
 8014d38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014d3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014d40:	d10c      	bne.n	8014d5c <rshift+0x3c>
 8014d42:	f100 0710 	add.w	r7, r0, #16
 8014d46:	4629      	mov	r1, r5
 8014d48:	42b1      	cmp	r1, r6
 8014d4a:	d334      	bcc.n	8014db6 <rshift+0x96>
 8014d4c:	1a9b      	subs	r3, r3, r2
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	1eea      	subs	r2, r5, #3
 8014d52:	4296      	cmp	r6, r2
 8014d54:	bf38      	it	cc
 8014d56:	2300      	movcc	r3, #0
 8014d58:	4423      	add	r3, r4
 8014d5a:	e015      	b.n	8014d88 <rshift+0x68>
 8014d5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014d60:	f1c1 0820 	rsb	r8, r1, #32
 8014d64:	40cf      	lsrs	r7, r1
 8014d66:	f105 0e04 	add.w	lr, r5, #4
 8014d6a:	46a1      	mov	r9, r4
 8014d6c:	4576      	cmp	r6, lr
 8014d6e:	46f4      	mov	ip, lr
 8014d70:	d815      	bhi.n	8014d9e <rshift+0x7e>
 8014d72:	1a9b      	subs	r3, r3, r2
 8014d74:	009a      	lsls	r2, r3, #2
 8014d76:	3a04      	subs	r2, #4
 8014d78:	3501      	adds	r5, #1
 8014d7a:	42ae      	cmp	r6, r5
 8014d7c:	bf38      	it	cc
 8014d7e:	2200      	movcc	r2, #0
 8014d80:	18a3      	adds	r3, r4, r2
 8014d82:	50a7      	str	r7, [r4, r2]
 8014d84:	b107      	cbz	r7, 8014d88 <rshift+0x68>
 8014d86:	3304      	adds	r3, #4
 8014d88:	1b1a      	subs	r2, r3, r4
 8014d8a:	42a3      	cmp	r3, r4
 8014d8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014d90:	bf08      	it	eq
 8014d92:	2300      	moveq	r3, #0
 8014d94:	6102      	str	r2, [r0, #16]
 8014d96:	bf08      	it	eq
 8014d98:	6143      	streq	r3, [r0, #20]
 8014d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d9e:	f8dc c000 	ldr.w	ip, [ip]
 8014da2:	fa0c fc08 	lsl.w	ip, ip, r8
 8014da6:	ea4c 0707 	orr.w	r7, ip, r7
 8014daa:	f849 7b04 	str.w	r7, [r9], #4
 8014dae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014db2:	40cf      	lsrs	r7, r1
 8014db4:	e7da      	b.n	8014d6c <rshift+0x4c>
 8014db6:	f851 cb04 	ldr.w	ip, [r1], #4
 8014dba:	f847 cf04 	str.w	ip, [r7, #4]!
 8014dbe:	e7c3      	b.n	8014d48 <rshift+0x28>
 8014dc0:	4623      	mov	r3, r4
 8014dc2:	e7e1      	b.n	8014d88 <rshift+0x68>

08014dc4 <__hexdig_fun>:
 8014dc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014dc8:	2b09      	cmp	r3, #9
 8014dca:	d802      	bhi.n	8014dd2 <__hexdig_fun+0xe>
 8014dcc:	3820      	subs	r0, #32
 8014dce:	b2c0      	uxtb	r0, r0
 8014dd0:	4770      	bx	lr
 8014dd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014dd6:	2b05      	cmp	r3, #5
 8014dd8:	d801      	bhi.n	8014dde <__hexdig_fun+0x1a>
 8014dda:	3847      	subs	r0, #71	; 0x47
 8014ddc:	e7f7      	b.n	8014dce <__hexdig_fun+0xa>
 8014dde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014de2:	2b05      	cmp	r3, #5
 8014de4:	d801      	bhi.n	8014dea <__hexdig_fun+0x26>
 8014de6:	3827      	subs	r0, #39	; 0x27
 8014de8:	e7f1      	b.n	8014dce <__hexdig_fun+0xa>
 8014dea:	2000      	movs	r0, #0
 8014dec:	4770      	bx	lr
	...

08014df0 <__gethex>:
 8014df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	ed2d 8b02 	vpush	{d8}
 8014df8:	b089      	sub	sp, #36	; 0x24
 8014dfa:	ee08 0a10 	vmov	s16, r0
 8014dfe:	9304      	str	r3, [sp, #16]
 8014e00:	4bbc      	ldr	r3, [pc, #752]	; (80150f4 <__gethex+0x304>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	4618      	mov	r0, r3
 8014e08:	468b      	mov	fp, r1
 8014e0a:	4690      	mov	r8, r2
 8014e0c:	f7eb fa08 	bl	8000220 <strlen>
 8014e10:	9b01      	ldr	r3, [sp, #4]
 8014e12:	f8db 2000 	ldr.w	r2, [fp]
 8014e16:	4403      	add	r3, r0
 8014e18:	4682      	mov	sl, r0
 8014e1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014e1e:	9305      	str	r3, [sp, #20]
 8014e20:	1c93      	adds	r3, r2, #2
 8014e22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014e26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014e2a:	32fe      	adds	r2, #254	; 0xfe
 8014e2c:	18d1      	adds	r1, r2, r3
 8014e2e:	461f      	mov	r7, r3
 8014e30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014e34:	9100      	str	r1, [sp, #0]
 8014e36:	2830      	cmp	r0, #48	; 0x30
 8014e38:	d0f8      	beq.n	8014e2c <__gethex+0x3c>
 8014e3a:	f7ff ffc3 	bl	8014dc4 <__hexdig_fun>
 8014e3e:	4604      	mov	r4, r0
 8014e40:	2800      	cmp	r0, #0
 8014e42:	d13a      	bne.n	8014eba <__gethex+0xca>
 8014e44:	9901      	ldr	r1, [sp, #4]
 8014e46:	4652      	mov	r2, sl
 8014e48:	4638      	mov	r0, r7
 8014e4a:	f001 f929 	bl	80160a0 <strncmp>
 8014e4e:	4605      	mov	r5, r0
 8014e50:	2800      	cmp	r0, #0
 8014e52:	d168      	bne.n	8014f26 <__gethex+0x136>
 8014e54:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014e58:	eb07 060a 	add.w	r6, r7, sl
 8014e5c:	f7ff ffb2 	bl	8014dc4 <__hexdig_fun>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	d062      	beq.n	8014f2a <__gethex+0x13a>
 8014e64:	4633      	mov	r3, r6
 8014e66:	7818      	ldrb	r0, [r3, #0]
 8014e68:	2830      	cmp	r0, #48	; 0x30
 8014e6a:	461f      	mov	r7, r3
 8014e6c:	f103 0301 	add.w	r3, r3, #1
 8014e70:	d0f9      	beq.n	8014e66 <__gethex+0x76>
 8014e72:	f7ff ffa7 	bl	8014dc4 <__hexdig_fun>
 8014e76:	2301      	movs	r3, #1
 8014e78:	fab0 f480 	clz	r4, r0
 8014e7c:	0964      	lsrs	r4, r4, #5
 8014e7e:	4635      	mov	r5, r6
 8014e80:	9300      	str	r3, [sp, #0]
 8014e82:	463a      	mov	r2, r7
 8014e84:	4616      	mov	r6, r2
 8014e86:	3201      	adds	r2, #1
 8014e88:	7830      	ldrb	r0, [r6, #0]
 8014e8a:	f7ff ff9b 	bl	8014dc4 <__hexdig_fun>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d1f8      	bne.n	8014e84 <__gethex+0x94>
 8014e92:	9901      	ldr	r1, [sp, #4]
 8014e94:	4652      	mov	r2, sl
 8014e96:	4630      	mov	r0, r6
 8014e98:	f001 f902 	bl	80160a0 <strncmp>
 8014e9c:	b980      	cbnz	r0, 8014ec0 <__gethex+0xd0>
 8014e9e:	b94d      	cbnz	r5, 8014eb4 <__gethex+0xc4>
 8014ea0:	eb06 050a 	add.w	r5, r6, sl
 8014ea4:	462a      	mov	r2, r5
 8014ea6:	4616      	mov	r6, r2
 8014ea8:	3201      	adds	r2, #1
 8014eaa:	7830      	ldrb	r0, [r6, #0]
 8014eac:	f7ff ff8a 	bl	8014dc4 <__hexdig_fun>
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d1f8      	bne.n	8014ea6 <__gethex+0xb6>
 8014eb4:	1bad      	subs	r5, r5, r6
 8014eb6:	00ad      	lsls	r5, r5, #2
 8014eb8:	e004      	b.n	8014ec4 <__gethex+0xd4>
 8014eba:	2400      	movs	r4, #0
 8014ebc:	4625      	mov	r5, r4
 8014ebe:	e7e0      	b.n	8014e82 <__gethex+0x92>
 8014ec0:	2d00      	cmp	r5, #0
 8014ec2:	d1f7      	bne.n	8014eb4 <__gethex+0xc4>
 8014ec4:	7833      	ldrb	r3, [r6, #0]
 8014ec6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014eca:	2b50      	cmp	r3, #80	; 0x50
 8014ecc:	d13b      	bne.n	8014f46 <__gethex+0x156>
 8014ece:	7873      	ldrb	r3, [r6, #1]
 8014ed0:	2b2b      	cmp	r3, #43	; 0x2b
 8014ed2:	d02c      	beq.n	8014f2e <__gethex+0x13e>
 8014ed4:	2b2d      	cmp	r3, #45	; 0x2d
 8014ed6:	d02e      	beq.n	8014f36 <__gethex+0x146>
 8014ed8:	1c71      	adds	r1, r6, #1
 8014eda:	f04f 0900 	mov.w	r9, #0
 8014ede:	7808      	ldrb	r0, [r1, #0]
 8014ee0:	f7ff ff70 	bl	8014dc4 <__hexdig_fun>
 8014ee4:	1e43      	subs	r3, r0, #1
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	2b18      	cmp	r3, #24
 8014eea:	d82c      	bhi.n	8014f46 <__gethex+0x156>
 8014eec:	f1a0 0210 	sub.w	r2, r0, #16
 8014ef0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014ef4:	f7ff ff66 	bl	8014dc4 <__hexdig_fun>
 8014ef8:	1e43      	subs	r3, r0, #1
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	2b18      	cmp	r3, #24
 8014efe:	d91d      	bls.n	8014f3c <__gethex+0x14c>
 8014f00:	f1b9 0f00 	cmp.w	r9, #0
 8014f04:	d000      	beq.n	8014f08 <__gethex+0x118>
 8014f06:	4252      	negs	r2, r2
 8014f08:	4415      	add	r5, r2
 8014f0a:	f8cb 1000 	str.w	r1, [fp]
 8014f0e:	b1e4      	cbz	r4, 8014f4a <__gethex+0x15a>
 8014f10:	9b00      	ldr	r3, [sp, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	bf14      	ite	ne
 8014f16:	2700      	movne	r7, #0
 8014f18:	2706      	moveq	r7, #6
 8014f1a:	4638      	mov	r0, r7
 8014f1c:	b009      	add	sp, #36	; 0x24
 8014f1e:	ecbd 8b02 	vpop	{d8}
 8014f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f26:	463e      	mov	r6, r7
 8014f28:	4625      	mov	r5, r4
 8014f2a:	2401      	movs	r4, #1
 8014f2c:	e7ca      	b.n	8014ec4 <__gethex+0xd4>
 8014f2e:	f04f 0900 	mov.w	r9, #0
 8014f32:	1cb1      	adds	r1, r6, #2
 8014f34:	e7d3      	b.n	8014ede <__gethex+0xee>
 8014f36:	f04f 0901 	mov.w	r9, #1
 8014f3a:	e7fa      	b.n	8014f32 <__gethex+0x142>
 8014f3c:	230a      	movs	r3, #10
 8014f3e:	fb03 0202 	mla	r2, r3, r2, r0
 8014f42:	3a10      	subs	r2, #16
 8014f44:	e7d4      	b.n	8014ef0 <__gethex+0x100>
 8014f46:	4631      	mov	r1, r6
 8014f48:	e7df      	b.n	8014f0a <__gethex+0x11a>
 8014f4a:	1bf3      	subs	r3, r6, r7
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	4621      	mov	r1, r4
 8014f50:	2b07      	cmp	r3, #7
 8014f52:	dc0b      	bgt.n	8014f6c <__gethex+0x17c>
 8014f54:	ee18 0a10 	vmov	r0, s16
 8014f58:	f000 fa74 	bl	8015444 <_Balloc>
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	b940      	cbnz	r0, 8014f72 <__gethex+0x182>
 8014f60:	4b65      	ldr	r3, [pc, #404]	; (80150f8 <__gethex+0x308>)
 8014f62:	4602      	mov	r2, r0
 8014f64:	21de      	movs	r1, #222	; 0xde
 8014f66:	4865      	ldr	r0, [pc, #404]	; (80150fc <__gethex+0x30c>)
 8014f68:	f001 f8ba 	bl	80160e0 <__assert_func>
 8014f6c:	3101      	adds	r1, #1
 8014f6e:	105b      	asrs	r3, r3, #1
 8014f70:	e7ee      	b.n	8014f50 <__gethex+0x160>
 8014f72:	f100 0914 	add.w	r9, r0, #20
 8014f76:	f04f 0b00 	mov.w	fp, #0
 8014f7a:	f1ca 0301 	rsb	r3, sl, #1
 8014f7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f82:	f8cd b000 	str.w	fp, [sp]
 8014f86:	9306      	str	r3, [sp, #24]
 8014f88:	42b7      	cmp	r7, r6
 8014f8a:	d340      	bcc.n	801500e <__gethex+0x21e>
 8014f8c:	9802      	ldr	r0, [sp, #8]
 8014f8e:	9b00      	ldr	r3, [sp, #0]
 8014f90:	f840 3b04 	str.w	r3, [r0], #4
 8014f94:	eba0 0009 	sub.w	r0, r0, r9
 8014f98:	1080      	asrs	r0, r0, #2
 8014f9a:	0146      	lsls	r6, r0, #5
 8014f9c:	6120      	str	r0, [r4, #16]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f000 fb46 	bl	8015630 <__hi0bits>
 8014fa4:	1a30      	subs	r0, r6, r0
 8014fa6:	f8d8 6000 	ldr.w	r6, [r8]
 8014faa:	42b0      	cmp	r0, r6
 8014fac:	dd63      	ble.n	8015076 <__gethex+0x286>
 8014fae:	1b87      	subs	r7, r0, r6
 8014fb0:	4639      	mov	r1, r7
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	f000 fee0 	bl	8015d78 <__any_on>
 8014fb8:	4682      	mov	sl, r0
 8014fba:	b1a8      	cbz	r0, 8014fe8 <__gethex+0x1f8>
 8014fbc:	1e7b      	subs	r3, r7, #1
 8014fbe:	1159      	asrs	r1, r3, #5
 8014fc0:	f003 021f 	and.w	r2, r3, #31
 8014fc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014fc8:	f04f 0a01 	mov.w	sl, #1
 8014fcc:	fa0a f202 	lsl.w	r2, sl, r2
 8014fd0:	420a      	tst	r2, r1
 8014fd2:	d009      	beq.n	8014fe8 <__gethex+0x1f8>
 8014fd4:	4553      	cmp	r3, sl
 8014fd6:	dd05      	ble.n	8014fe4 <__gethex+0x1f4>
 8014fd8:	1eb9      	subs	r1, r7, #2
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 fecc 	bl	8015d78 <__any_on>
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d145      	bne.n	8015070 <__gethex+0x280>
 8014fe4:	f04f 0a02 	mov.w	sl, #2
 8014fe8:	4639      	mov	r1, r7
 8014fea:	4620      	mov	r0, r4
 8014fec:	f7ff fe98 	bl	8014d20 <rshift>
 8014ff0:	443d      	add	r5, r7
 8014ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ff6:	42ab      	cmp	r3, r5
 8014ff8:	da4c      	bge.n	8015094 <__gethex+0x2a4>
 8014ffa:	ee18 0a10 	vmov	r0, s16
 8014ffe:	4621      	mov	r1, r4
 8015000:	f000 fa60 	bl	80154c4 <_Bfree>
 8015004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015006:	2300      	movs	r3, #0
 8015008:	6013      	str	r3, [r2, #0]
 801500a:	27a3      	movs	r7, #163	; 0xa3
 801500c:	e785      	b.n	8014f1a <__gethex+0x12a>
 801500e:	1e73      	subs	r3, r6, #1
 8015010:	9a05      	ldr	r2, [sp, #20]
 8015012:	9303      	str	r3, [sp, #12]
 8015014:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015018:	4293      	cmp	r3, r2
 801501a:	d019      	beq.n	8015050 <__gethex+0x260>
 801501c:	f1bb 0f20 	cmp.w	fp, #32
 8015020:	d107      	bne.n	8015032 <__gethex+0x242>
 8015022:	9b02      	ldr	r3, [sp, #8]
 8015024:	9a00      	ldr	r2, [sp, #0]
 8015026:	f843 2b04 	str.w	r2, [r3], #4
 801502a:	9302      	str	r3, [sp, #8]
 801502c:	2300      	movs	r3, #0
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	469b      	mov	fp, r3
 8015032:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015036:	f7ff fec5 	bl	8014dc4 <__hexdig_fun>
 801503a:	9b00      	ldr	r3, [sp, #0]
 801503c:	f000 000f 	and.w	r0, r0, #15
 8015040:	fa00 f00b 	lsl.w	r0, r0, fp
 8015044:	4303      	orrs	r3, r0
 8015046:	9300      	str	r3, [sp, #0]
 8015048:	f10b 0b04 	add.w	fp, fp, #4
 801504c:	9b03      	ldr	r3, [sp, #12]
 801504e:	e00d      	b.n	801506c <__gethex+0x27c>
 8015050:	9b03      	ldr	r3, [sp, #12]
 8015052:	9a06      	ldr	r2, [sp, #24]
 8015054:	4413      	add	r3, r2
 8015056:	42bb      	cmp	r3, r7
 8015058:	d3e0      	bcc.n	801501c <__gethex+0x22c>
 801505a:	4618      	mov	r0, r3
 801505c:	9901      	ldr	r1, [sp, #4]
 801505e:	9307      	str	r3, [sp, #28]
 8015060:	4652      	mov	r2, sl
 8015062:	f001 f81d 	bl	80160a0 <strncmp>
 8015066:	9b07      	ldr	r3, [sp, #28]
 8015068:	2800      	cmp	r0, #0
 801506a:	d1d7      	bne.n	801501c <__gethex+0x22c>
 801506c:	461e      	mov	r6, r3
 801506e:	e78b      	b.n	8014f88 <__gethex+0x198>
 8015070:	f04f 0a03 	mov.w	sl, #3
 8015074:	e7b8      	b.n	8014fe8 <__gethex+0x1f8>
 8015076:	da0a      	bge.n	801508e <__gethex+0x29e>
 8015078:	1a37      	subs	r7, r6, r0
 801507a:	4621      	mov	r1, r4
 801507c:	ee18 0a10 	vmov	r0, s16
 8015080:	463a      	mov	r2, r7
 8015082:	f000 fc3b 	bl	80158fc <__lshift>
 8015086:	1bed      	subs	r5, r5, r7
 8015088:	4604      	mov	r4, r0
 801508a:	f100 0914 	add.w	r9, r0, #20
 801508e:	f04f 0a00 	mov.w	sl, #0
 8015092:	e7ae      	b.n	8014ff2 <__gethex+0x202>
 8015094:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015098:	42a8      	cmp	r0, r5
 801509a:	dd72      	ble.n	8015182 <__gethex+0x392>
 801509c:	1b45      	subs	r5, r0, r5
 801509e:	42ae      	cmp	r6, r5
 80150a0:	dc36      	bgt.n	8015110 <__gethex+0x320>
 80150a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80150a6:	2b02      	cmp	r3, #2
 80150a8:	d02a      	beq.n	8015100 <__gethex+0x310>
 80150aa:	2b03      	cmp	r3, #3
 80150ac:	d02c      	beq.n	8015108 <__gethex+0x318>
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d115      	bne.n	80150de <__gethex+0x2ee>
 80150b2:	42ae      	cmp	r6, r5
 80150b4:	d113      	bne.n	80150de <__gethex+0x2ee>
 80150b6:	2e01      	cmp	r6, #1
 80150b8:	d10b      	bne.n	80150d2 <__gethex+0x2e2>
 80150ba:	9a04      	ldr	r2, [sp, #16]
 80150bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80150c0:	6013      	str	r3, [r2, #0]
 80150c2:	2301      	movs	r3, #1
 80150c4:	6123      	str	r3, [r4, #16]
 80150c6:	f8c9 3000 	str.w	r3, [r9]
 80150ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80150cc:	2762      	movs	r7, #98	; 0x62
 80150ce:	601c      	str	r4, [r3, #0]
 80150d0:	e723      	b.n	8014f1a <__gethex+0x12a>
 80150d2:	1e71      	subs	r1, r6, #1
 80150d4:	4620      	mov	r0, r4
 80150d6:	f000 fe4f 	bl	8015d78 <__any_on>
 80150da:	2800      	cmp	r0, #0
 80150dc:	d1ed      	bne.n	80150ba <__gethex+0x2ca>
 80150de:	ee18 0a10 	vmov	r0, s16
 80150e2:	4621      	mov	r1, r4
 80150e4:	f000 f9ee 	bl	80154c4 <_Bfree>
 80150e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150ea:	2300      	movs	r3, #0
 80150ec:	6013      	str	r3, [r2, #0]
 80150ee:	2750      	movs	r7, #80	; 0x50
 80150f0:	e713      	b.n	8014f1a <__gethex+0x12a>
 80150f2:	bf00      	nop
 80150f4:	08016f78 	.word	0x08016f78
 80150f8:	08016efc 	.word	0x08016efc
 80150fc:	08016f0d 	.word	0x08016f0d
 8015100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015102:	2b00      	cmp	r3, #0
 8015104:	d1eb      	bne.n	80150de <__gethex+0x2ee>
 8015106:	e7d8      	b.n	80150ba <__gethex+0x2ca>
 8015108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801510a:	2b00      	cmp	r3, #0
 801510c:	d1d5      	bne.n	80150ba <__gethex+0x2ca>
 801510e:	e7e6      	b.n	80150de <__gethex+0x2ee>
 8015110:	1e6f      	subs	r7, r5, #1
 8015112:	f1ba 0f00 	cmp.w	sl, #0
 8015116:	d131      	bne.n	801517c <__gethex+0x38c>
 8015118:	b127      	cbz	r7, 8015124 <__gethex+0x334>
 801511a:	4639      	mov	r1, r7
 801511c:	4620      	mov	r0, r4
 801511e:	f000 fe2b 	bl	8015d78 <__any_on>
 8015122:	4682      	mov	sl, r0
 8015124:	117b      	asrs	r3, r7, #5
 8015126:	2101      	movs	r1, #1
 8015128:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801512c:	f007 071f 	and.w	r7, r7, #31
 8015130:	fa01 f707 	lsl.w	r7, r1, r7
 8015134:	421f      	tst	r7, r3
 8015136:	4629      	mov	r1, r5
 8015138:	4620      	mov	r0, r4
 801513a:	bf18      	it	ne
 801513c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015140:	1b76      	subs	r6, r6, r5
 8015142:	f7ff fded 	bl	8014d20 <rshift>
 8015146:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801514a:	2702      	movs	r7, #2
 801514c:	f1ba 0f00 	cmp.w	sl, #0
 8015150:	d048      	beq.n	80151e4 <__gethex+0x3f4>
 8015152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015156:	2b02      	cmp	r3, #2
 8015158:	d015      	beq.n	8015186 <__gethex+0x396>
 801515a:	2b03      	cmp	r3, #3
 801515c:	d017      	beq.n	801518e <__gethex+0x39e>
 801515e:	2b01      	cmp	r3, #1
 8015160:	d109      	bne.n	8015176 <__gethex+0x386>
 8015162:	f01a 0f02 	tst.w	sl, #2
 8015166:	d006      	beq.n	8015176 <__gethex+0x386>
 8015168:	f8d9 0000 	ldr.w	r0, [r9]
 801516c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015170:	f01a 0f01 	tst.w	sl, #1
 8015174:	d10e      	bne.n	8015194 <__gethex+0x3a4>
 8015176:	f047 0710 	orr.w	r7, r7, #16
 801517a:	e033      	b.n	80151e4 <__gethex+0x3f4>
 801517c:	f04f 0a01 	mov.w	sl, #1
 8015180:	e7d0      	b.n	8015124 <__gethex+0x334>
 8015182:	2701      	movs	r7, #1
 8015184:	e7e2      	b.n	801514c <__gethex+0x35c>
 8015186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015188:	f1c3 0301 	rsb	r3, r3, #1
 801518c:	9315      	str	r3, [sp, #84]	; 0x54
 801518e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015190:	2b00      	cmp	r3, #0
 8015192:	d0f0      	beq.n	8015176 <__gethex+0x386>
 8015194:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015198:	f104 0314 	add.w	r3, r4, #20
 801519c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80151a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80151a4:	f04f 0c00 	mov.w	ip, #0
 80151a8:	4618      	mov	r0, r3
 80151aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80151b2:	d01c      	beq.n	80151ee <__gethex+0x3fe>
 80151b4:	3201      	adds	r2, #1
 80151b6:	6002      	str	r2, [r0, #0]
 80151b8:	2f02      	cmp	r7, #2
 80151ba:	f104 0314 	add.w	r3, r4, #20
 80151be:	d13f      	bne.n	8015240 <__gethex+0x450>
 80151c0:	f8d8 2000 	ldr.w	r2, [r8]
 80151c4:	3a01      	subs	r2, #1
 80151c6:	42b2      	cmp	r2, r6
 80151c8:	d10a      	bne.n	80151e0 <__gethex+0x3f0>
 80151ca:	1171      	asrs	r1, r6, #5
 80151cc:	2201      	movs	r2, #1
 80151ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151d2:	f006 061f 	and.w	r6, r6, #31
 80151d6:	fa02 f606 	lsl.w	r6, r2, r6
 80151da:	421e      	tst	r6, r3
 80151dc:	bf18      	it	ne
 80151de:	4617      	movne	r7, r2
 80151e0:	f047 0720 	orr.w	r7, r7, #32
 80151e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151e6:	601c      	str	r4, [r3, #0]
 80151e8:	9b04      	ldr	r3, [sp, #16]
 80151ea:	601d      	str	r5, [r3, #0]
 80151ec:	e695      	b.n	8014f1a <__gethex+0x12a>
 80151ee:	4299      	cmp	r1, r3
 80151f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80151f4:	d8d8      	bhi.n	80151a8 <__gethex+0x3b8>
 80151f6:	68a3      	ldr	r3, [r4, #8]
 80151f8:	459b      	cmp	fp, r3
 80151fa:	db19      	blt.n	8015230 <__gethex+0x440>
 80151fc:	6861      	ldr	r1, [r4, #4]
 80151fe:	ee18 0a10 	vmov	r0, s16
 8015202:	3101      	adds	r1, #1
 8015204:	f000 f91e 	bl	8015444 <_Balloc>
 8015208:	4681      	mov	r9, r0
 801520a:	b918      	cbnz	r0, 8015214 <__gethex+0x424>
 801520c:	4b1a      	ldr	r3, [pc, #104]	; (8015278 <__gethex+0x488>)
 801520e:	4602      	mov	r2, r0
 8015210:	2184      	movs	r1, #132	; 0x84
 8015212:	e6a8      	b.n	8014f66 <__gethex+0x176>
 8015214:	6922      	ldr	r2, [r4, #16]
 8015216:	3202      	adds	r2, #2
 8015218:	f104 010c 	add.w	r1, r4, #12
 801521c:	0092      	lsls	r2, r2, #2
 801521e:	300c      	adds	r0, #12
 8015220:	f7fd f88a 	bl	8012338 <memcpy>
 8015224:	4621      	mov	r1, r4
 8015226:	ee18 0a10 	vmov	r0, s16
 801522a:	f000 f94b 	bl	80154c4 <_Bfree>
 801522e:	464c      	mov	r4, r9
 8015230:	6923      	ldr	r3, [r4, #16]
 8015232:	1c5a      	adds	r2, r3, #1
 8015234:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015238:	6122      	str	r2, [r4, #16]
 801523a:	2201      	movs	r2, #1
 801523c:	615a      	str	r2, [r3, #20]
 801523e:	e7bb      	b.n	80151b8 <__gethex+0x3c8>
 8015240:	6922      	ldr	r2, [r4, #16]
 8015242:	455a      	cmp	r2, fp
 8015244:	dd0b      	ble.n	801525e <__gethex+0x46e>
 8015246:	2101      	movs	r1, #1
 8015248:	4620      	mov	r0, r4
 801524a:	f7ff fd69 	bl	8014d20 <rshift>
 801524e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015252:	3501      	adds	r5, #1
 8015254:	42ab      	cmp	r3, r5
 8015256:	f6ff aed0 	blt.w	8014ffa <__gethex+0x20a>
 801525a:	2701      	movs	r7, #1
 801525c:	e7c0      	b.n	80151e0 <__gethex+0x3f0>
 801525e:	f016 061f 	ands.w	r6, r6, #31
 8015262:	d0fa      	beq.n	801525a <__gethex+0x46a>
 8015264:	449a      	add	sl, r3
 8015266:	f1c6 0620 	rsb	r6, r6, #32
 801526a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801526e:	f000 f9df 	bl	8015630 <__hi0bits>
 8015272:	42b0      	cmp	r0, r6
 8015274:	dbe7      	blt.n	8015246 <__gethex+0x456>
 8015276:	e7f0      	b.n	801525a <__gethex+0x46a>
 8015278:	08016efc 	.word	0x08016efc

0801527c <L_shift>:
 801527c:	f1c2 0208 	rsb	r2, r2, #8
 8015280:	0092      	lsls	r2, r2, #2
 8015282:	b570      	push	{r4, r5, r6, lr}
 8015284:	f1c2 0620 	rsb	r6, r2, #32
 8015288:	6843      	ldr	r3, [r0, #4]
 801528a:	6804      	ldr	r4, [r0, #0]
 801528c:	fa03 f506 	lsl.w	r5, r3, r6
 8015290:	432c      	orrs	r4, r5
 8015292:	40d3      	lsrs	r3, r2
 8015294:	6004      	str	r4, [r0, #0]
 8015296:	f840 3f04 	str.w	r3, [r0, #4]!
 801529a:	4288      	cmp	r0, r1
 801529c:	d3f4      	bcc.n	8015288 <L_shift+0xc>
 801529e:	bd70      	pop	{r4, r5, r6, pc}

080152a0 <__match>:
 80152a0:	b530      	push	{r4, r5, lr}
 80152a2:	6803      	ldr	r3, [r0, #0]
 80152a4:	3301      	adds	r3, #1
 80152a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152aa:	b914      	cbnz	r4, 80152b2 <__match+0x12>
 80152ac:	6003      	str	r3, [r0, #0]
 80152ae:	2001      	movs	r0, #1
 80152b0:	bd30      	pop	{r4, r5, pc}
 80152b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80152ba:	2d19      	cmp	r5, #25
 80152bc:	bf98      	it	ls
 80152be:	3220      	addls	r2, #32
 80152c0:	42a2      	cmp	r2, r4
 80152c2:	d0f0      	beq.n	80152a6 <__match+0x6>
 80152c4:	2000      	movs	r0, #0
 80152c6:	e7f3      	b.n	80152b0 <__match+0x10>

080152c8 <__hexnan>:
 80152c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152cc:	680b      	ldr	r3, [r1, #0]
 80152ce:	6801      	ldr	r1, [r0, #0]
 80152d0:	115e      	asrs	r6, r3, #5
 80152d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80152d6:	f013 031f 	ands.w	r3, r3, #31
 80152da:	b087      	sub	sp, #28
 80152dc:	bf18      	it	ne
 80152de:	3604      	addne	r6, #4
 80152e0:	2500      	movs	r5, #0
 80152e2:	1f37      	subs	r7, r6, #4
 80152e4:	4682      	mov	sl, r0
 80152e6:	4690      	mov	r8, r2
 80152e8:	9301      	str	r3, [sp, #4]
 80152ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80152ee:	46b9      	mov	r9, r7
 80152f0:	463c      	mov	r4, r7
 80152f2:	9502      	str	r5, [sp, #8]
 80152f4:	46ab      	mov	fp, r5
 80152f6:	784a      	ldrb	r2, [r1, #1]
 80152f8:	1c4b      	adds	r3, r1, #1
 80152fa:	9303      	str	r3, [sp, #12]
 80152fc:	b342      	cbz	r2, 8015350 <__hexnan+0x88>
 80152fe:	4610      	mov	r0, r2
 8015300:	9105      	str	r1, [sp, #20]
 8015302:	9204      	str	r2, [sp, #16]
 8015304:	f7ff fd5e 	bl	8014dc4 <__hexdig_fun>
 8015308:	2800      	cmp	r0, #0
 801530a:	d14f      	bne.n	80153ac <__hexnan+0xe4>
 801530c:	9a04      	ldr	r2, [sp, #16]
 801530e:	9905      	ldr	r1, [sp, #20]
 8015310:	2a20      	cmp	r2, #32
 8015312:	d818      	bhi.n	8015346 <__hexnan+0x7e>
 8015314:	9b02      	ldr	r3, [sp, #8]
 8015316:	459b      	cmp	fp, r3
 8015318:	dd13      	ble.n	8015342 <__hexnan+0x7a>
 801531a:	454c      	cmp	r4, r9
 801531c:	d206      	bcs.n	801532c <__hexnan+0x64>
 801531e:	2d07      	cmp	r5, #7
 8015320:	dc04      	bgt.n	801532c <__hexnan+0x64>
 8015322:	462a      	mov	r2, r5
 8015324:	4649      	mov	r1, r9
 8015326:	4620      	mov	r0, r4
 8015328:	f7ff ffa8 	bl	801527c <L_shift>
 801532c:	4544      	cmp	r4, r8
 801532e:	d950      	bls.n	80153d2 <__hexnan+0x10a>
 8015330:	2300      	movs	r3, #0
 8015332:	f1a4 0904 	sub.w	r9, r4, #4
 8015336:	f844 3c04 	str.w	r3, [r4, #-4]
 801533a:	f8cd b008 	str.w	fp, [sp, #8]
 801533e:	464c      	mov	r4, r9
 8015340:	461d      	mov	r5, r3
 8015342:	9903      	ldr	r1, [sp, #12]
 8015344:	e7d7      	b.n	80152f6 <__hexnan+0x2e>
 8015346:	2a29      	cmp	r2, #41	; 0x29
 8015348:	d156      	bne.n	80153f8 <__hexnan+0x130>
 801534a:	3102      	adds	r1, #2
 801534c:	f8ca 1000 	str.w	r1, [sl]
 8015350:	f1bb 0f00 	cmp.w	fp, #0
 8015354:	d050      	beq.n	80153f8 <__hexnan+0x130>
 8015356:	454c      	cmp	r4, r9
 8015358:	d206      	bcs.n	8015368 <__hexnan+0xa0>
 801535a:	2d07      	cmp	r5, #7
 801535c:	dc04      	bgt.n	8015368 <__hexnan+0xa0>
 801535e:	462a      	mov	r2, r5
 8015360:	4649      	mov	r1, r9
 8015362:	4620      	mov	r0, r4
 8015364:	f7ff ff8a 	bl	801527c <L_shift>
 8015368:	4544      	cmp	r4, r8
 801536a:	d934      	bls.n	80153d6 <__hexnan+0x10e>
 801536c:	f1a8 0204 	sub.w	r2, r8, #4
 8015370:	4623      	mov	r3, r4
 8015372:	f853 1b04 	ldr.w	r1, [r3], #4
 8015376:	f842 1f04 	str.w	r1, [r2, #4]!
 801537a:	429f      	cmp	r7, r3
 801537c:	d2f9      	bcs.n	8015372 <__hexnan+0xaa>
 801537e:	1b3b      	subs	r3, r7, r4
 8015380:	f023 0303 	bic.w	r3, r3, #3
 8015384:	3304      	adds	r3, #4
 8015386:	3401      	adds	r4, #1
 8015388:	3e03      	subs	r6, #3
 801538a:	42b4      	cmp	r4, r6
 801538c:	bf88      	it	hi
 801538e:	2304      	movhi	r3, #4
 8015390:	4443      	add	r3, r8
 8015392:	2200      	movs	r2, #0
 8015394:	f843 2b04 	str.w	r2, [r3], #4
 8015398:	429f      	cmp	r7, r3
 801539a:	d2fb      	bcs.n	8015394 <__hexnan+0xcc>
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	b91b      	cbnz	r3, 80153a8 <__hexnan+0xe0>
 80153a0:	4547      	cmp	r7, r8
 80153a2:	d127      	bne.n	80153f4 <__hexnan+0x12c>
 80153a4:	2301      	movs	r3, #1
 80153a6:	603b      	str	r3, [r7, #0]
 80153a8:	2005      	movs	r0, #5
 80153aa:	e026      	b.n	80153fa <__hexnan+0x132>
 80153ac:	3501      	adds	r5, #1
 80153ae:	2d08      	cmp	r5, #8
 80153b0:	f10b 0b01 	add.w	fp, fp, #1
 80153b4:	dd06      	ble.n	80153c4 <__hexnan+0xfc>
 80153b6:	4544      	cmp	r4, r8
 80153b8:	d9c3      	bls.n	8015342 <__hexnan+0x7a>
 80153ba:	2300      	movs	r3, #0
 80153bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80153c0:	2501      	movs	r5, #1
 80153c2:	3c04      	subs	r4, #4
 80153c4:	6822      	ldr	r2, [r4, #0]
 80153c6:	f000 000f 	and.w	r0, r0, #15
 80153ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80153ce:	6022      	str	r2, [r4, #0]
 80153d0:	e7b7      	b.n	8015342 <__hexnan+0x7a>
 80153d2:	2508      	movs	r5, #8
 80153d4:	e7b5      	b.n	8015342 <__hexnan+0x7a>
 80153d6:	9b01      	ldr	r3, [sp, #4]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d0df      	beq.n	801539c <__hexnan+0xd4>
 80153dc:	f04f 32ff 	mov.w	r2, #4294967295
 80153e0:	f1c3 0320 	rsb	r3, r3, #32
 80153e4:	fa22 f303 	lsr.w	r3, r2, r3
 80153e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80153ec:	401a      	ands	r2, r3
 80153ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80153f2:	e7d3      	b.n	801539c <__hexnan+0xd4>
 80153f4:	3f04      	subs	r7, #4
 80153f6:	e7d1      	b.n	801539c <__hexnan+0xd4>
 80153f8:	2004      	movs	r0, #4
 80153fa:	b007      	add	sp, #28
 80153fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015400 <_localeconv_r>:
 8015400:	4800      	ldr	r0, [pc, #0]	; (8015404 <_localeconv_r+0x4>)
 8015402:	4770      	bx	lr
 8015404:	200002f4 	.word	0x200002f4

08015408 <__ascii_mbtowc>:
 8015408:	b082      	sub	sp, #8
 801540a:	b901      	cbnz	r1, 801540e <__ascii_mbtowc+0x6>
 801540c:	a901      	add	r1, sp, #4
 801540e:	b142      	cbz	r2, 8015422 <__ascii_mbtowc+0x1a>
 8015410:	b14b      	cbz	r3, 8015426 <__ascii_mbtowc+0x1e>
 8015412:	7813      	ldrb	r3, [r2, #0]
 8015414:	600b      	str	r3, [r1, #0]
 8015416:	7812      	ldrb	r2, [r2, #0]
 8015418:	1e10      	subs	r0, r2, #0
 801541a:	bf18      	it	ne
 801541c:	2001      	movne	r0, #1
 801541e:	b002      	add	sp, #8
 8015420:	4770      	bx	lr
 8015422:	4610      	mov	r0, r2
 8015424:	e7fb      	b.n	801541e <__ascii_mbtowc+0x16>
 8015426:	f06f 0001 	mvn.w	r0, #1
 801542a:	e7f8      	b.n	801541e <__ascii_mbtowc+0x16>

0801542c <__malloc_lock>:
 801542c:	4801      	ldr	r0, [pc, #4]	; (8015434 <__malloc_lock+0x8>)
 801542e:	f000 be88 	b.w	8016142 <__retarget_lock_acquire_recursive>
 8015432:	bf00      	nop
 8015434:	20003ee4 	.word	0x20003ee4

08015438 <__malloc_unlock>:
 8015438:	4801      	ldr	r0, [pc, #4]	; (8015440 <__malloc_unlock+0x8>)
 801543a:	f000 be83 	b.w	8016144 <__retarget_lock_release_recursive>
 801543e:	bf00      	nop
 8015440:	20003ee4 	.word	0x20003ee4

08015444 <_Balloc>:
 8015444:	b570      	push	{r4, r5, r6, lr}
 8015446:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015448:	4604      	mov	r4, r0
 801544a:	460d      	mov	r5, r1
 801544c:	b976      	cbnz	r6, 801546c <_Balloc+0x28>
 801544e:	2010      	movs	r0, #16
 8015450:	f7fc ff62 	bl	8012318 <malloc>
 8015454:	4602      	mov	r2, r0
 8015456:	6260      	str	r0, [r4, #36]	; 0x24
 8015458:	b920      	cbnz	r0, 8015464 <_Balloc+0x20>
 801545a:	4b18      	ldr	r3, [pc, #96]	; (80154bc <_Balloc+0x78>)
 801545c:	4818      	ldr	r0, [pc, #96]	; (80154c0 <_Balloc+0x7c>)
 801545e:	2166      	movs	r1, #102	; 0x66
 8015460:	f000 fe3e 	bl	80160e0 <__assert_func>
 8015464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015468:	6006      	str	r6, [r0, #0]
 801546a:	60c6      	str	r6, [r0, #12]
 801546c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801546e:	68f3      	ldr	r3, [r6, #12]
 8015470:	b183      	cbz	r3, 8015494 <_Balloc+0x50>
 8015472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015474:	68db      	ldr	r3, [r3, #12]
 8015476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801547a:	b9b8      	cbnz	r0, 80154ac <_Balloc+0x68>
 801547c:	2101      	movs	r1, #1
 801547e:	fa01 f605 	lsl.w	r6, r1, r5
 8015482:	1d72      	adds	r2, r6, #5
 8015484:	0092      	lsls	r2, r2, #2
 8015486:	4620      	mov	r0, r4
 8015488:	f000 fc97 	bl	8015dba <_calloc_r>
 801548c:	b160      	cbz	r0, 80154a8 <_Balloc+0x64>
 801548e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015492:	e00e      	b.n	80154b2 <_Balloc+0x6e>
 8015494:	2221      	movs	r2, #33	; 0x21
 8015496:	2104      	movs	r1, #4
 8015498:	4620      	mov	r0, r4
 801549a:	f000 fc8e 	bl	8015dba <_calloc_r>
 801549e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154a0:	60f0      	str	r0, [r6, #12]
 80154a2:	68db      	ldr	r3, [r3, #12]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d1e4      	bne.n	8015472 <_Balloc+0x2e>
 80154a8:	2000      	movs	r0, #0
 80154aa:	bd70      	pop	{r4, r5, r6, pc}
 80154ac:	6802      	ldr	r2, [r0, #0]
 80154ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154b2:	2300      	movs	r3, #0
 80154b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80154b8:	e7f7      	b.n	80154aa <_Balloc+0x66>
 80154ba:	bf00      	nop
 80154bc:	08016e86 	.word	0x08016e86
 80154c0:	08016f8c 	.word	0x08016f8c

080154c4 <_Bfree>:
 80154c4:	b570      	push	{r4, r5, r6, lr}
 80154c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80154c8:	4605      	mov	r5, r0
 80154ca:	460c      	mov	r4, r1
 80154cc:	b976      	cbnz	r6, 80154ec <_Bfree+0x28>
 80154ce:	2010      	movs	r0, #16
 80154d0:	f7fc ff22 	bl	8012318 <malloc>
 80154d4:	4602      	mov	r2, r0
 80154d6:	6268      	str	r0, [r5, #36]	; 0x24
 80154d8:	b920      	cbnz	r0, 80154e4 <_Bfree+0x20>
 80154da:	4b09      	ldr	r3, [pc, #36]	; (8015500 <_Bfree+0x3c>)
 80154dc:	4809      	ldr	r0, [pc, #36]	; (8015504 <_Bfree+0x40>)
 80154de:	218a      	movs	r1, #138	; 0x8a
 80154e0:	f000 fdfe 	bl	80160e0 <__assert_func>
 80154e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80154e8:	6006      	str	r6, [r0, #0]
 80154ea:	60c6      	str	r6, [r0, #12]
 80154ec:	b13c      	cbz	r4, 80154fe <_Bfree+0x3a>
 80154ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80154f0:	6862      	ldr	r2, [r4, #4]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154f8:	6021      	str	r1, [r4, #0]
 80154fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80154fe:	bd70      	pop	{r4, r5, r6, pc}
 8015500:	08016e86 	.word	0x08016e86
 8015504:	08016f8c 	.word	0x08016f8c

08015508 <__multadd>:
 8015508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801550c:	690e      	ldr	r6, [r1, #16]
 801550e:	4607      	mov	r7, r0
 8015510:	4698      	mov	r8, r3
 8015512:	460c      	mov	r4, r1
 8015514:	f101 0014 	add.w	r0, r1, #20
 8015518:	2300      	movs	r3, #0
 801551a:	6805      	ldr	r5, [r0, #0]
 801551c:	b2a9      	uxth	r1, r5
 801551e:	fb02 8101 	mla	r1, r2, r1, r8
 8015522:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015526:	0c2d      	lsrs	r5, r5, #16
 8015528:	fb02 c505 	mla	r5, r2, r5, ip
 801552c:	b289      	uxth	r1, r1
 801552e:	3301      	adds	r3, #1
 8015530:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015534:	429e      	cmp	r6, r3
 8015536:	f840 1b04 	str.w	r1, [r0], #4
 801553a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801553e:	dcec      	bgt.n	801551a <__multadd+0x12>
 8015540:	f1b8 0f00 	cmp.w	r8, #0
 8015544:	d022      	beq.n	801558c <__multadd+0x84>
 8015546:	68a3      	ldr	r3, [r4, #8]
 8015548:	42b3      	cmp	r3, r6
 801554a:	dc19      	bgt.n	8015580 <__multadd+0x78>
 801554c:	6861      	ldr	r1, [r4, #4]
 801554e:	4638      	mov	r0, r7
 8015550:	3101      	adds	r1, #1
 8015552:	f7ff ff77 	bl	8015444 <_Balloc>
 8015556:	4605      	mov	r5, r0
 8015558:	b928      	cbnz	r0, 8015566 <__multadd+0x5e>
 801555a:	4602      	mov	r2, r0
 801555c:	4b0d      	ldr	r3, [pc, #52]	; (8015594 <__multadd+0x8c>)
 801555e:	480e      	ldr	r0, [pc, #56]	; (8015598 <__multadd+0x90>)
 8015560:	21b5      	movs	r1, #181	; 0xb5
 8015562:	f000 fdbd 	bl	80160e0 <__assert_func>
 8015566:	6922      	ldr	r2, [r4, #16]
 8015568:	3202      	adds	r2, #2
 801556a:	f104 010c 	add.w	r1, r4, #12
 801556e:	0092      	lsls	r2, r2, #2
 8015570:	300c      	adds	r0, #12
 8015572:	f7fc fee1 	bl	8012338 <memcpy>
 8015576:	4621      	mov	r1, r4
 8015578:	4638      	mov	r0, r7
 801557a:	f7ff ffa3 	bl	80154c4 <_Bfree>
 801557e:	462c      	mov	r4, r5
 8015580:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015584:	3601      	adds	r6, #1
 8015586:	f8c3 8014 	str.w	r8, [r3, #20]
 801558a:	6126      	str	r6, [r4, #16]
 801558c:	4620      	mov	r0, r4
 801558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015592:	bf00      	nop
 8015594:	08016efc 	.word	0x08016efc
 8015598:	08016f8c 	.word	0x08016f8c

0801559c <__s2b>:
 801559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155a0:	460c      	mov	r4, r1
 80155a2:	4615      	mov	r5, r2
 80155a4:	461f      	mov	r7, r3
 80155a6:	2209      	movs	r2, #9
 80155a8:	3308      	adds	r3, #8
 80155aa:	4606      	mov	r6, r0
 80155ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80155b0:	2100      	movs	r1, #0
 80155b2:	2201      	movs	r2, #1
 80155b4:	429a      	cmp	r2, r3
 80155b6:	db09      	blt.n	80155cc <__s2b+0x30>
 80155b8:	4630      	mov	r0, r6
 80155ba:	f7ff ff43 	bl	8015444 <_Balloc>
 80155be:	b940      	cbnz	r0, 80155d2 <__s2b+0x36>
 80155c0:	4602      	mov	r2, r0
 80155c2:	4b19      	ldr	r3, [pc, #100]	; (8015628 <__s2b+0x8c>)
 80155c4:	4819      	ldr	r0, [pc, #100]	; (801562c <__s2b+0x90>)
 80155c6:	21ce      	movs	r1, #206	; 0xce
 80155c8:	f000 fd8a 	bl	80160e0 <__assert_func>
 80155cc:	0052      	lsls	r2, r2, #1
 80155ce:	3101      	adds	r1, #1
 80155d0:	e7f0      	b.n	80155b4 <__s2b+0x18>
 80155d2:	9b08      	ldr	r3, [sp, #32]
 80155d4:	6143      	str	r3, [r0, #20]
 80155d6:	2d09      	cmp	r5, #9
 80155d8:	f04f 0301 	mov.w	r3, #1
 80155dc:	6103      	str	r3, [r0, #16]
 80155de:	dd16      	ble.n	801560e <__s2b+0x72>
 80155e0:	f104 0909 	add.w	r9, r4, #9
 80155e4:	46c8      	mov	r8, r9
 80155e6:	442c      	add	r4, r5
 80155e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80155ec:	4601      	mov	r1, r0
 80155ee:	3b30      	subs	r3, #48	; 0x30
 80155f0:	220a      	movs	r2, #10
 80155f2:	4630      	mov	r0, r6
 80155f4:	f7ff ff88 	bl	8015508 <__multadd>
 80155f8:	45a0      	cmp	r8, r4
 80155fa:	d1f5      	bne.n	80155e8 <__s2b+0x4c>
 80155fc:	f1a5 0408 	sub.w	r4, r5, #8
 8015600:	444c      	add	r4, r9
 8015602:	1b2d      	subs	r5, r5, r4
 8015604:	1963      	adds	r3, r4, r5
 8015606:	42bb      	cmp	r3, r7
 8015608:	db04      	blt.n	8015614 <__s2b+0x78>
 801560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801560e:	340a      	adds	r4, #10
 8015610:	2509      	movs	r5, #9
 8015612:	e7f6      	b.n	8015602 <__s2b+0x66>
 8015614:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015618:	4601      	mov	r1, r0
 801561a:	3b30      	subs	r3, #48	; 0x30
 801561c:	220a      	movs	r2, #10
 801561e:	4630      	mov	r0, r6
 8015620:	f7ff ff72 	bl	8015508 <__multadd>
 8015624:	e7ee      	b.n	8015604 <__s2b+0x68>
 8015626:	bf00      	nop
 8015628:	08016efc 	.word	0x08016efc
 801562c:	08016f8c 	.word	0x08016f8c

08015630 <__hi0bits>:
 8015630:	0c03      	lsrs	r3, r0, #16
 8015632:	041b      	lsls	r3, r3, #16
 8015634:	b9d3      	cbnz	r3, 801566c <__hi0bits+0x3c>
 8015636:	0400      	lsls	r0, r0, #16
 8015638:	2310      	movs	r3, #16
 801563a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801563e:	bf04      	itt	eq
 8015640:	0200      	lsleq	r0, r0, #8
 8015642:	3308      	addeq	r3, #8
 8015644:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015648:	bf04      	itt	eq
 801564a:	0100      	lsleq	r0, r0, #4
 801564c:	3304      	addeq	r3, #4
 801564e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015652:	bf04      	itt	eq
 8015654:	0080      	lsleq	r0, r0, #2
 8015656:	3302      	addeq	r3, #2
 8015658:	2800      	cmp	r0, #0
 801565a:	db05      	blt.n	8015668 <__hi0bits+0x38>
 801565c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015660:	f103 0301 	add.w	r3, r3, #1
 8015664:	bf08      	it	eq
 8015666:	2320      	moveq	r3, #32
 8015668:	4618      	mov	r0, r3
 801566a:	4770      	bx	lr
 801566c:	2300      	movs	r3, #0
 801566e:	e7e4      	b.n	801563a <__hi0bits+0xa>

08015670 <__lo0bits>:
 8015670:	6803      	ldr	r3, [r0, #0]
 8015672:	f013 0207 	ands.w	r2, r3, #7
 8015676:	4601      	mov	r1, r0
 8015678:	d00b      	beq.n	8015692 <__lo0bits+0x22>
 801567a:	07da      	lsls	r2, r3, #31
 801567c:	d424      	bmi.n	80156c8 <__lo0bits+0x58>
 801567e:	0798      	lsls	r0, r3, #30
 8015680:	bf49      	itett	mi
 8015682:	085b      	lsrmi	r3, r3, #1
 8015684:	089b      	lsrpl	r3, r3, #2
 8015686:	2001      	movmi	r0, #1
 8015688:	600b      	strmi	r3, [r1, #0]
 801568a:	bf5c      	itt	pl
 801568c:	600b      	strpl	r3, [r1, #0]
 801568e:	2002      	movpl	r0, #2
 8015690:	4770      	bx	lr
 8015692:	b298      	uxth	r0, r3
 8015694:	b9b0      	cbnz	r0, 80156c4 <__lo0bits+0x54>
 8015696:	0c1b      	lsrs	r3, r3, #16
 8015698:	2010      	movs	r0, #16
 801569a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801569e:	bf04      	itt	eq
 80156a0:	0a1b      	lsreq	r3, r3, #8
 80156a2:	3008      	addeq	r0, #8
 80156a4:	071a      	lsls	r2, r3, #28
 80156a6:	bf04      	itt	eq
 80156a8:	091b      	lsreq	r3, r3, #4
 80156aa:	3004      	addeq	r0, #4
 80156ac:	079a      	lsls	r2, r3, #30
 80156ae:	bf04      	itt	eq
 80156b0:	089b      	lsreq	r3, r3, #2
 80156b2:	3002      	addeq	r0, #2
 80156b4:	07da      	lsls	r2, r3, #31
 80156b6:	d403      	bmi.n	80156c0 <__lo0bits+0x50>
 80156b8:	085b      	lsrs	r3, r3, #1
 80156ba:	f100 0001 	add.w	r0, r0, #1
 80156be:	d005      	beq.n	80156cc <__lo0bits+0x5c>
 80156c0:	600b      	str	r3, [r1, #0]
 80156c2:	4770      	bx	lr
 80156c4:	4610      	mov	r0, r2
 80156c6:	e7e8      	b.n	801569a <__lo0bits+0x2a>
 80156c8:	2000      	movs	r0, #0
 80156ca:	4770      	bx	lr
 80156cc:	2020      	movs	r0, #32
 80156ce:	4770      	bx	lr

080156d0 <__i2b>:
 80156d0:	b510      	push	{r4, lr}
 80156d2:	460c      	mov	r4, r1
 80156d4:	2101      	movs	r1, #1
 80156d6:	f7ff feb5 	bl	8015444 <_Balloc>
 80156da:	4602      	mov	r2, r0
 80156dc:	b928      	cbnz	r0, 80156ea <__i2b+0x1a>
 80156de:	4b05      	ldr	r3, [pc, #20]	; (80156f4 <__i2b+0x24>)
 80156e0:	4805      	ldr	r0, [pc, #20]	; (80156f8 <__i2b+0x28>)
 80156e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80156e6:	f000 fcfb 	bl	80160e0 <__assert_func>
 80156ea:	2301      	movs	r3, #1
 80156ec:	6144      	str	r4, [r0, #20]
 80156ee:	6103      	str	r3, [r0, #16]
 80156f0:	bd10      	pop	{r4, pc}
 80156f2:	bf00      	nop
 80156f4:	08016efc 	.word	0x08016efc
 80156f8:	08016f8c 	.word	0x08016f8c

080156fc <__multiply>:
 80156fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015700:	4614      	mov	r4, r2
 8015702:	690a      	ldr	r2, [r1, #16]
 8015704:	6923      	ldr	r3, [r4, #16]
 8015706:	429a      	cmp	r2, r3
 8015708:	bfb8      	it	lt
 801570a:	460b      	movlt	r3, r1
 801570c:	460d      	mov	r5, r1
 801570e:	bfbc      	itt	lt
 8015710:	4625      	movlt	r5, r4
 8015712:	461c      	movlt	r4, r3
 8015714:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015718:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801571c:	68ab      	ldr	r3, [r5, #8]
 801571e:	6869      	ldr	r1, [r5, #4]
 8015720:	eb0a 0709 	add.w	r7, sl, r9
 8015724:	42bb      	cmp	r3, r7
 8015726:	b085      	sub	sp, #20
 8015728:	bfb8      	it	lt
 801572a:	3101      	addlt	r1, #1
 801572c:	f7ff fe8a 	bl	8015444 <_Balloc>
 8015730:	b930      	cbnz	r0, 8015740 <__multiply+0x44>
 8015732:	4602      	mov	r2, r0
 8015734:	4b42      	ldr	r3, [pc, #264]	; (8015840 <__multiply+0x144>)
 8015736:	4843      	ldr	r0, [pc, #268]	; (8015844 <__multiply+0x148>)
 8015738:	f240 115d 	movw	r1, #349	; 0x15d
 801573c:	f000 fcd0 	bl	80160e0 <__assert_func>
 8015740:	f100 0614 	add.w	r6, r0, #20
 8015744:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015748:	4633      	mov	r3, r6
 801574a:	2200      	movs	r2, #0
 801574c:	4543      	cmp	r3, r8
 801574e:	d31e      	bcc.n	801578e <__multiply+0x92>
 8015750:	f105 0c14 	add.w	ip, r5, #20
 8015754:	f104 0314 	add.w	r3, r4, #20
 8015758:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801575c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015760:	9202      	str	r2, [sp, #8]
 8015762:	ebac 0205 	sub.w	r2, ip, r5
 8015766:	3a15      	subs	r2, #21
 8015768:	f022 0203 	bic.w	r2, r2, #3
 801576c:	3204      	adds	r2, #4
 801576e:	f105 0115 	add.w	r1, r5, #21
 8015772:	458c      	cmp	ip, r1
 8015774:	bf38      	it	cc
 8015776:	2204      	movcc	r2, #4
 8015778:	9201      	str	r2, [sp, #4]
 801577a:	9a02      	ldr	r2, [sp, #8]
 801577c:	9303      	str	r3, [sp, #12]
 801577e:	429a      	cmp	r2, r3
 8015780:	d808      	bhi.n	8015794 <__multiply+0x98>
 8015782:	2f00      	cmp	r7, #0
 8015784:	dc55      	bgt.n	8015832 <__multiply+0x136>
 8015786:	6107      	str	r7, [r0, #16]
 8015788:	b005      	add	sp, #20
 801578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801578e:	f843 2b04 	str.w	r2, [r3], #4
 8015792:	e7db      	b.n	801574c <__multiply+0x50>
 8015794:	f8b3 a000 	ldrh.w	sl, [r3]
 8015798:	f1ba 0f00 	cmp.w	sl, #0
 801579c:	d020      	beq.n	80157e0 <__multiply+0xe4>
 801579e:	f105 0e14 	add.w	lr, r5, #20
 80157a2:	46b1      	mov	r9, r6
 80157a4:	2200      	movs	r2, #0
 80157a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80157aa:	f8d9 b000 	ldr.w	fp, [r9]
 80157ae:	b2a1      	uxth	r1, r4
 80157b0:	fa1f fb8b 	uxth.w	fp, fp
 80157b4:	fb0a b101 	mla	r1, sl, r1, fp
 80157b8:	4411      	add	r1, r2
 80157ba:	f8d9 2000 	ldr.w	r2, [r9]
 80157be:	0c24      	lsrs	r4, r4, #16
 80157c0:	0c12      	lsrs	r2, r2, #16
 80157c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80157c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80157ca:	b289      	uxth	r1, r1
 80157cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80157d0:	45f4      	cmp	ip, lr
 80157d2:	f849 1b04 	str.w	r1, [r9], #4
 80157d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80157da:	d8e4      	bhi.n	80157a6 <__multiply+0xaa>
 80157dc:	9901      	ldr	r1, [sp, #4]
 80157de:	5072      	str	r2, [r6, r1]
 80157e0:	9a03      	ldr	r2, [sp, #12]
 80157e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80157e6:	3304      	adds	r3, #4
 80157e8:	f1b9 0f00 	cmp.w	r9, #0
 80157ec:	d01f      	beq.n	801582e <__multiply+0x132>
 80157ee:	6834      	ldr	r4, [r6, #0]
 80157f0:	f105 0114 	add.w	r1, r5, #20
 80157f4:	46b6      	mov	lr, r6
 80157f6:	f04f 0a00 	mov.w	sl, #0
 80157fa:	880a      	ldrh	r2, [r1, #0]
 80157fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015800:	fb09 b202 	mla	r2, r9, r2, fp
 8015804:	4492      	add	sl, r2
 8015806:	b2a4      	uxth	r4, r4
 8015808:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801580c:	f84e 4b04 	str.w	r4, [lr], #4
 8015810:	f851 4b04 	ldr.w	r4, [r1], #4
 8015814:	f8be 2000 	ldrh.w	r2, [lr]
 8015818:	0c24      	lsrs	r4, r4, #16
 801581a:	fb09 2404 	mla	r4, r9, r4, r2
 801581e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015822:	458c      	cmp	ip, r1
 8015824:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015828:	d8e7      	bhi.n	80157fa <__multiply+0xfe>
 801582a:	9a01      	ldr	r2, [sp, #4]
 801582c:	50b4      	str	r4, [r6, r2]
 801582e:	3604      	adds	r6, #4
 8015830:	e7a3      	b.n	801577a <__multiply+0x7e>
 8015832:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015836:	2b00      	cmp	r3, #0
 8015838:	d1a5      	bne.n	8015786 <__multiply+0x8a>
 801583a:	3f01      	subs	r7, #1
 801583c:	e7a1      	b.n	8015782 <__multiply+0x86>
 801583e:	bf00      	nop
 8015840:	08016efc 	.word	0x08016efc
 8015844:	08016f8c 	.word	0x08016f8c

08015848 <__pow5mult>:
 8015848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801584c:	4615      	mov	r5, r2
 801584e:	f012 0203 	ands.w	r2, r2, #3
 8015852:	4606      	mov	r6, r0
 8015854:	460f      	mov	r7, r1
 8015856:	d007      	beq.n	8015868 <__pow5mult+0x20>
 8015858:	4c25      	ldr	r4, [pc, #148]	; (80158f0 <__pow5mult+0xa8>)
 801585a:	3a01      	subs	r2, #1
 801585c:	2300      	movs	r3, #0
 801585e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015862:	f7ff fe51 	bl	8015508 <__multadd>
 8015866:	4607      	mov	r7, r0
 8015868:	10ad      	asrs	r5, r5, #2
 801586a:	d03d      	beq.n	80158e8 <__pow5mult+0xa0>
 801586c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801586e:	b97c      	cbnz	r4, 8015890 <__pow5mult+0x48>
 8015870:	2010      	movs	r0, #16
 8015872:	f7fc fd51 	bl	8012318 <malloc>
 8015876:	4602      	mov	r2, r0
 8015878:	6270      	str	r0, [r6, #36]	; 0x24
 801587a:	b928      	cbnz	r0, 8015888 <__pow5mult+0x40>
 801587c:	4b1d      	ldr	r3, [pc, #116]	; (80158f4 <__pow5mult+0xac>)
 801587e:	481e      	ldr	r0, [pc, #120]	; (80158f8 <__pow5mult+0xb0>)
 8015880:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015884:	f000 fc2c 	bl	80160e0 <__assert_func>
 8015888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801588c:	6004      	str	r4, [r0, #0]
 801588e:	60c4      	str	r4, [r0, #12]
 8015890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015898:	b94c      	cbnz	r4, 80158ae <__pow5mult+0x66>
 801589a:	f240 2171 	movw	r1, #625	; 0x271
 801589e:	4630      	mov	r0, r6
 80158a0:	f7ff ff16 	bl	80156d0 <__i2b>
 80158a4:	2300      	movs	r3, #0
 80158a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80158aa:	4604      	mov	r4, r0
 80158ac:	6003      	str	r3, [r0, #0]
 80158ae:	f04f 0900 	mov.w	r9, #0
 80158b2:	07eb      	lsls	r3, r5, #31
 80158b4:	d50a      	bpl.n	80158cc <__pow5mult+0x84>
 80158b6:	4639      	mov	r1, r7
 80158b8:	4622      	mov	r2, r4
 80158ba:	4630      	mov	r0, r6
 80158bc:	f7ff ff1e 	bl	80156fc <__multiply>
 80158c0:	4639      	mov	r1, r7
 80158c2:	4680      	mov	r8, r0
 80158c4:	4630      	mov	r0, r6
 80158c6:	f7ff fdfd 	bl	80154c4 <_Bfree>
 80158ca:	4647      	mov	r7, r8
 80158cc:	106d      	asrs	r5, r5, #1
 80158ce:	d00b      	beq.n	80158e8 <__pow5mult+0xa0>
 80158d0:	6820      	ldr	r0, [r4, #0]
 80158d2:	b938      	cbnz	r0, 80158e4 <__pow5mult+0x9c>
 80158d4:	4622      	mov	r2, r4
 80158d6:	4621      	mov	r1, r4
 80158d8:	4630      	mov	r0, r6
 80158da:	f7ff ff0f 	bl	80156fc <__multiply>
 80158de:	6020      	str	r0, [r4, #0]
 80158e0:	f8c0 9000 	str.w	r9, [r0]
 80158e4:	4604      	mov	r4, r0
 80158e6:	e7e4      	b.n	80158b2 <__pow5mult+0x6a>
 80158e8:	4638      	mov	r0, r7
 80158ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158ee:	bf00      	nop
 80158f0:	080170e0 	.word	0x080170e0
 80158f4:	08016e86 	.word	0x08016e86
 80158f8:	08016f8c 	.word	0x08016f8c

080158fc <__lshift>:
 80158fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015900:	460c      	mov	r4, r1
 8015902:	6849      	ldr	r1, [r1, #4]
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801590a:	68a3      	ldr	r3, [r4, #8]
 801590c:	4607      	mov	r7, r0
 801590e:	4691      	mov	r9, r2
 8015910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015914:	f108 0601 	add.w	r6, r8, #1
 8015918:	42b3      	cmp	r3, r6
 801591a:	db0b      	blt.n	8015934 <__lshift+0x38>
 801591c:	4638      	mov	r0, r7
 801591e:	f7ff fd91 	bl	8015444 <_Balloc>
 8015922:	4605      	mov	r5, r0
 8015924:	b948      	cbnz	r0, 801593a <__lshift+0x3e>
 8015926:	4602      	mov	r2, r0
 8015928:	4b28      	ldr	r3, [pc, #160]	; (80159cc <__lshift+0xd0>)
 801592a:	4829      	ldr	r0, [pc, #164]	; (80159d0 <__lshift+0xd4>)
 801592c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015930:	f000 fbd6 	bl	80160e0 <__assert_func>
 8015934:	3101      	adds	r1, #1
 8015936:	005b      	lsls	r3, r3, #1
 8015938:	e7ee      	b.n	8015918 <__lshift+0x1c>
 801593a:	2300      	movs	r3, #0
 801593c:	f100 0114 	add.w	r1, r0, #20
 8015940:	f100 0210 	add.w	r2, r0, #16
 8015944:	4618      	mov	r0, r3
 8015946:	4553      	cmp	r3, sl
 8015948:	db33      	blt.n	80159b2 <__lshift+0xb6>
 801594a:	6920      	ldr	r0, [r4, #16]
 801594c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015950:	f104 0314 	add.w	r3, r4, #20
 8015954:	f019 091f 	ands.w	r9, r9, #31
 8015958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801595c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015960:	d02b      	beq.n	80159ba <__lshift+0xbe>
 8015962:	f1c9 0e20 	rsb	lr, r9, #32
 8015966:	468a      	mov	sl, r1
 8015968:	2200      	movs	r2, #0
 801596a:	6818      	ldr	r0, [r3, #0]
 801596c:	fa00 f009 	lsl.w	r0, r0, r9
 8015970:	4302      	orrs	r2, r0
 8015972:	f84a 2b04 	str.w	r2, [sl], #4
 8015976:	f853 2b04 	ldr.w	r2, [r3], #4
 801597a:	459c      	cmp	ip, r3
 801597c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015980:	d8f3      	bhi.n	801596a <__lshift+0x6e>
 8015982:	ebac 0304 	sub.w	r3, ip, r4
 8015986:	3b15      	subs	r3, #21
 8015988:	f023 0303 	bic.w	r3, r3, #3
 801598c:	3304      	adds	r3, #4
 801598e:	f104 0015 	add.w	r0, r4, #21
 8015992:	4584      	cmp	ip, r0
 8015994:	bf38      	it	cc
 8015996:	2304      	movcc	r3, #4
 8015998:	50ca      	str	r2, [r1, r3]
 801599a:	b10a      	cbz	r2, 80159a0 <__lshift+0xa4>
 801599c:	f108 0602 	add.w	r6, r8, #2
 80159a0:	3e01      	subs	r6, #1
 80159a2:	4638      	mov	r0, r7
 80159a4:	612e      	str	r6, [r5, #16]
 80159a6:	4621      	mov	r1, r4
 80159a8:	f7ff fd8c 	bl	80154c4 <_Bfree>
 80159ac:	4628      	mov	r0, r5
 80159ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80159b6:	3301      	adds	r3, #1
 80159b8:	e7c5      	b.n	8015946 <__lshift+0x4a>
 80159ba:	3904      	subs	r1, #4
 80159bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80159c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80159c4:	459c      	cmp	ip, r3
 80159c6:	d8f9      	bhi.n	80159bc <__lshift+0xc0>
 80159c8:	e7ea      	b.n	80159a0 <__lshift+0xa4>
 80159ca:	bf00      	nop
 80159cc:	08016efc 	.word	0x08016efc
 80159d0:	08016f8c 	.word	0x08016f8c

080159d4 <__mcmp>:
 80159d4:	b530      	push	{r4, r5, lr}
 80159d6:	6902      	ldr	r2, [r0, #16]
 80159d8:	690c      	ldr	r4, [r1, #16]
 80159da:	1b12      	subs	r2, r2, r4
 80159dc:	d10e      	bne.n	80159fc <__mcmp+0x28>
 80159de:	f100 0314 	add.w	r3, r0, #20
 80159e2:	3114      	adds	r1, #20
 80159e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80159e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80159ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80159f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80159f4:	42a5      	cmp	r5, r4
 80159f6:	d003      	beq.n	8015a00 <__mcmp+0x2c>
 80159f8:	d305      	bcc.n	8015a06 <__mcmp+0x32>
 80159fa:	2201      	movs	r2, #1
 80159fc:	4610      	mov	r0, r2
 80159fe:	bd30      	pop	{r4, r5, pc}
 8015a00:	4283      	cmp	r3, r0
 8015a02:	d3f3      	bcc.n	80159ec <__mcmp+0x18>
 8015a04:	e7fa      	b.n	80159fc <__mcmp+0x28>
 8015a06:	f04f 32ff 	mov.w	r2, #4294967295
 8015a0a:	e7f7      	b.n	80159fc <__mcmp+0x28>

08015a0c <__mdiff>:
 8015a0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a10:	460c      	mov	r4, r1
 8015a12:	4606      	mov	r6, r0
 8015a14:	4611      	mov	r1, r2
 8015a16:	4620      	mov	r0, r4
 8015a18:	4617      	mov	r7, r2
 8015a1a:	f7ff ffdb 	bl	80159d4 <__mcmp>
 8015a1e:	1e05      	subs	r5, r0, #0
 8015a20:	d110      	bne.n	8015a44 <__mdiff+0x38>
 8015a22:	4629      	mov	r1, r5
 8015a24:	4630      	mov	r0, r6
 8015a26:	f7ff fd0d 	bl	8015444 <_Balloc>
 8015a2a:	b930      	cbnz	r0, 8015a3a <__mdiff+0x2e>
 8015a2c:	4b39      	ldr	r3, [pc, #228]	; (8015b14 <__mdiff+0x108>)
 8015a2e:	4602      	mov	r2, r0
 8015a30:	f240 2132 	movw	r1, #562	; 0x232
 8015a34:	4838      	ldr	r0, [pc, #224]	; (8015b18 <__mdiff+0x10c>)
 8015a36:	f000 fb53 	bl	80160e0 <__assert_func>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a44:	bfa4      	itt	ge
 8015a46:	463b      	movge	r3, r7
 8015a48:	4627      	movge	r7, r4
 8015a4a:	4630      	mov	r0, r6
 8015a4c:	6879      	ldr	r1, [r7, #4]
 8015a4e:	bfa6      	itte	ge
 8015a50:	461c      	movge	r4, r3
 8015a52:	2500      	movge	r5, #0
 8015a54:	2501      	movlt	r5, #1
 8015a56:	f7ff fcf5 	bl	8015444 <_Balloc>
 8015a5a:	b920      	cbnz	r0, 8015a66 <__mdiff+0x5a>
 8015a5c:	4b2d      	ldr	r3, [pc, #180]	; (8015b14 <__mdiff+0x108>)
 8015a5e:	4602      	mov	r2, r0
 8015a60:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015a64:	e7e6      	b.n	8015a34 <__mdiff+0x28>
 8015a66:	693e      	ldr	r6, [r7, #16]
 8015a68:	60c5      	str	r5, [r0, #12]
 8015a6a:	6925      	ldr	r5, [r4, #16]
 8015a6c:	f107 0114 	add.w	r1, r7, #20
 8015a70:	f104 0914 	add.w	r9, r4, #20
 8015a74:	f100 0e14 	add.w	lr, r0, #20
 8015a78:	f107 0210 	add.w	r2, r7, #16
 8015a7c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015a80:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015a84:	46f2      	mov	sl, lr
 8015a86:	2700      	movs	r7, #0
 8015a88:	f859 3b04 	ldr.w	r3, [r9], #4
 8015a8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015a90:	fa1f f883 	uxth.w	r8, r3
 8015a94:	fa17 f78b 	uxtah	r7, r7, fp
 8015a98:	0c1b      	lsrs	r3, r3, #16
 8015a9a:	eba7 0808 	sub.w	r8, r7, r8
 8015a9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015aa2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015aa6:	fa1f f888 	uxth.w	r8, r8
 8015aaa:	141f      	asrs	r7, r3, #16
 8015aac:	454d      	cmp	r5, r9
 8015aae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015ab2:	f84a 3b04 	str.w	r3, [sl], #4
 8015ab6:	d8e7      	bhi.n	8015a88 <__mdiff+0x7c>
 8015ab8:	1b2b      	subs	r3, r5, r4
 8015aba:	3b15      	subs	r3, #21
 8015abc:	f023 0303 	bic.w	r3, r3, #3
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	3415      	adds	r4, #21
 8015ac4:	42a5      	cmp	r5, r4
 8015ac6:	bf38      	it	cc
 8015ac8:	2304      	movcc	r3, #4
 8015aca:	4419      	add	r1, r3
 8015acc:	4473      	add	r3, lr
 8015ace:	469e      	mov	lr, r3
 8015ad0:	460d      	mov	r5, r1
 8015ad2:	4565      	cmp	r5, ip
 8015ad4:	d30e      	bcc.n	8015af4 <__mdiff+0xe8>
 8015ad6:	f10c 0203 	add.w	r2, ip, #3
 8015ada:	1a52      	subs	r2, r2, r1
 8015adc:	f022 0203 	bic.w	r2, r2, #3
 8015ae0:	3903      	subs	r1, #3
 8015ae2:	458c      	cmp	ip, r1
 8015ae4:	bf38      	it	cc
 8015ae6:	2200      	movcc	r2, #0
 8015ae8:	441a      	add	r2, r3
 8015aea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015aee:	b17b      	cbz	r3, 8015b10 <__mdiff+0x104>
 8015af0:	6106      	str	r6, [r0, #16]
 8015af2:	e7a5      	b.n	8015a40 <__mdiff+0x34>
 8015af4:	f855 8b04 	ldr.w	r8, [r5], #4
 8015af8:	fa17 f488 	uxtah	r4, r7, r8
 8015afc:	1422      	asrs	r2, r4, #16
 8015afe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015b02:	b2a4      	uxth	r4, r4
 8015b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015b08:	f84e 4b04 	str.w	r4, [lr], #4
 8015b0c:	1417      	asrs	r7, r2, #16
 8015b0e:	e7e0      	b.n	8015ad2 <__mdiff+0xc6>
 8015b10:	3e01      	subs	r6, #1
 8015b12:	e7ea      	b.n	8015aea <__mdiff+0xde>
 8015b14:	08016efc 	.word	0x08016efc
 8015b18:	08016f8c 	.word	0x08016f8c

08015b1c <__ulp>:
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	ed8d 0b00 	vstr	d0, [sp]
 8015b22:	9b01      	ldr	r3, [sp, #4]
 8015b24:	4912      	ldr	r1, [pc, #72]	; (8015b70 <__ulp+0x54>)
 8015b26:	4019      	ands	r1, r3
 8015b28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015b2c:	2900      	cmp	r1, #0
 8015b2e:	dd05      	ble.n	8015b3c <__ulp+0x20>
 8015b30:	2200      	movs	r2, #0
 8015b32:	460b      	mov	r3, r1
 8015b34:	ec43 2b10 	vmov	d0, r2, r3
 8015b38:	b002      	add	sp, #8
 8015b3a:	4770      	bx	lr
 8015b3c:	4249      	negs	r1, r1
 8015b3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015b42:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015b46:	f04f 0200 	mov.w	r2, #0
 8015b4a:	f04f 0300 	mov.w	r3, #0
 8015b4e:	da04      	bge.n	8015b5a <__ulp+0x3e>
 8015b50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015b54:	fa41 f300 	asr.w	r3, r1, r0
 8015b58:	e7ec      	b.n	8015b34 <__ulp+0x18>
 8015b5a:	f1a0 0114 	sub.w	r1, r0, #20
 8015b5e:	291e      	cmp	r1, #30
 8015b60:	bfda      	itte	le
 8015b62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015b66:	fa20 f101 	lsrle.w	r1, r0, r1
 8015b6a:	2101      	movgt	r1, #1
 8015b6c:	460a      	mov	r2, r1
 8015b6e:	e7e1      	b.n	8015b34 <__ulp+0x18>
 8015b70:	7ff00000 	.word	0x7ff00000

08015b74 <__b2d>:
 8015b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b76:	6905      	ldr	r5, [r0, #16]
 8015b78:	f100 0714 	add.w	r7, r0, #20
 8015b7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015b80:	1f2e      	subs	r6, r5, #4
 8015b82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015b86:	4620      	mov	r0, r4
 8015b88:	f7ff fd52 	bl	8015630 <__hi0bits>
 8015b8c:	f1c0 0320 	rsb	r3, r0, #32
 8015b90:	280a      	cmp	r0, #10
 8015b92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015c10 <__b2d+0x9c>
 8015b96:	600b      	str	r3, [r1, #0]
 8015b98:	dc14      	bgt.n	8015bc4 <__b2d+0x50>
 8015b9a:	f1c0 0e0b 	rsb	lr, r0, #11
 8015b9e:	fa24 f10e 	lsr.w	r1, r4, lr
 8015ba2:	42b7      	cmp	r7, r6
 8015ba4:	ea41 030c 	orr.w	r3, r1, ip
 8015ba8:	bf34      	ite	cc
 8015baa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015bae:	2100      	movcs	r1, #0
 8015bb0:	3015      	adds	r0, #21
 8015bb2:	fa04 f000 	lsl.w	r0, r4, r0
 8015bb6:	fa21 f10e 	lsr.w	r1, r1, lr
 8015bba:	ea40 0201 	orr.w	r2, r0, r1
 8015bbe:	ec43 2b10 	vmov	d0, r2, r3
 8015bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bc4:	42b7      	cmp	r7, r6
 8015bc6:	bf3a      	itte	cc
 8015bc8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015bcc:	f1a5 0608 	subcc.w	r6, r5, #8
 8015bd0:	2100      	movcs	r1, #0
 8015bd2:	380b      	subs	r0, #11
 8015bd4:	d017      	beq.n	8015c06 <__b2d+0x92>
 8015bd6:	f1c0 0c20 	rsb	ip, r0, #32
 8015bda:	fa04 f500 	lsl.w	r5, r4, r0
 8015bde:	42be      	cmp	r6, r7
 8015be0:	fa21 f40c 	lsr.w	r4, r1, ip
 8015be4:	ea45 0504 	orr.w	r5, r5, r4
 8015be8:	bf8c      	ite	hi
 8015bea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015bee:	2400      	movls	r4, #0
 8015bf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015bf4:	fa01 f000 	lsl.w	r0, r1, r0
 8015bf8:	fa24 f40c 	lsr.w	r4, r4, ip
 8015bfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015c00:	ea40 0204 	orr.w	r2, r0, r4
 8015c04:	e7db      	b.n	8015bbe <__b2d+0x4a>
 8015c06:	ea44 030c 	orr.w	r3, r4, ip
 8015c0a:	460a      	mov	r2, r1
 8015c0c:	e7d7      	b.n	8015bbe <__b2d+0x4a>
 8015c0e:	bf00      	nop
 8015c10:	3ff00000 	.word	0x3ff00000

08015c14 <__d2b>:
 8015c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c18:	4689      	mov	r9, r1
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	ec57 6b10 	vmov	r6, r7, d0
 8015c20:	4690      	mov	r8, r2
 8015c22:	f7ff fc0f 	bl	8015444 <_Balloc>
 8015c26:	4604      	mov	r4, r0
 8015c28:	b930      	cbnz	r0, 8015c38 <__d2b+0x24>
 8015c2a:	4602      	mov	r2, r0
 8015c2c:	4b25      	ldr	r3, [pc, #148]	; (8015cc4 <__d2b+0xb0>)
 8015c2e:	4826      	ldr	r0, [pc, #152]	; (8015cc8 <__d2b+0xb4>)
 8015c30:	f240 310a 	movw	r1, #778	; 0x30a
 8015c34:	f000 fa54 	bl	80160e0 <__assert_func>
 8015c38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015c3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015c40:	bb35      	cbnz	r5, 8015c90 <__d2b+0x7c>
 8015c42:	2e00      	cmp	r6, #0
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	d028      	beq.n	8015c9a <__d2b+0x86>
 8015c48:	4668      	mov	r0, sp
 8015c4a:	9600      	str	r6, [sp, #0]
 8015c4c:	f7ff fd10 	bl	8015670 <__lo0bits>
 8015c50:	9900      	ldr	r1, [sp, #0]
 8015c52:	b300      	cbz	r0, 8015c96 <__d2b+0x82>
 8015c54:	9a01      	ldr	r2, [sp, #4]
 8015c56:	f1c0 0320 	rsb	r3, r0, #32
 8015c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c5e:	430b      	orrs	r3, r1
 8015c60:	40c2      	lsrs	r2, r0
 8015c62:	6163      	str	r3, [r4, #20]
 8015c64:	9201      	str	r2, [sp, #4]
 8015c66:	9b01      	ldr	r3, [sp, #4]
 8015c68:	61a3      	str	r3, [r4, #24]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	bf14      	ite	ne
 8015c6e:	2202      	movne	r2, #2
 8015c70:	2201      	moveq	r2, #1
 8015c72:	6122      	str	r2, [r4, #16]
 8015c74:	b1d5      	cbz	r5, 8015cac <__d2b+0x98>
 8015c76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c7a:	4405      	add	r5, r0
 8015c7c:	f8c9 5000 	str.w	r5, [r9]
 8015c80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c84:	f8c8 0000 	str.w	r0, [r8]
 8015c88:	4620      	mov	r0, r4
 8015c8a:	b003      	add	sp, #12
 8015c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c94:	e7d5      	b.n	8015c42 <__d2b+0x2e>
 8015c96:	6161      	str	r1, [r4, #20]
 8015c98:	e7e5      	b.n	8015c66 <__d2b+0x52>
 8015c9a:	a801      	add	r0, sp, #4
 8015c9c:	f7ff fce8 	bl	8015670 <__lo0bits>
 8015ca0:	9b01      	ldr	r3, [sp, #4]
 8015ca2:	6163      	str	r3, [r4, #20]
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	6122      	str	r2, [r4, #16]
 8015ca8:	3020      	adds	r0, #32
 8015caa:	e7e3      	b.n	8015c74 <__d2b+0x60>
 8015cac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015cb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015cb4:	f8c9 0000 	str.w	r0, [r9]
 8015cb8:	6918      	ldr	r0, [r3, #16]
 8015cba:	f7ff fcb9 	bl	8015630 <__hi0bits>
 8015cbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015cc2:	e7df      	b.n	8015c84 <__d2b+0x70>
 8015cc4:	08016efc 	.word	0x08016efc
 8015cc8:	08016f8c 	.word	0x08016f8c

08015ccc <__ratio>:
 8015ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd0:	4688      	mov	r8, r1
 8015cd2:	4669      	mov	r1, sp
 8015cd4:	4681      	mov	r9, r0
 8015cd6:	f7ff ff4d 	bl	8015b74 <__b2d>
 8015cda:	a901      	add	r1, sp, #4
 8015cdc:	4640      	mov	r0, r8
 8015cde:	ec55 4b10 	vmov	r4, r5, d0
 8015ce2:	f7ff ff47 	bl	8015b74 <__b2d>
 8015ce6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015cee:	eba3 0c02 	sub.w	ip, r3, r2
 8015cf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015cf6:	1a9b      	subs	r3, r3, r2
 8015cf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015cfc:	ec51 0b10 	vmov	r0, r1, d0
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	bfd6      	itet	le
 8015d04:	460a      	movle	r2, r1
 8015d06:	462a      	movgt	r2, r5
 8015d08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015d0c:	468b      	mov	fp, r1
 8015d0e:	462f      	mov	r7, r5
 8015d10:	bfd4      	ite	le
 8015d12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015d16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015d1a:	4620      	mov	r0, r4
 8015d1c:	ee10 2a10 	vmov	r2, s0
 8015d20:	465b      	mov	r3, fp
 8015d22:	4639      	mov	r1, r7
 8015d24:	f7ea fdba 	bl	800089c <__aeabi_ddiv>
 8015d28:	ec41 0b10 	vmov	d0, r0, r1
 8015d2c:	b003      	add	sp, #12
 8015d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d32 <__copybits>:
 8015d32:	3901      	subs	r1, #1
 8015d34:	b570      	push	{r4, r5, r6, lr}
 8015d36:	1149      	asrs	r1, r1, #5
 8015d38:	6914      	ldr	r4, [r2, #16]
 8015d3a:	3101      	adds	r1, #1
 8015d3c:	f102 0314 	add.w	r3, r2, #20
 8015d40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d48:	1f05      	subs	r5, r0, #4
 8015d4a:	42a3      	cmp	r3, r4
 8015d4c:	d30c      	bcc.n	8015d68 <__copybits+0x36>
 8015d4e:	1aa3      	subs	r3, r4, r2
 8015d50:	3b11      	subs	r3, #17
 8015d52:	f023 0303 	bic.w	r3, r3, #3
 8015d56:	3211      	adds	r2, #17
 8015d58:	42a2      	cmp	r2, r4
 8015d5a:	bf88      	it	hi
 8015d5c:	2300      	movhi	r3, #0
 8015d5e:	4418      	add	r0, r3
 8015d60:	2300      	movs	r3, #0
 8015d62:	4288      	cmp	r0, r1
 8015d64:	d305      	bcc.n	8015d72 <__copybits+0x40>
 8015d66:	bd70      	pop	{r4, r5, r6, pc}
 8015d68:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d6c:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d70:	e7eb      	b.n	8015d4a <__copybits+0x18>
 8015d72:	f840 3b04 	str.w	r3, [r0], #4
 8015d76:	e7f4      	b.n	8015d62 <__copybits+0x30>

08015d78 <__any_on>:
 8015d78:	f100 0214 	add.w	r2, r0, #20
 8015d7c:	6900      	ldr	r0, [r0, #16]
 8015d7e:	114b      	asrs	r3, r1, #5
 8015d80:	4298      	cmp	r0, r3
 8015d82:	b510      	push	{r4, lr}
 8015d84:	db11      	blt.n	8015daa <__any_on+0x32>
 8015d86:	dd0a      	ble.n	8015d9e <__any_on+0x26>
 8015d88:	f011 011f 	ands.w	r1, r1, #31
 8015d8c:	d007      	beq.n	8015d9e <__any_on+0x26>
 8015d8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015d92:	fa24 f001 	lsr.w	r0, r4, r1
 8015d96:	fa00 f101 	lsl.w	r1, r0, r1
 8015d9a:	428c      	cmp	r4, r1
 8015d9c:	d10b      	bne.n	8015db6 <__any_on+0x3e>
 8015d9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d803      	bhi.n	8015dae <__any_on+0x36>
 8015da6:	2000      	movs	r0, #0
 8015da8:	bd10      	pop	{r4, pc}
 8015daa:	4603      	mov	r3, r0
 8015dac:	e7f7      	b.n	8015d9e <__any_on+0x26>
 8015dae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015db2:	2900      	cmp	r1, #0
 8015db4:	d0f5      	beq.n	8015da2 <__any_on+0x2a>
 8015db6:	2001      	movs	r0, #1
 8015db8:	e7f6      	b.n	8015da8 <__any_on+0x30>

08015dba <_calloc_r>:
 8015dba:	b513      	push	{r0, r1, r4, lr}
 8015dbc:	434a      	muls	r2, r1
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	9201      	str	r2, [sp, #4]
 8015dc2:	f7fc fb39 	bl	8012438 <_malloc_r>
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	b118      	cbz	r0, 8015dd2 <_calloc_r+0x18>
 8015dca:	9a01      	ldr	r2, [sp, #4]
 8015dcc:	2100      	movs	r1, #0
 8015dce:	f7fc fadb 	bl	8012388 <memset>
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	b002      	add	sp, #8
 8015dd6:	bd10      	pop	{r4, pc}

08015dd8 <__ssputs_r>:
 8015dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ddc:	688e      	ldr	r6, [r1, #8]
 8015dde:	429e      	cmp	r6, r3
 8015de0:	4682      	mov	sl, r0
 8015de2:	460c      	mov	r4, r1
 8015de4:	4690      	mov	r8, r2
 8015de6:	461f      	mov	r7, r3
 8015de8:	d838      	bhi.n	8015e5c <__ssputs_r+0x84>
 8015dea:	898a      	ldrh	r2, [r1, #12]
 8015dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015df0:	d032      	beq.n	8015e58 <__ssputs_r+0x80>
 8015df2:	6825      	ldr	r5, [r4, #0]
 8015df4:	6909      	ldr	r1, [r1, #16]
 8015df6:	eba5 0901 	sub.w	r9, r5, r1
 8015dfa:	6965      	ldr	r5, [r4, #20]
 8015dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e04:	3301      	adds	r3, #1
 8015e06:	444b      	add	r3, r9
 8015e08:	106d      	asrs	r5, r5, #1
 8015e0a:	429d      	cmp	r5, r3
 8015e0c:	bf38      	it	cc
 8015e0e:	461d      	movcc	r5, r3
 8015e10:	0553      	lsls	r3, r2, #21
 8015e12:	d531      	bpl.n	8015e78 <__ssputs_r+0xa0>
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7fc fb0f 	bl	8012438 <_malloc_r>
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	b950      	cbnz	r0, 8015e34 <__ssputs_r+0x5c>
 8015e1e:	230c      	movs	r3, #12
 8015e20:	f8ca 3000 	str.w	r3, [sl]
 8015e24:	89a3      	ldrh	r3, [r4, #12]
 8015e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e2a:	81a3      	strh	r3, [r4, #12]
 8015e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e34:	6921      	ldr	r1, [r4, #16]
 8015e36:	464a      	mov	r2, r9
 8015e38:	f7fc fa7e 	bl	8012338 <memcpy>
 8015e3c:	89a3      	ldrh	r3, [r4, #12]
 8015e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e46:	81a3      	strh	r3, [r4, #12]
 8015e48:	6126      	str	r6, [r4, #16]
 8015e4a:	6165      	str	r5, [r4, #20]
 8015e4c:	444e      	add	r6, r9
 8015e4e:	eba5 0509 	sub.w	r5, r5, r9
 8015e52:	6026      	str	r6, [r4, #0]
 8015e54:	60a5      	str	r5, [r4, #8]
 8015e56:	463e      	mov	r6, r7
 8015e58:	42be      	cmp	r6, r7
 8015e5a:	d900      	bls.n	8015e5e <__ssputs_r+0x86>
 8015e5c:	463e      	mov	r6, r7
 8015e5e:	4632      	mov	r2, r6
 8015e60:	6820      	ldr	r0, [r4, #0]
 8015e62:	4641      	mov	r1, r8
 8015e64:	f7fc fa76 	bl	8012354 <memmove>
 8015e68:	68a3      	ldr	r3, [r4, #8]
 8015e6a:	6822      	ldr	r2, [r4, #0]
 8015e6c:	1b9b      	subs	r3, r3, r6
 8015e6e:	4432      	add	r2, r6
 8015e70:	60a3      	str	r3, [r4, #8]
 8015e72:	6022      	str	r2, [r4, #0]
 8015e74:	2000      	movs	r0, #0
 8015e76:	e7db      	b.n	8015e30 <__ssputs_r+0x58>
 8015e78:	462a      	mov	r2, r5
 8015e7a:	f000 f964 	bl	8016146 <_realloc_r>
 8015e7e:	4606      	mov	r6, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d1e1      	bne.n	8015e48 <__ssputs_r+0x70>
 8015e84:	6921      	ldr	r1, [r4, #16]
 8015e86:	4650      	mov	r0, sl
 8015e88:	f7fc fa86 	bl	8012398 <_free_r>
 8015e8c:	e7c7      	b.n	8015e1e <__ssputs_r+0x46>
	...

08015e90 <_svfiprintf_r>:
 8015e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	4698      	mov	r8, r3
 8015e96:	898b      	ldrh	r3, [r1, #12]
 8015e98:	061b      	lsls	r3, r3, #24
 8015e9a:	b09d      	sub	sp, #116	; 0x74
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	460d      	mov	r5, r1
 8015ea0:	4614      	mov	r4, r2
 8015ea2:	d50e      	bpl.n	8015ec2 <_svfiprintf_r+0x32>
 8015ea4:	690b      	ldr	r3, [r1, #16]
 8015ea6:	b963      	cbnz	r3, 8015ec2 <_svfiprintf_r+0x32>
 8015ea8:	2140      	movs	r1, #64	; 0x40
 8015eaa:	f7fc fac5 	bl	8012438 <_malloc_r>
 8015eae:	6028      	str	r0, [r5, #0]
 8015eb0:	6128      	str	r0, [r5, #16]
 8015eb2:	b920      	cbnz	r0, 8015ebe <_svfiprintf_r+0x2e>
 8015eb4:	230c      	movs	r3, #12
 8015eb6:	603b      	str	r3, [r7, #0]
 8015eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebc:	e0d1      	b.n	8016062 <_svfiprintf_r+0x1d2>
 8015ebe:	2340      	movs	r3, #64	; 0x40
 8015ec0:	616b      	str	r3, [r5, #20]
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ec6:	2320      	movs	r3, #32
 8015ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ed0:	2330      	movs	r3, #48	; 0x30
 8015ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801607c <_svfiprintf_r+0x1ec>
 8015ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015eda:	f04f 0901 	mov.w	r9, #1
 8015ede:	4623      	mov	r3, r4
 8015ee0:	469a      	mov	sl, r3
 8015ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ee6:	b10a      	cbz	r2, 8015eec <_svfiprintf_r+0x5c>
 8015ee8:	2a25      	cmp	r2, #37	; 0x25
 8015eea:	d1f9      	bne.n	8015ee0 <_svfiprintf_r+0x50>
 8015eec:	ebba 0b04 	subs.w	fp, sl, r4
 8015ef0:	d00b      	beq.n	8015f0a <_svfiprintf_r+0x7a>
 8015ef2:	465b      	mov	r3, fp
 8015ef4:	4622      	mov	r2, r4
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	4638      	mov	r0, r7
 8015efa:	f7ff ff6d 	bl	8015dd8 <__ssputs_r>
 8015efe:	3001      	adds	r0, #1
 8015f00:	f000 80aa 	beq.w	8016058 <_svfiprintf_r+0x1c8>
 8015f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f06:	445a      	add	r2, fp
 8015f08:	9209      	str	r2, [sp, #36]	; 0x24
 8015f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f000 80a2 	beq.w	8016058 <_svfiprintf_r+0x1c8>
 8015f14:	2300      	movs	r3, #0
 8015f16:	f04f 32ff 	mov.w	r2, #4294967295
 8015f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f1e:	f10a 0a01 	add.w	sl, sl, #1
 8015f22:	9304      	str	r3, [sp, #16]
 8015f24:	9307      	str	r3, [sp, #28]
 8015f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8015f2c:	4654      	mov	r4, sl
 8015f2e:	2205      	movs	r2, #5
 8015f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f34:	4851      	ldr	r0, [pc, #324]	; (801607c <_svfiprintf_r+0x1ec>)
 8015f36:	f7ea f97b 	bl	8000230 <memchr>
 8015f3a:	9a04      	ldr	r2, [sp, #16]
 8015f3c:	b9d8      	cbnz	r0, 8015f76 <_svfiprintf_r+0xe6>
 8015f3e:	06d0      	lsls	r0, r2, #27
 8015f40:	bf44      	itt	mi
 8015f42:	2320      	movmi	r3, #32
 8015f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f48:	0711      	lsls	r1, r2, #28
 8015f4a:	bf44      	itt	mi
 8015f4c:	232b      	movmi	r3, #43	; 0x2b
 8015f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f52:	f89a 3000 	ldrb.w	r3, [sl]
 8015f56:	2b2a      	cmp	r3, #42	; 0x2a
 8015f58:	d015      	beq.n	8015f86 <_svfiprintf_r+0xf6>
 8015f5a:	9a07      	ldr	r2, [sp, #28]
 8015f5c:	4654      	mov	r4, sl
 8015f5e:	2000      	movs	r0, #0
 8015f60:	f04f 0c0a 	mov.w	ip, #10
 8015f64:	4621      	mov	r1, r4
 8015f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f6a:	3b30      	subs	r3, #48	; 0x30
 8015f6c:	2b09      	cmp	r3, #9
 8015f6e:	d94e      	bls.n	801600e <_svfiprintf_r+0x17e>
 8015f70:	b1b0      	cbz	r0, 8015fa0 <_svfiprintf_r+0x110>
 8015f72:	9207      	str	r2, [sp, #28]
 8015f74:	e014      	b.n	8015fa0 <_svfiprintf_r+0x110>
 8015f76:	eba0 0308 	sub.w	r3, r0, r8
 8015f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8015f7e:	4313      	orrs	r3, r2
 8015f80:	9304      	str	r3, [sp, #16]
 8015f82:	46a2      	mov	sl, r4
 8015f84:	e7d2      	b.n	8015f2c <_svfiprintf_r+0x9c>
 8015f86:	9b03      	ldr	r3, [sp, #12]
 8015f88:	1d19      	adds	r1, r3, #4
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	9103      	str	r1, [sp, #12]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	bfbb      	ittet	lt
 8015f92:	425b      	neglt	r3, r3
 8015f94:	f042 0202 	orrlt.w	r2, r2, #2
 8015f98:	9307      	strge	r3, [sp, #28]
 8015f9a:	9307      	strlt	r3, [sp, #28]
 8015f9c:	bfb8      	it	lt
 8015f9e:	9204      	strlt	r2, [sp, #16]
 8015fa0:	7823      	ldrb	r3, [r4, #0]
 8015fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa4:	d10c      	bne.n	8015fc0 <_svfiprintf_r+0x130>
 8015fa6:	7863      	ldrb	r3, [r4, #1]
 8015fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8015faa:	d135      	bne.n	8016018 <_svfiprintf_r+0x188>
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	9203      	str	r2, [sp, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	bfb8      	it	lt
 8015fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fbc:	3402      	adds	r4, #2
 8015fbe:	9305      	str	r3, [sp, #20]
 8015fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801608c <_svfiprintf_r+0x1fc>
 8015fc4:	7821      	ldrb	r1, [r4, #0]
 8015fc6:	2203      	movs	r2, #3
 8015fc8:	4650      	mov	r0, sl
 8015fca:	f7ea f931 	bl	8000230 <memchr>
 8015fce:	b140      	cbz	r0, 8015fe2 <_svfiprintf_r+0x152>
 8015fd0:	2340      	movs	r3, #64	; 0x40
 8015fd2:	eba0 000a 	sub.w	r0, r0, sl
 8015fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8015fda:	9b04      	ldr	r3, [sp, #16]
 8015fdc:	4303      	orrs	r3, r0
 8015fde:	3401      	adds	r4, #1
 8015fe0:	9304      	str	r3, [sp, #16]
 8015fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fe6:	4826      	ldr	r0, [pc, #152]	; (8016080 <_svfiprintf_r+0x1f0>)
 8015fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fec:	2206      	movs	r2, #6
 8015fee:	f7ea f91f 	bl	8000230 <memchr>
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d038      	beq.n	8016068 <_svfiprintf_r+0x1d8>
 8015ff6:	4b23      	ldr	r3, [pc, #140]	; (8016084 <_svfiprintf_r+0x1f4>)
 8015ff8:	bb1b      	cbnz	r3, 8016042 <_svfiprintf_r+0x1b2>
 8015ffa:	9b03      	ldr	r3, [sp, #12]
 8015ffc:	3307      	adds	r3, #7
 8015ffe:	f023 0307 	bic.w	r3, r3, #7
 8016002:	3308      	adds	r3, #8
 8016004:	9303      	str	r3, [sp, #12]
 8016006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016008:	4433      	add	r3, r6
 801600a:	9309      	str	r3, [sp, #36]	; 0x24
 801600c:	e767      	b.n	8015ede <_svfiprintf_r+0x4e>
 801600e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016012:	460c      	mov	r4, r1
 8016014:	2001      	movs	r0, #1
 8016016:	e7a5      	b.n	8015f64 <_svfiprintf_r+0xd4>
 8016018:	2300      	movs	r3, #0
 801601a:	3401      	adds	r4, #1
 801601c:	9305      	str	r3, [sp, #20]
 801601e:	4619      	mov	r1, r3
 8016020:	f04f 0c0a 	mov.w	ip, #10
 8016024:	4620      	mov	r0, r4
 8016026:	f810 2b01 	ldrb.w	r2, [r0], #1
 801602a:	3a30      	subs	r2, #48	; 0x30
 801602c:	2a09      	cmp	r2, #9
 801602e:	d903      	bls.n	8016038 <_svfiprintf_r+0x1a8>
 8016030:	2b00      	cmp	r3, #0
 8016032:	d0c5      	beq.n	8015fc0 <_svfiprintf_r+0x130>
 8016034:	9105      	str	r1, [sp, #20]
 8016036:	e7c3      	b.n	8015fc0 <_svfiprintf_r+0x130>
 8016038:	fb0c 2101 	mla	r1, ip, r1, r2
 801603c:	4604      	mov	r4, r0
 801603e:	2301      	movs	r3, #1
 8016040:	e7f0      	b.n	8016024 <_svfiprintf_r+0x194>
 8016042:	ab03      	add	r3, sp, #12
 8016044:	9300      	str	r3, [sp, #0]
 8016046:	462a      	mov	r2, r5
 8016048:	4b0f      	ldr	r3, [pc, #60]	; (8016088 <_svfiprintf_r+0x1f8>)
 801604a:	a904      	add	r1, sp, #16
 801604c:	4638      	mov	r0, r7
 801604e:	f7fc faed 	bl	801262c <_printf_float>
 8016052:	1c42      	adds	r2, r0, #1
 8016054:	4606      	mov	r6, r0
 8016056:	d1d6      	bne.n	8016006 <_svfiprintf_r+0x176>
 8016058:	89ab      	ldrh	r3, [r5, #12]
 801605a:	065b      	lsls	r3, r3, #25
 801605c:	f53f af2c 	bmi.w	8015eb8 <_svfiprintf_r+0x28>
 8016060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016062:	b01d      	add	sp, #116	; 0x74
 8016064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016068:	ab03      	add	r3, sp, #12
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	462a      	mov	r2, r5
 801606e:	4b06      	ldr	r3, [pc, #24]	; (8016088 <_svfiprintf_r+0x1f8>)
 8016070:	a904      	add	r1, sp, #16
 8016072:	4638      	mov	r0, r7
 8016074:	f7fc fd7e 	bl	8012b74 <_printf_i>
 8016078:	e7eb      	b.n	8016052 <_svfiprintf_r+0x1c2>
 801607a:	bf00      	nop
 801607c:	080170ec 	.word	0x080170ec
 8016080:	080170f6 	.word	0x080170f6
 8016084:	0801262d 	.word	0x0801262d
 8016088:	08015dd9 	.word	0x08015dd9
 801608c:	080170f2 	.word	0x080170f2

08016090 <nan>:
 8016090:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016098 <nan+0x8>
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	00000000 	.word	0x00000000
 801609c:	7ff80000 	.word	0x7ff80000

080160a0 <strncmp>:
 80160a0:	b510      	push	{r4, lr}
 80160a2:	b16a      	cbz	r2, 80160c0 <strncmp+0x20>
 80160a4:	3901      	subs	r1, #1
 80160a6:	1884      	adds	r4, r0, r2
 80160a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80160ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d103      	bne.n	80160bc <strncmp+0x1c>
 80160b4:	42a0      	cmp	r0, r4
 80160b6:	d001      	beq.n	80160bc <strncmp+0x1c>
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1f5      	bne.n	80160a8 <strncmp+0x8>
 80160bc:	1a98      	subs	r0, r3, r2
 80160be:	bd10      	pop	{r4, pc}
 80160c0:	4610      	mov	r0, r2
 80160c2:	e7fc      	b.n	80160be <strncmp+0x1e>

080160c4 <__ascii_wctomb>:
 80160c4:	b149      	cbz	r1, 80160da <__ascii_wctomb+0x16>
 80160c6:	2aff      	cmp	r2, #255	; 0xff
 80160c8:	bf85      	ittet	hi
 80160ca:	238a      	movhi	r3, #138	; 0x8a
 80160cc:	6003      	strhi	r3, [r0, #0]
 80160ce:	700a      	strbls	r2, [r1, #0]
 80160d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80160d4:	bf98      	it	ls
 80160d6:	2001      	movls	r0, #1
 80160d8:	4770      	bx	lr
 80160da:	4608      	mov	r0, r1
 80160dc:	4770      	bx	lr
	...

080160e0 <__assert_func>:
 80160e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80160e2:	4614      	mov	r4, r2
 80160e4:	461a      	mov	r2, r3
 80160e6:	4b09      	ldr	r3, [pc, #36]	; (801610c <__assert_func+0x2c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	4605      	mov	r5, r0
 80160ec:	68d8      	ldr	r0, [r3, #12]
 80160ee:	b14c      	cbz	r4, 8016104 <__assert_func+0x24>
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <__assert_func+0x30>)
 80160f2:	9100      	str	r1, [sp, #0]
 80160f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80160f8:	4906      	ldr	r1, [pc, #24]	; (8016114 <__assert_func+0x34>)
 80160fa:	462b      	mov	r3, r5
 80160fc:	f000 f80e 	bl	801611c <fiprintf>
 8016100:	f7fc f8d8 	bl	80122b4 <abort>
 8016104:	4b04      	ldr	r3, [pc, #16]	; (8016118 <__assert_func+0x38>)
 8016106:	461c      	mov	r4, r3
 8016108:	e7f3      	b.n	80160f2 <__assert_func+0x12>
 801610a:	bf00      	nop
 801610c:	2000019c 	.word	0x2000019c
 8016110:	080170fd 	.word	0x080170fd
 8016114:	0801710a 	.word	0x0801710a
 8016118:	08017138 	.word	0x08017138

0801611c <fiprintf>:
 801611c:	b40e      	push	{r1, r2, r3}
 801611e:	b503      	push	{r0, r1, lr}
 8016120:	4601      	mov	r1, r0
 8016122:	ab03      	add	r3, sp, #12
 8016124:	4805      	ldr	r0, [pc, #20]	; (801613c <fiprintf+0x20>)
 8016126:	f853 2b04 	ldr.w	r2, [r3], #4
 801612a:	6800      	ldr	r0, [r0, #0]
 801612c:	9301      	str	r3, [sp, #4]
 801612e:	f000 f859 	bl	80161e4 <_vfiprintf_r>
 8016132:	b002      	add	sp, #8
 8016134:	f85d eb04 	ldr.w	lr, [sp], #4
 8016138:	b003      	add	sp, #12
 801613a:	4770      	bx	lr
 801613c:	2000019c 	.word	0x2000019c

08016140 <__retarget_lock_init_recursive>:
 8016140:	4770      	bx	lr

08016142 <__retarget_lock_acquire_recursive>:
 8016142:	4770      	bx	lr

08016144 <__retarget_lock_release_recursive>:
 8016144:	4770      	bx	lr

08016146 <_realloc_r>:
 8016146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016148:	4607      	mov	r7, r0
 801614a:	4614      	mov	r4, r2
 801614c:	460e      	mov	r6, r1
 801614e:	b921      	cbnz	r1, 801615a <_realloc_r+0x14>
 8016150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016154:	4611      	mov	r1, r2
 8016156:	f7fc b96f 	b.w	8012438 <_malloc_r>
 801615a:	b922      	cbnz	r2, 8016166 <_realloc_r+0x20>
 801615c:	f7fc f91c 	bl	8012398 <_free_r>
 8016160:	4625      	mov	r5, r4
 8016162:	4628      	mov	r0, r5
 8016164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016166:	f000 fc49 	bl	80169fc <_malloc_usable_size_r>
 801616a:	42a0      	cmp	r0, r4
 801616c:	d20f      	bcs.n	801618e <_realloc_r+0x48>
 801616e:	4621      	mov	r1, r4
 8016170:	4638      	mov	r0, r7
 8016172:	f7fc f961 	bl	8012438 <_malloc_r>
 8016176:	4605      	mov	r5, r0
 8016178:	2800      	cmp	r0, #0
 801617a:	d0f2      	beq.n	8016162 <_realloc_r+0x1c>
 801617c:	4631      	mov	r1, r6
 801617e:	4622      	mov	r2, r4
 8016180:	f7fc f8da 	bl	8012338 <memcpy>
 8016184:	4631      	mov	r1, r6
 8016186:	4638      	mov	r0, r7
 8016188:	f7fc f906 	bl	8012398 <_free_r>
 801618c:	e7e9      	b.n	8016162 <_realloc_r+0x1c>
 801618e:	4635      	mov	r5, r6
 8016190:	e7e7      	b.n	8016162 <_realloc_r+0x1c>

08016192 <__sfputc_r>:
 8016192:	6893      	ldr	r3, [r2, #8]
 8016194:	3b01      	subs	r3, #1
 8016196:	2b00      	cmp	r3, #0
 8016198:	b410      	push	{r4}
 801619a:	6093      	str	r3, [r2, #8]
 801619c:	da08      	bge.n	80161b0 <__sfputc_r+0x1e>
 801619e:	6994      	ldr	r4, [r2, #24]
 80161a0:	42a3      	cmp	r3, r4
 80161a2:	db01      	blt.n	80161a8 <__sfputc_r+0x16>
 80161a4:	290a      	cmp	r1, #10
 80161a6:	d103      	bne.n	80161b0 <__sfputc_r+0x1e>
 80161a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161ac:	f000 b94a 	b.w	8016444 <__swbuf_r>
 80161b0:	6813      	ldr	r3, [r2, #0]
 80161b2:	1c58      	adds	r0, r3, #1
 80161b4:	6010      	str	r0, [r2, #0]
 80161b6:	7019      	strb	r1, [r3, #0]
 80161b8:	4608      	mov	r0, r1
 80161ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161be:	4770      	bx	lr

080161c0 <__sfputs_r>:
 80161c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c2:	4606      	mov	r6, r0
 80161c4:	460f      	mov	r7, r1
 80161c6:	4614      	mov	r4, r2
 80161c8:	18d5      	adds	r5, r2, r3
 80161ca:	42ac      	cmp	r4, r5
 80161cc:	d101      	bne.n	80161d2 <__sfputs_r+0x12>
 80161ce:	2000      	movs	r0, #0
 80161d0:	e007      	b.n	80161e2 <__sfputs_r+0x22>
 80161d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161d6:	463a      	mov	r2, r7
 80161d8:	4630      	mov	r0, r6
 80161da:	f7ff ffda 	bl	8016192 <__sfputc_r>
 80161de:	1c43      	adds	r3, r0, #1
 80161e0:	d1f3      	bne.n	80161ca <__sfputs_r+0xa>
 80161e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080161e4 <_vfiprintf_r>:
 80161e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e8:	460d      	mov	r5, r1
 80161ea:	b09d      	sub	sp, #116	; 0x74
 80161ec:	4614      	mov	r4, r2
 80161ee:	4698      	mov	r8, r3
 80161f0:	4606      	mov	r6, r0
 80161f2:	b118      	cbz	r0, 80161fc <_vfiprintf_r+0x18>
 80161f4:	6983      	ldr	r3, [r0, #24]
 80161f6:	b90b      	cbnz	r3, 80161fc <_vfiprintf_r+0x18>
 80161f8:	f000 fafe 	bl	80167f8 <__sinit>
 80161fc:	4b89      	ldr	r3, [pc, #548]	; (8016424 <_vfiprintf_r+0x240>)
 80161fe:	429d      	cmp	r5, r3
 8016200:	d11b      	bne.n	801623a <_vfiprintf_r+0x56>
 8016202:	6875      	ldr	r5, [r6, #4]
 8016204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016206:	07d9      	lsls	r1, r3, #31
 8016208:	d405      	bmi.n	8016216 <_vfiprintf_r+0x32>
 801620a:	89ab      	ldrh	r3, [r5, #12]
 801620c:	059a      	lsls	r2, r3, #22
 801620e:	d402      	bmi.n	8016216 <_vfiprintf_r+0x32>
 8016210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016212:	f7ff ff96 	bl	8016142 <__retarget_lock_acquire_recursive>
 8016216:	89ab      	ldrh	r3, [r5, #12]
 8016218:	071b      	lsls	r3, r3, #28
 801621a:	d501      	bpl.n	8016220 <_vfiprintf_r+0x3c>
 801621c:	692b      	ldr	r3, [r5, #16]
 801621e:	b9eb      	cbnz	r3, 801625c <_vfiprintf_r+0x78>
 8016220:	4629      	mov	r1, r5
 8016222:	4630      	mov	r0, r6
 8016224:	f000 f960 	bl	80164e8 <__swsetup_r>
 8016228:	b1c0      	cbz	r0, 801625c <_vfiprintf_r+0x78>
 801622a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801622c:	07dc      	lsls	r4, r3, #31
 801622e:	d50e      	bpl.n	801624e <_vfiprintf_r+0x6a>
 8016230:	f04f 30ff 	mov.w	r0, #4294967295
 8016234:	b01d      	add	sp, #116	; 0x74
 8016236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623a:	4b7b      	ldr	r3, [pc, #492]	; (8016428 <_vfiprintf_r+0x244>)
 801623c:	429d      	cmp	r5, r3
 801623e:	d101      	bne.n	8016244 <_vfiprintf_r+0x60>
 8016240:	68b5      	ldr	r5, [r6, #8]
 8016242:	e7df      	b.n	8016204 <_vfiprintf_r+0x20>
 8016244:	4b79      	ldr	r3, [pc, #484]	; (801642c <_vfiprintf_r+0x248>)
 8016246:	429d      	cmp	r5, r3
 8016248:	bf08      	it	eq
 801624a:	68f5      	ldreq	r5, [r6, #12]
 801624c:	e7da      	b.n	8016204 <_vfiprintf_r+0x20>
 801624e:	89ab      	ldrh	r3, [r5, #12]
 8016250:	0598      	lsls	r0, r3, #22
 8016252:	d4ed      	bmi.n	8016230 <_vfiprintf_r+0x4c>
 8016254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016256:	f7ff ff75 	bl	8016144 <__retarget_lock_release_recursive>
 801625a:	e7e9      	b.n	8016230 <_vfiprintf_r+0x4c>
 801625c:	2300      	movs	r3, #0
 801625e:	9309      	str	r3, [sp, #36]	; 0x24
 8016260:	2320      	movs	r3, #32
 8016262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016266:	f8cd 800c 	str.w	r8, [sp, #12]
 801626a:	2330      	movs	r3, #48	; 0x30
 801626c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016430 <_vfiprintf_r+0x24c>
 8016270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016274:	f04f 0901 	mov.w	r9, #1
 8016278:	4623      	mov	r3, r4
 801627a:	469a      	mov	sl, r3
 801627c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016280:	b10a      	cbz	r2, 8016286 <_vfiprintf_r+0xa2>
 8016282:	2a25      	cmp	r2, #37	; 0x25
 8016284:	d1f9      	bne.n	801627a <_vfiprintf_r+0x96>
 8016286:	ebba 0b04 	subs.w	fp, sl, r4
 801628a:	d00b      	beq.n	80162a4 <_vfiprintf_r+0xc0>
 801628c:	465b      	mov	r3, fp
 801628e:	4622      	mov	r2, r4
 8016290:	4629      	mov	r1, r5
 8016292:	4630      	mov	r0, r6
 8016294:	f7ff ff94 	bl	80161c0 <__sfputs_r>
 8016298:	3001      	adds	r0, #1
 801629a:	f000 80aa 	beq.w	80163f2 <_vfiprintf_r+0x20e>
 801629e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162a0:	445a      	add	r2, fp
 80162a2:	9209      	str	r2, [sp, #36]	; 0x24
 80162a4:	f89a 3000 	ldrb.w	r3, [sl]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	f000 80a2 	beq.w	80163f2 <_vfiprintf_r+0x20e>
 80162ae:	2300      	movs	r3, #0
 80162b0:	f04f 32ff 	mov.w	r2, #4294967295
 80162b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162b8:	f10a 0a01 	add.w	sl, sl, #1
 80162bc:	9304      	str	r3, [sp, #16]
 80162be:	9307      	str	r3, [sp, #28]
 80162c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162c4:	931a      	str	r3, [sp, #104]	; 0x68
 80162c6:	4654      	mov	r4, sl
 80162c8:	2205      	movs	r2, #5
 80162ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162ce:	4858      	ldr	r0, [pc, #352]	; (8016430 <_vfiprintf_r+0x24c>)
 80162d0:	f7e9 ffae 	bl	8000230 <memchr>
 80162d4:	9a04      	ldr	r2, [sp, #16]
 80162d6:	b9d8      	cbnz	r0, 8016310 <_vfiprintf_r+0x12c>
 80162d8:	06d1      	lsls	r1, r2, #27
 80162da:	bf44      	itt	mi
 80162dc:	2320      	movmi	r3, #32
 80162de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162e2:	0713      	lsls	r3, r2, #28
 80162e4:	bf44      	itt	mi
 80162e6:	232b      	movmi	r3, #43	; 0x2b
 80162e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80162ec:	f89a 3000 	ldrb.w	r3, [sl]
 80162f0:	2b2a      	cmp	r3, #42	; 0x2a
 80162f2:	d015      	beq.n	8016320 <_vfiprintf_r+0x13c>
 80162f4:	9a07      	ldr	r2, [sp, #28]
 80162f6:	4654      	mov	r4, sl
 80162f8:	2000      	movs	r0, #0
 80162fa:	f04f 0c0a 	mov.w	ip, #10
 80162fe:	4621      	mov	r1, r4
 8016300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016304:	3b30      	subs	r3, #48	; 0x30
 8016306:	2b09      	cmp	r3, #9
 8016308:	d94e      	bls.n	80163a8 <_vfiprintf_r+0x1c4>
 801630a:	b1b0      	cbz	r0, 801633a <_vfiprintf_r+0x156>
 801630c:	9207      	str	r2, [sp, #28]
 801630e:	e014      	b.n	801633a <_vfiprintf_r+0x156>
 8016310:	eba0 0308 	sub.w	r3, r0, r8
 8016314:	fa09 f303 	lsl.w	r3, r9, r3
 8016318:	4313      	orrs	r3, r2
 801631a:	9304      	str	r3, [sp, #16]
 801631c:	46a2      	mov	sl, r4
 801631e:	e7d2      	b.n	80162c6 <_vfiprintf_r+0xe2>
 8016320:	9b03      	ldr	r3, [sp, #12]
 8016322:	1d19      	adds	r1, r3, #4
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	9103      	str	r1, [sp, #12]
 8016328:	2b00      	cmp	r3, #0
 801632a:	bfbb      	ittet	lt
 801632c:	425b      	neglt	r3, r3
 801632e:	f042 0202 	orrlt.w	r2, r2, #2
 8016332:	9307      	strge	r3, [sp, #28]
 8016334:	9307      	strlt	r3, [sp, #28]
 8016336:	bfb8      	it	lt
 8016338:	9204      	strlt	r2, [sp, #16]
 801633a:	7823      	ldrb	r3, [r4, #0]
 801633c:	2b2e      	cmp	r3, #46	; 0x2e
 801633e:	d10c      	bne.n	801635a <_vfiprintf_r+0x176>
 8016340:	7863      	ldrb	r3, [r4, #1]
 8016342:	2b2a      	cmp	r3, #42	; 0x2a
 8016344:	d135      	bne.n	80163b2 <_vfiprintf_r+0x1ce>
 8016346:	9b03      	ldr	r3, [sp, #12]
 8016348:	1d1a      	adds	r2, r3, #4
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	9203      	str	r2, [sp, #12]
 801634e:	2b00      	cmp	r3, #0
 8016350:	bfb8      	it	lt
 8016352:	f04f 33ff 	movlt.w	r3, #4294967295
 8016356:	3402      	adds	r4, #2
 8016358:	9305      	str	r3, [sp, #20]
 801635a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016440 <_vfiprintf_r+0x25c>
 801635e:	7821      	ldrb	r1, [r4, #0]
 8016360:	2203      	movs	r2, #3
 8016362:	4650      	mov	r0, sl
 8016364:	f7e9 ff64 	bl	8000230 <memchr>
 8016368:	b140      	cbz	r0, 801637c <_vfiprintf_r+0x198>
 801636a:	2340      	movs	r3, #64	; 0x40
 801636c:	eba0 000a 	sub.w	r0, r0, sl
 8016370:	fa03 f000 	lsl.w	r0, r3, r0
 8016374:	9b04      	ldr	r3, [sp, #16]
 8016376:	4303      	orrs	r3, r0
 8016378:	3401      	adds	r4, #1
 801637a:	9304      	str	r3, [sp, #16]
 801637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016380:	482c      	ldr	r0, [pc, #176]	; (8016434 <_vfiprintf_r+0x250>)
 8016382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016386:	2206      	movs	r2, #6
 8016388:	f7e9 ff52 	bl	8000230 <memchr>
 801638c:	2800      	cmp	r0, #0
 801638e:	d03f      	beq.n	8016410 <_vfiprintf_r+0x22c>
 8016390:	4b29      	ldr	r3, [pc, #164]	; (8016438 <_vfiprintf_r+0x254>)
 8016392:	bb1b      	cbnz	r3, 80163dc <_vfiprintf_r+0x1f8>
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	3307      	adds	r3, #7
 8016398:	f023 0307 	bic.w	r3, r3, #7
 801639c:	3308      	adds	r3, #8
 801639e:	9303      	str	r3, [sp, #12]
 80163a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a2:	443b      	add	r3, r7
 80163a4:	9309      	str	r3, [sp, #36]	; 0x24
 80163a6:	e767      	b.n	8016278 <_vfiprintf_r+0x94>
 80163a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80163ac:	460c      	mov	r4, r1
 80163ae:	2001      	movs	r0, #1
 80163b0:	e7a5      	b.n	80162fe <_vfiprintf_r+0x11a>
 80163b2:	2300      	movs	r3, #0
 80163b4:	3401      	adds	r4, #1
 80163b6:	9305      	str	r3, [sp, #20]
 80163b8:	4619      	mov	r1, r3
 80163ba:	f04f 0c0a 	mov.w	ip, #10
 80163be:	4620      	mov	r0, r4
 80163c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c4:	3a30      	subs	r2, #48	; 0x30
 80163c6:	2a09      	cmp	r2, #9
 80163c8:	d903      	bls.n	80163d2 <_vfiprintf_r+0x1ee>
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0c5      	beq.n	801635a <_vfiprintf_r+0x176>
 80163ce:	9105      	str	r1, [sp, #20]
 80163d0:	e7c3      	b.n	801635a <_vfiprintf_r+0x176>
 80163d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80163d6:	4604      	mov	r4, r0
 80163d8:	2301      	movs	r3, #1
 80163da:	e7f0      	b.n	80163be <_vfiprintf_r+0x1da>
 80163dc:	ab03      	add	r3, sp, #12
 80163de:	9300      	str	r3, [sp, #0]
 80163e0:	462a      	mov	r2, r5
 80163e2:	4b16      	ldr	r3, [pc, #88]	; (801643c <_vfiprintf_r+0x258>)
 80163e4:	a904      	add	r1, sp, #16
 80163e6:	4630      	mov	r0, r6
 80163e8:	f7fc f920 	bl	801262c <_printf_float>
 80163ec:	4607      	mov	r7, r0
 80163ee:	1c78      	adds	r0, r7, #1
 80163f0:	d1d6      	bne.n	80163a0 <_vfiprintf_r+0x1bc>
 80163f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163f4:	07d9      	lsls	r1, r3, #31
 80163f6:	d405      	bmi.n	8016404 <_vfiprintf_r+0x220>
 80163f8:	89ab      	ldrh	r3, [r5, #12]
 80163fa:	059a      	lsls	r2, r3, #22
 80163fc:	d402      	bmi.n	8016404 <_vfiprintf_r+0x220>
 80163fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016400:	f7ff fea0 	bl	8016144 <__retarget_lock_release_recursive>
 8016404:	89ab      	ldrh	r3, [r5, #12]
 8016406:	065b      	lsls	r3, r3, #25
 8016408:	f53f af12 	bmi.w	8016230 <_vfiprintf_r+0x4c>
 801640c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801640e:	e711      	b.n	8016234 <_vfiprintf_r+0x50>
 8016410:	ab03      	add	r3, sp, #12
 8016412:	9300      	str	r3, [sp, #0]
 8016414:	462a      	mov	r2, r5
 8016416:	4b09      	ldr	r3, [pc, #36]	; (801643c <_vfiprintf_r+0x258>)
 8016418:	a904      	add	r1, sp, #16
 801641a:	4630      	mov	r0, r6
 801641c:	f7fc fbaa 	bl	8012b74 <_printf_i>
 8016420:	e7e4      	b.n	80163ec <_vfiprintf_r+0x208>
 8016422:	bf00      	nop
 8016424:	0801715c 	.word	0x0801715c
 8016428:	0801717c 	.word	0x0801717c
 801642c:	0801713c 	.word	0x0801713c
 8016430:	080170ec 	.word	0x080170ec
 8016434:	080170f6 	.word	0x080170f6
 8016438:	0801262d 	.word	0x0801262d
 801643c:	080161c1 	.word	0x080161c1
 8016440:	080170f2 	.word	0x080170f2

08016444 <__swbuf_r>:
 8016444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016446:	460e      	mov	r6, r1
 8016448:	4614      	mov	r4, r2
 801644a:	4605      	mov	r5, r0
 801644c:	b118      	cbz	r0, 8016456 <__swbuf_r+0x12>
 801644e:	6983      	ldr	r3, [r0, #24]
 8016450:	b90b      	cbnz	r3, 8016456 <__swbuf_r+0x12>
 8016452:	f000 f9d1 	bl	80167f8 <__sinit>
 8016456:	4b21      	ldr	r3, [pc, #132]	; (80164dc <__swbuf_r+0x98>)
 8016458:	429c      	cmp	r4, r3
 801645a:	d12b      	bne.n	80164b4 <__swbuf_r+0x70>
 801645c:	686c      	ldr	r4, [r5, #4]
 801645e:	69a3      	ldr	r3, [r4, #24]
 8016460:	60a3      	str	r3, [r4, #8]
 8016462:	89a3      	ldrh	r3, [r4, #12]
 8016464:	071a      	lsls	r2, r3, #28
 8016466:	d52f      	bpl.n	80164c8 <__swbuf_r+0x84>
 8016468:	6923      	ldr	r3, [r4, #16]
 801646a:	b36b      	cbz	r3, 80164c8 <__swbuf_r+0x84>
 801646c:	6923      	ldr	r3, [r4, #16]
 801646e:	6820      	ldr	r0, [r4, #0]
 8016470:	1ac0      	subs	r0, r0, r3
 8016472:	6963      	ldr	r3, [r4, #20]
 8016474:	b2f6      	uxtb	r6, r6
 8016476:	4283      	cmp	r3, r0
 8016478:	4637      	mov	r7, r6
 801647a:	dc04      	bgt.n	8016486 <__swbuf_r+0x42>
 801647c:	4621      	mov	r1, r4
 801647e:	4628      	mov	r0, r5
 8016480:	f000 f926 	bl	80166d0 <_fflush_r>
 8016484:	bb30      	cbnz	r0, 80164d4 <__swbuf_r+0x90>
 8016486:	68a3      	ldr	r3, [r4, #8]
 8016488:	3b01      	subs	r3, #1
 801648a:	60a3      	str	r3, [r4, #8]
 801648c:	6823      	ldr	r3, [r4, #0]
 801648e:	1c5a      	adds	r2, r3, #1
 8016490:	6022      	str	r2, [r4, #0]
 8016492:	701e      	strb	r6, [r3, #0]
 8016494:	6963      	ldr	r3, [r4, #20]
 8016496:	3001      	adds	r0, #1
 8016498:	4283      	cmp	r3, r0
 801649a:	d004      	beq.n	80164a6 <__swbuf_r+0x62>
 801649c:	89a3      	ldrh	r3, [r4, #12]
 801649e:	07db      	lsls	r3, r3, #31
 80164a0:	d506      	bpl.n	80164b0 <__swbuf_r+0x6c>
 80164a2:	2e0a      	cmp	r6, #10
 80164a4:	d104      	bne.n	80164b0 <__swbuf_r+0x6c>
 80164a6:	4621      	mov	r1, r4
 80164a8:	4628      	mov	r0, r5
 80164aa:	f000 f911 	bl	80166d0 <_fflush_r>
 80164ae:	b988      	cbnz	r0, 80164d4 <__swbuf_r+0x90>
 80164b0:	4638      	mov	r0, r7
 80164b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164b4:	4b0a      	ldr	r3, [pc, #40]	; (80164e0 <__swbuf_r+0x9c>)
 80164b6:	429c      	cmp	r4, r3
 80164b8:	d101      	bne.n	80164be <__swbuf_r+0x7a>
 80164ba:	68ac      	ldr	r4, [r5, #8]
 80164bc:	e7cf      	b.n	801645e <__swbuf_r+0x1a>
 80164be:	4b09      	ldr	r3, [pc, #36]	; (80164e4 <__swbuf_r+0xa0>)
 80164c0:	429c      	cmp	r4, r3
 80164c2:	bf08      	it	eq
 80164c4:	68ec      	ldreq	r4, [r5, #12]
 80164c6:	e7ca      	b.n	801645e <__swbuf_r+0x1a>
 80164c8:	4621      	mov	r1, r4
 80164ca:	4628      	mov	r0, r5
 80164cc:	f000 f80c 	bl	80164e8 <__swsetup_r>
 80164d0:	2800      	cmp	r0, #0
 80164d2:	d0cb      	beq.n	801646c <__swbuf_r+0x28>
 80164d4:	f04f 37ff 	mov.w	r7, #4294967295
 80164d8:	e7ea      	b.n	80164b0 <__swbuf_r+0x6c>
 80164da:	bf00      	nop
 80164dc:	0801715c 	.word	0x0801715c
 80164e0:	0801717c 	.word	0x0801717c
 80164e4:	0801713c 	.word	0x0801713c

080164e8 <__swsetup_r>:
 80164e8:	4b32      	ldr	r3, [pc, #200]	; (80165b4 <__swsetup_r+0xcc>)
 80164ea:	b570      	push	{r4, r5, r6, lr}
 80164ec:	681d      	ldr	r5, [r3, #0]
 80164ee:	4606      	mov	r6, r0
 80164f0:	460c      	mov	r4, r1
 80164f2:	b125      	cbz	r5, 80164fe <__swsetup_r+0x16>
 80164f4:	69ab      	ldr	r3, [r5, #24]
 80164f6:	b913      	cbnz	r3, 80164fe <__swsetup_r+0x16>
 80164f8:	4628      	mov	r0, r5
 80164fa:	f000 f97d 	bl	80167f8 <__sinit>
 80164fe:	4b2e      	ldr	r3, [pc, #184]	; (80165b8 <__swsetup_r+0xd0>)
 8016500:	429c      	cmp	r4, r3
 8016502:	d10f      	bne.n	8016524 <__swsetup_r+0x3c>
 8016504:	686c      	ldr	r4, [r5, #4]
 8016506:	89a3      	ldrh	r3, [r4, #12]
 8016508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801650c:	0719      	lsls	r1, r3, #28
 801650e:	d42c      	bmi.n	801656a <__swsetup_r+0x82>
 8016510:	06dd      	lsls	r5, r3, #27
 8016512:	d411      	bmi.n	8016538 <__swsetup_r+0x50>
 8016514:	2309      	movs	r3, #9
 8016516:	6033      	str	r3, [r6, #0]
 8016518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801651c:	81a3      	strh	r3, [r4, #12]
 801651e:	f04f 30ff 	mov.w	r0, #4294967295
 8016522:	e03e      	b.n	80165a2 <__swsetup_r+0xba>
 8016524:	4b25      	ldr	r3, [pc, #148]	; (80165bc <__swsetup_r+0xd4>)
 8016526:	429c      	cmp	r4, r3
 8016528:	d101      	bne.n	801652e <__swsetup_r+0x46>
 801652a:	68ac      	ldr	r4, [r5, #8]
 801652c:	e7eb      	b.n	8016506 <__swsetup_r+0x1e>
 801652e:	4b24      	ldr	r3, [pc, #144]	; (80165c0 <__swsetup_r+0xd8>)
 8016530:	429c      	cmp	r4, r3
 8016532:	bf08      	it	eq
 8016534:	68ec      	ldreq	r4, [r5, #12]
 8016536:	e7e6      	b.n	8016506 <__swsetup_r+0x1e>
 8016538:	0758      	lsls	r0, r3, #29
 801653a:	d512      	bpl.n	8016562 <__swsetup_r+0x7a>
 801653c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801653e:	b141      	cbz	r1, 8016552 <__swsetup_r+0x6a>
 8016540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016544:	4299      	cmp	r1, r3
 8016546:	d002      	beq.n	801654e <__swsetup_r+0x66>
 8016548:	4630      	mov	r0, r6
 801654a:	f7fb ff25 	bl	8012398 <_free_r>
 801654e:	2300      	movs	r3, #0
 8016550:	6363      	str	r3, [r4, #52]	; 0x34
 8016552:	89a3      	ldrh	r3, [r4, #12]
 8016554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016558:	81a3      	strh	r3, [r4, #12]
 801655a:	2300      	movs	r3, #0
 801655c:	6063      	str	r3, [r4, #4]
 801655e:	6923      	ldr	r3, [r4, #16]
 8016560:	6023      	str	r3, [r4, #0]
 8016562:	89a3      	ldrh	r3, [r4, #12]
 8016564:	f043 0308 	orr.w	r3, r3, #8
 8016568:	81a3      	strh	r3, [r4, #12]
 801656a:	6923      	ldr	r3, [r4, #16]
 801656c:	b94b      	cbnz	r3, 8016582 <__swsetup_r+0x9a>
 801656e:	89a3      	ldrh	r3, [r4, #12]
 8016570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016578:	d003      	beq.n	8016582 <__swsetup_r+0x9a>
 801657a:	4621      	mov	r1, r4
 801657c:	4630      	mov	r0, r6
 801657e:	f000 f9fd 	bl	801697c <__smakebuf_r>
 8016582:	89a0      	ldrh	r0, [r4, #12]
 8016584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016588:	f010 0301 	ands.w	r3, r0, #1
 801658c:	d00a      	beq.n	80165a4 <__swsetup_r+0xbc>
 801658e:	2300      	movs	r3, #0
 8016590:	60a3      	str	r3, [r4, #8]
 8016592:	6963      	ldr	r3, [r4, #20]
 8016594:	425b      	negs	r3, r3
 8016596:	61a3      	str	r3, [r4, #24]
 8016598:	6923      	ldr	r3, [r4, #16]
 801659a:	b943      	cbnz	r3, 80165ae <__swsetup_r+0xc6>
 801659c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80165a0:	d1ba      	bne.n	8016518 <__swsetup_r+0x30>
 80165a2:	bd70      	pop	{r4, r5, r6, pc}
 80165a4:	0781      	lsls	r1, r0, #30
 80165a6:	bf58      	it	pl
 80165a8:	6963      	ldrpl	r3, [r4, #20]
 80165aa:	60a3      	str	r3, [r4, #8]
 80165ac:	e7f4      	b.n	8016598 <__swsetup_r+0xb0>
 80165ae:	2000      	movs	r0, #0
 80165b0:	e7f7      	b.n	80165a2 <__swsetup_r+0xba>
 80165b2:	bf00      	nop
 80165b4:	2000019c 	.word	0x2000019c
 80165b8:	0801715c 	.word	0x0801715c
 80165bc:	0801717c 	.word	0x0801717c
 80165c0:	0801713c 	.word	0x0801713c

080165c4 <__sflush_r>:
 80165c4:	898a      	ldrh	r2, [r1, #12]
 80165c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ca:	4605      	mov	r5, r0
 80165cc:	0710      	lsls	r0, r2, #28
 80165ce:	460c      	mov	r4, r1
 80165d0:	d458      	bmi.n	8016684 <__sflush_r+0xc0>
 80165d2:	684b      	ldr	r3, [r1, #4]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	dc05      	bgt.n	80165e4 <__sflush_r+0x20>
 80165d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80165da:	2b00      	cmp	r3, #0
 80165dc:	dc02      	bgt.n	80165e4 <__sflush_r+0x20>
 80165de:	2000      	movs	r0, #0
 80165e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80165e6:	2e00      	cmp	r6, #0
 80165e8:	d0f9      	beq.n	80165de <__sflush_r+0x1a>
 80165ea:	2300      	movs	r3, #0
 80165ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80165f0:	682f      	ldr	r7, [r5, #0]
 80165f2:	602b      	str	r3, [r5, #0]
 80165f4:	d032      	beq.n	801665c <__sflush_r+0x98>
 80165f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	075a      	lsls	r2, r3, #29
 80165fc:	d505      	bpl.n	801660a <__sflush_r+0x46>
 80165fe:	6863      	ldr	r3, [r4, #4]
 8016600:	1ac0      	subs	r0, r0, r3
 8016602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016604:	b10b      	cbz	r3, 801660a <__sflush_r+0x46>
 8016606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016608:	1ac0      	subs	r0, r0, r3
 801660a:	2300      	movs	r3, #0
 801660c:	4602      	mov	r2, r0
 801660e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016610:	6a21      	ldr	r1, [r4, #32]
 8016612:	4628      	mov	r0, r5
 8016614:	47b0      	blx	r6
 8016616:	1c43      	adds	r3, r0, #1
 8016618:	89a3      	ldrh	r3, [r4, #12]
 801661a:	d106      	bne.n	801662a <__sflush_r+0x66>
 801661c:	6829      	ldr	r1, [r5, #0]
 801661e:	291d      	cmp	r1, #29
 8016620:	d82c      	bhi.n	801667c <__sflush_r+0xb8>
 8016622:	4a2a      	ldr	r2, [pc, #168]	; (80166cc <__sflush_r+0x108>)
 8016624:	40ca      	lsrs	r2, r1
 8016626:	07d6      	lsls	r6, r2, #31
 8016628:	d528      	bpl.n	801667c <__sflush_r+0xb8>
 801662a:	2200      	movs	r2, #0
 801662c:	6062      	str	r2, [r4, #4]
 801662e:	04d9      	lsls	r1, r3, #19
 8016630:	6922      	ldr	r2, [r4, #16]
 8016632:	6022      	str	r2, [r4, #0]
 8016634:	d504      	bpl.n	8016640 <__sflush_r+0x7c>
 8016636:	1c42      	adds	r2, r0, #1
 8016638:	d101      	bne.n	801663e <__sflush_r+0x7a>
 801663a:	682b      	ldr	r3, [r5, #0]
 801663c:	b903      	cbnz	r3, 8016640 <__sflush_r+0x7c>
 801663e:	6560      	str	r0, [r4, #84]	; 0x54
 8016640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016642:	602f      	str	r7, [r5, #0]
 8016644:	2900      	cmp	r1, #0
 8016646:	d0ca      	beq.n	80165de <__sflush_r+0x1a>
 8016648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801664c:	4299      	cmp	r1, r3
 801664e:	d002      	beq.n	8016656 <__sflush_r+0x92>
 8016650:	4628      	mov	r0, r5
 8016652:	f7fb fea1 	bl	8012398 <_free_r>
 8016656:	2000      	movs	r0, #0
 8016658:	6360      	str	r0, [r4, #52]	; 0x34
 801665a:	e7c1      	b.n	80165e0 <__sflush_r+0x1c>
 801665c:	6a21      	ldr	r1, [r4, #32]
 801665e:	2301      	movs	r3, #1
 8016660:	4628      	mov	r0, r5
 8016662:	47b0      	blx	r6
 8016664:	1c41      	adds	r1, r0, #1
 8016666:	d1c7      	bne.n	80165f8 <__sflush_r+0x34>
 8016668:	682b      	ldr	r3, [r5, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d0c4      	beq.n	80165f8 <__sflush_r+0x34>
 801666e:	2b1d      	cmp	r3, #29
 8016670:	d001      	beq.n	8016676 <__sflush_r+0xb2>
 8016672:	2b16      	cmp	r3, #22
 8016674:	d101      	bne.n	801667a <__sflush_r+0xb6>
 8016676:	602f      	str	r7, [r5, #0]
 8016678:	e7b1      	b.n	80165de <__sflush_r+0x1a>
 801667a:	89a3      	ldrh	r3, [r4, #12]
 801667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016680:	81a3      	strh	r3, [r4, #12]
 8016682:	e7ad      	b.n	80165e0 <__sflush_r+0x1c>
 8016684:	690f      	ldr	r7, [r1, #16]
 8016686:	2f00      	cmp	r7, #0
 8016688:	d0a9      	beq.n	80165de <__sflush_r+0x1a>
 801668a:	0793      	lsls	r3, r2, #30
 801668c:	680e      	ldr	r6, [r1, #0]
 801668e:	bf08      	it	eq
 8016690:	694b      	ldreq	r3, [r1, #20]
 8016692:	600f      	str	r7, [r1, #0]
 8016694:	bf18      	it	ne
 8016696:	2300      	movne	r3, #0
 8016698:	eba6 0807 	sub.w	r8, r6, r7
 801669c:	608b      	str	r3, [r1, #8]
 801669e:	f1b8 0f00 	cmp.w	r8, #0
 80166a2:	dd9c      	ble.n	80165de <__sflush_r+0x1a>
 80166a4:	6a21      	ldr	r1, [r4, #32]
 80166a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80166a8:	4643      	mov	r3, r8
 80166aa:	463a      	mov	r2, r7
 80166ac:	4628      	mov	r0, r5
 80166ae:	47b0      	blx	r6
 80166b0:	2800      	cmp	r0, #0
 80166b2:	dc06      	bgt.n	80166c2 <__sflush_r+0xfe>
 80166b4:	89a3      	ldrh	r3, [r4, #12]
 80166b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166ba:	81a3      	strh	r3, [r4, #12]
 80166bc:	f04f 30ff 	mov.w	r0, #4294967295
 80166c0:	e78e      	b.n	80165e0 <__sflush_r+0x1c>
 80166c2:	4407      	add	r7, r0
 80166c4:	eba8 0800 	sub.w	r8, r8, r0
 80166c8:	e7e9      	b.n	801669e <__sflush_r+0xda>
 80166ca:	bf00      	nop
 80166cc:	20400001 	.word	0x20400001

080166d0 <_fflush_r>:
 80166d0:	b538      	push	{r3, r4, r5, lr}
 80166d2:	690b      	ldr	r3, [r1, #16]
 80166d4:	4605      	mov	r5, r0
 80166d6:	460c      	mov	r4, r1
 80166d8:	b913      	cbnz	r3, 80166e0 <_fflush_r+0x10>
 80166da:	2500      	movs	r5, #0
 80166dc:	4628      	mov	r0, r5
 80166de:	bd38      	pop	{r3, r4, r5, pc}
 80166e0:	b118      	cbz	r0, 80166ea <_fflush_r+0x1a>
 80166e2:	6983      	ldr	r3, [r0, #24]
 80166e4:	b90b      	cbnz	r3, 80166ea <_fflush_r+0x1a>
 80166e6:	f000 f887 	bl	80167f8 <__sinit>
 80166ea:	4b14      	ldr	r3, [pc, #80]	; (801673c <_fflush_r+0x6c>)
 80166ec:	429c      	cmp	r4, r3
 80166ee:	d11b      	bne.n	8016728 <_fflush_r+0x58>
 80166f0:	686c      	ldr	r4, [r5, #4]
 80166f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d0ef      	beq.n	80166da <_fflush_r+0xa>
 80166fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80166fc:	07d0      	lsls	r0, r2, #31
 80166fe:	d404      	bmi.n	801670a <_fflush_r+0x3a>
 8016700:	0599      	lsls	r1, r3, #22
 8016702:	d402      	bmi.n	801670a <_fflush_r+0x3a>
 8016704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016706:	f7ff fd1c 	bl	8016142 <__retarget_lock_acquire_recursive>
 801670a:	4628      	mov	r0, r5
 801670c:	4621      	mov	r1, r4
 801670e:	f7ff ff59 	bl	80165c4 <__sflush_r>
 8016712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016714:	07da      	lsls	r2, r3, #31
 8016716:	4605      	mov	r5, r0
 8016718:	d4e0      	bmi.n	80166dc <_fflush_r+0xc>
 801671a:	89a3      	ldrh	r3, [r4, #12]
 801671c:	059b      	lsls	r3, r3, #22
 801671e:	d4dd      	bmi.n	80166dc <_fflush_r+0xc>
 8016720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016722:	f7ff fd0f 	bl	8016144 <__retarget_lock_release_recursive>
 8016726:	e7d9      	b.n	80166dc <_fflush_r+0xc>
 8016728:	4b05      	ldr	r3, [pc, #20]	; (8016740 <_fflush_r+0x70>)
 801672a:	429c      	cmp	r4, r3
 801672c:	d101      	bne.n	8016732 <_fflush_r+0x62>
 801672e:	68ac      	ldr	r4, [r5, #8]
 8016730:	e7df      	b.n	80166f2 <_fflush_r+0x22>
 8016732:	4b04      	ldr	r3, [pc, #16]	; (8016744 <_fflush_r+0x74>)
 8016734:	429c      	cmp	r4, r3
 8016736:	bf08      	it	eq
 8016738:	68ec      	ldreq	r4, [r5, #12]
 801673a:	e7da      	b.n	80166f2 <_fflush_r+0x22>
 801673c:	0801715c 	.word	0x0801715c
 8016740:	0801717c 	.word	0x0801717c
 8016744:	0801713c 	.word	0x0801713c

08016748 <std>:
 8016748:	2300      	movs	r3, #0
 801674a:	b510      	push	{r4, lr}
 801674c:	4604      	mov	r4, r0
 801674e:	e9c0 3300 	strd	r3, r3, [r0]
 8016752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016756:	6083      	str	r3, [r0, #8]
 8016758:	8181      	strh	r1, [r0, #12]
 801675a:	6643      	str	r3, [r0, #100]	; 0x64
 801675c:	81c2      	strh	r2, [r0, #14]
 801675e:	6183      	str	r3, [r0, #24]
 8016760:	4619      	mov	r1, r3
 8016762:	2208      	movs	r2, #8
 8016764:	305c      	adds	r0, #92	; 0x5c
 8016766:	f7fb fe0f 	bl	8012388 <memset>
 801676a:	4b05      	ldr	r3, [pc, #20]	; (8016780 <std+0x38>)
 801676c:	6263      	str	r3, [r4, #36]	; 0x24
 801676e:	4b05      	ldr	r3, [pc, #20]	; (8016784 <std+0x3c>)
 8016770:	62a3      	str	r3, [r4, #40]	; 0x28
 8016772:	4b05      	ldr	r3, [pc, #20]	; (8016788 <std+0x40>)
 8016774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016776:	4b05      	ldr	r3, [pc, #20]	; (801678c <std+0x44>)
 8016778:	6224      	str	r4, [r4, #32]
 801677a:	6323      	str	r3, [r4, #48]	; 0x30
 801677c:	bd10      	pop	{r4, pc}
 801677e:	bf00      	nop
 8016780:	08016a0d 	.word	0x08016a0d
 8016784:	08016a2f 	.word	0x08016a2f
 8016788:	08016a67 	.word	0x08016a67
 801678c:	08016a8b 	.word	0x08016a8b

08016790 <_cleanup_r>:
 8016790:	4901      	ldr	r1, [pc, #4]	; (8016798 <_cleanup_r+0x8>)
 8016792:	f000 b8af 	b.w	80168f4 <_fwalk_reent>
 8016796:	bf00      	nop
 8016798:	080166d1 	.word	0x080166d1

0801679c <__sfmoreglue>:
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	1e4a      	subs	r2, r1, #1
 80167a0:	2568      	movs	r5, #104	; 0x68
 80167a2:	4355      	muls	r5, r2
 80167a4:	460e      	mov	r6, r1
 80167a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80167aa:	f7fb fe45 	bl	8012438 <_malloc_r>
 80167ae:	4604      	mov	r4, r0
 80167b0:	b140      	cbz	r0, 80167c4 <__sfmoreglue+0x28>
 80167b2:	2100      	movs	r1, #0
 80167b4:	e9c0 1600 	strd	r1, r6, [r0]
 80167b8:	300c      	adds	r0, #12
 80167ba:	60a0      	str	r0, [r4, #8]
 80167bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80167c0:	f7fb fde2 	bl	8012388 <memset>
 80167c4:	4620      	mov	r0, r4
 80167c6:	bd70      	pop	{r4, r5, r6, pc}

080167c8 <__sfp_lock_acquire>:
 80167c8:	4801      	ldr	r0, [pc, #4]	; (80167d0 <__sfp_lock_acquire+0x8>)
 80167ca:	f7ff bcba 	b.w	8016142 <__retarget_lock_acquire_recursive>
 80167ce:	bf00      	nop
 80167d0:	20003ee8 	.word	0x20003ee8

080167d4 <__sfp_lock_release>:
 80167d4:	4801      	ldr	r0, [pc, #4]	; (80167dc <__sfp_lock_release+0x8>)
 80167d6:	f7ff bcb5 	b.w	8016144 <__retarget_lock_release_recursive>
 80167da:	bf00      	nop
 80167dc:	20003ee8 	.word	0x20003ee8

080167e0 <__sinit_lock_acquire>:
 80167e0:	4801      	ldr	r0, [pc, #4]	; (80167e8 <__sinit_lock_acquire+0x8>)
 80167e2:	f7ff bcae 	b.w	8016142 <__retarget_lock_acquire_recursive>
 80167e6:	bf00      	nop
 80167e8:	20003ee3 	.word	0x20003ee3

080167ec <__sinit_lock_release>:
 80167ec:	4801      	ldr	r0, [pc, #4]	; (80167f4 <__sinit_lock_release+0x8>)
 80167ee:	f7ff bca9 	b.w	8016144 <__retarget_lock_release_recursive>
 80167f2:	bf00      	nop
 80167f4:	20003ee3 	.word	0x20003ee3

080167f8 <__sinit>:
 80167f8:	b510      	push	{r4, lr}
 80167fa:	4604      	mov	r4, r0
 80167fc:	f7ff fff0 	bl	80167e0 <__sinit_lock_acquire>
 8016800:	69a3      	ldr	r3, [r4, #24]
 8016802:	b11b      	cbz	r3, 801680c <__sinit+0x14>
 8016804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016808:	f7ff bff0 	b.w	80167ec <__sinit_lock_release>
 801680c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016810:	6523      	str	r3, [r4, #80]	; 0x50
 8016812:	4b13      	ldr	r3, [pc, #76]	; (8016860 <__sinit+0x68>)
 8016814:	4a13      	ldr	r2, [pc, #76]	; (8016864 <__sinit+0x6c>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	62a2      	str	r2, [r4, #40]	; 0x28
 801681a:	42a3      	cmp	r3, r4
 801681c:	bf04      	itt	eq
 801681e:	2301      	moveq	r3, #1
 8016820:	61a3      	streq	r3, [r4, #24]
 8016822:	4620      	mov	r0, r4
 8016824:	f000 f820 	bl	8016868 <__sfp>
 8016828:	6060      	str	r0, [r4, #4]
 801682a:	4620      	mov	r0, r4
 801682c:	f000 f81c 	bl	8016868 <__sfp>
 8016830:	60a0      	str	r0, [r4, #8]
 8016832:	4620      	mov	r0, r4
 8016834:	f000 f818 	bl	8016868 <__sfp>
 8016838:	2200      	movs	r2, #0
 801683a:	60e0      	str	r0, [r4, #12]
 801683c:	2104      	movs	r1, #4
 801683e:	6860      	ldr	r0, [r4, #4]
 8016840:	f7ff ff82 	bl	8016748 <std>
 8016844:	68a0      	ldr	r0, [r4, #8]
 8016846:	2201      	movs	r2, #1
 8016848:	2109      	movs	r1, #9
 801684a:	f7ff ff7d 	bl	8016748 <std>
 801684e:	68e0      	ldr	r0, [r4, #12]
 8016850:	2202      	movs	r2, #2
 8016852:	2112      	movs	r1, #18
 8016854:	f7ff ff78 	bl	8016748 <std>
 8016858:	2301      	movs	r3, #1
 801685a:	61a3      	str	r3, [r4, #24]
 801685c:	e7d2      	b.n	8016804 <__sinit+0xc>
 801685e:	bf00      	nop
 8016860:	08016ce8 	.word	0x08016ce8
 8016864:	08016791 	.word	0x08016791

08016868 <__sfp>:
 8016868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686a:	4607      	mov	r7, r0
 801686c:	f7ff ffac 	bl	80167c8 <__sfp_lock_acquire>
 8016870:	4b1e      	ldr	r3, [pc, #120]	; (80168ec <__sfp+0x84>)
 8016872:	681e      	ldr	r6, [r3, #0]
 8016874:	69b3      	ldr	r3, [r6, #24]
 8016876:	b913      	cbnz	r3, 801687e <__sfp+0x16>
 8016878:	4630      	mov	r0, r6
 801687a:	f7ff ffbd 	bl	80167f8 <__sinit>
 801687e:	3648      	adds	r6, #72	; 0x48
 8016880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016884:	3b01      	subs	r3, #1
 8016886:	d503      	bpl.n	8016890 <__sfp+0x28>
 8016888:	6833      	ldr	r3, [r6, #0]
 801688a:	b30b      	cbz	r3, 80168d0 <__sfp+0x68>
 801688c:	6836      	ldr	r6, [r6, #0]
 801688e:	e7f7      	b.n	8016880 <__sfp+0x18>
 8016890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016894:	b9d5      	cbnz	r5, 80168cc <__sfp+0x64>
 8016896:	4b16      	ldr	r3, [pc, #88]	; (80168f0 <__sfp+0x88>)
 8016898:	60e3      	str	r3, [r4, #12]
 801689a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801689e:	6665      	str	r5, [r4, #100]	; 0x64
 80168a0:	f7ff fc4e 	bl	8016140 <__retarget_lock_init_recursive>
 80168a4:	f7ff ff96 	bl	80167d4 <__sfp_lock_release>
 80168a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80168ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80168b0:	6025      	str	r5, [r4, #0]
 80168b2:	61a5      	str	r5, [r4, #24]
 80168b4:	2208      	movs	r2, #8
 80168b6:	4629      	mov	r1, r5
 80168b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80168bc:	f7fb fd64 	bl	8012388 <memset>
 80168c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80168c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80168c8:	4620      	mov	r0, r4
 80168ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168cc:	3468      	adds	r4, #104	; 0x68
 80168ce:	e7d9      	b.n	8016884 <__sfp+0x1c>
 80168d0:	2104      	movs	r1, #4
 80168d2:	4638      	mov	r0, r7
 80168d4:	f7ff ff62 	bl	801679c <__sfmoreglue>
 80168d8:	4604      	mov	r4, r0
 80168da:	6030      	str	r0, [r6, #0]
 80168dc:	2800      	cmp	r0, #0
 80168de:	d1d5      	bne.n	801688c <__sfp+0x24>
 80168e0:	f7ff ff78 	bl	80167d4 <__sfp_lock_release>
 80168e4:	230c      	movs	r3, #12
 80168e6:	603b      	str	r3, [r7, #0]
 80168e8:	e7ee      	b.n	80168c8 <__sfp+0x60>
 80168ea:	bf00      	nop
 80168ec:	08016ce8 	.word	0x08016ce8
 80168f0:	ffff0001 	.word	0xffff0001

080168f4 <_fwalk_reent>:
 80168f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168f8:	4606      	mov	r6, r0
 80168fa:	4688      	mov	r8, r1
 80168fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016900:	2700      	movs	r7, #0
 8016902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016906:	f1b9 0901 	subs.w	r9, r9, #1
 801690a:	d505      	bpl.n	8016918 <_fwalk_reent+0x24>
 801690c:	6824      	ldr	r4, [r4, #0]
 801690e:	2c00      	cmp	r4, #0
 8016910:	d1f7      	bne.n	8016902 <_fwalk_reent+0xe>
 8016912:	4638      	mov	r0, r7
 8016914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016918:	89ab      	ldrh	r3, [r5, #12]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d907      	bls.n	801692e <_fwalk_reent+0x3a>
 801691e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016922:	3301      	adds	r3, #1
 8016924:	d003      	beq.n	801692e <_fwalk_reent+0x3a>
 8016926:	4629      	mov	r1, r5
 8016928:	4630      	mov	r0, r6
 801692a:	47c0      	blx	r8
 801692c:	4307      	orrs	r7, r0
 801692e:	3568      	adds	r5, #104	; 0x68
 8016930:	e7e9      	b.n	8016906 <_fwalk_reent+0x12>

08016932 <__swhatbuf_r>:
 8016932:	b570      	push	{r4, r5, r6, lr}
 8016934:	460e      	mov	r6, r1
 8016936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801693a:	2900      	cmp	r1, #0
 801693c:	b096      	sub	sp, #88	; 0x58
 801693e:	4614      	mov	r4, r2
 8016940:	461d      	mov	r5, r3
 8016942:	da07      	bge.n	8016954 <__swhatbuf_r+0x22>
 8016944:	2300      	movs	r3, #0
 8016946:	602b      	str	r3, [r5, #0]
 8016948:	89b3      	ldrh	r3, [r6, #12]
 801694a:	061a      	lsls	r2, r3, #24
 801694c:	d410      	bmi.n	8016970 <__swhatbuf_r+0x3e>
 801694e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016952:	e00e      	b.n	8016972 <__swhatbuf_r+0x40>
 8016954:	466a      	mov	r2, sp
 8016956:	f000 f8bf 	bl	8016ad8 <_fstat_r>
 801695a:	2800      	cmp	r0, #0
 801695c:	dbf2      	blt.n	8016944 <__swhatbuf_r+0x12>
 801695e:	9a01      	ldr	r2, [sp, #4]
 8016960:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016964:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016968:	425a      	negs	r2, r3
 801696a:	415a      	adcs	r2, r3
 801696c:	602a      	str	r2, [r5, #0]
 801696e:	e7ee      	b.n	801694e <__swhatbuf_r+0x1c>
 8016970:	2340      	movs	r3, #64	; 0x40
 8016972:	2000      	movs	r0, #0
 8016974:	6023      	str	r3, [r4, #0]
 8016976:	b016      	add	sp, #88	; 0x58
 8016978:	bd70      	pop	{r4, r5, r6, pc}
	...

0801697c <__smakebuf_r>:
 801697c:	898b      	ldrh	r3, [r1, #12]
 801697e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016980:	079d      	lsls	r5, r3, #30
 8016982:	4606      	mov	r6, r0
 8016984:	460c      	mov	r4, r1
 8016986:	d507      	bpl.n	8016998 <__smakebuf_r+0x1c>
 8016988:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	6123      	str	r3, [r4, #16]
 8016990:	2301      	movs	r3, #1
 8016992:	6163      	str	r3, [r4, #20]
 8016994:	b002      	add	sp, #8
 8016996:	bd70      	pop	{r4, r5, r6, pc}
 8016998:	ab01      	add	r3, sp, #4
 801699a:	466a      	mov	r2, sp
 801699c:	f7ff ffc9 	bl	8016932 <__swhatbuf_r>
 80169a0:	9900      	ldr	r1, [sp, #0]
 80169a2:	4605      	mov	r5, r0
 80169a4:	4630      	mov	r0, r6
 80169a6:	f7fb fd47 	bl	8012438 <_malloc_r>
 80169aa:	b948      	cbnz	r0, 80169c0 <__smakebuf_r+0x44>
 80169ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169b0:	059a      	lsls	r2, r3, #22
 80169b2:	d4ef      	bmi.n	8016994 <__smakebuf_r+0x18>
 80169b4:	f023 0303 	bic.w	r3, r3, #3
 80169b8:	f043 0302 	orr.w	r3, r3, #2
 80169bc:	81a3      	strh	r3, [r4, #12]
 80169be:	e7e3      	b.n	8016988 <__smakebuf_r+0xc>
 80169c0:	4b0d      	ldr	r3, [pc, #52]	; (80169f8 <__smakebuf_r+0x7c>)
 80169c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80169c4:	89a3      	ldrh	r3, [r4, #12]
 80169c6:	6020      	str	r0, [r4, #0]
 80169c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169cc:	81a3      	strh	r3, [r4, #12]
 80169ce:	9b00      	ldr	r3, [sp, #0]
 80169d0:	6163      	str	r3, [r4, #20]
 80169d2:	9b01      	ldr	r3, [sp, #4]
 80169d4:	6120      	str	r0, [r4, #16]
 80169d6:	b15b      	cbz	r3, 80169f0 <__smakebuf_r+0x74>
 80169d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169dc:	4630      	mov	r0, r6
 80169de:	f000 f88d 	bl	8016afc <_isatty_r>
 80169e2:	b128      	cbz	r0, 80169f0 <__smakebuf_r+0x74>
 80169e4:	89a3      	ldrh	r3, [r4, #12]
 80169e6:	f023 0303 	bic.w	r3, r3, #3
 80169ea:	f043 0301 	orr.w	r3, r3, #1
 80169ee:	81a3      	strh	r3, [r4, #12]
 80169f0:	89a0      	ldrh	r0, [r4, #12]
 80169f2:	4305      	orrs	r5, r0
 80169f4:	81a5      	strh	r5, [r4, #12]
 80169f6:	e7cd      	b.n	8016994 <__smakebuf_r+0x18>
 80169f8:	08016791 	.word	0x08016791

080169fc <_malloc_usable_size_r>:
 80169fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a00:	1f18      	subs	r0, r3, #4
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	bfbc      	itt	lt
 8016a06:	580b      	ldrlt	r3, [r1, r0]
 8016a08:	18c0      	addlt	r0, r0, r3
 8016a0a:	4770      	bx	lr

08016a0c <__sread>:
 8016a0c:	b510      	push	{r4, lr}
 8016a0e:	460c      	mov	r4, r1
 8016a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a14:	f000 f894 	bl	8016b40 <_read_r>
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	bfab      	itete	ge
 8016a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8016a20:	181b      	addge	r3, r3, r0
 8016a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016a26:	bfac      	ite	ge
 8016a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8016a2a:	81a3      	strhlt	r3, [r4, #12]
 8016a2c:	bd10      	pop	{r4, pc}

08016a2e <__swrite>:
 8016a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a32:	461f      	mov	r7, r3
 8016a34:	898b      	ldrh	r3, [r1, #12]
 8016a36:	05db      	lsls	r3, r3, #23
 8016a38:	4605      	mov	r5, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	4616      	mov	r6, r2
 8016a3e:	d505      	bpl.n	8016a4c <__swrite+0x1e>
 8016a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a44:	2302      	movs	r3, #2
 8016a46:	2200      	movs	r2, #0
 8016a48:	f000 f868 	bl	8016b1c <_lseek_r>
 8016a4c:	89a3      	ldrh	r3, [r4, #12]
 8016a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016a56:	81a3      	strh	r3, [r4, #12]
 8016a58:	4632      	mov	r2, r6
 8016a5a:	463b      	mov	r3, r7
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a62:	f000 b817 	b.w	8016a94 <_write_r>

08016a66 <__sseek>:
 8016a66:	b510      	push	{r4, lr}
 8016a68:	460c      	mov	r4, r1
 8016a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a6e:	f000 f855 	bl	8016b1c <_lseek_r>
 8016a72:	1c43      	adds	r3, r0, #1
 8016a74:	89a3      	ldrh	r3, [r4, #12]
 8016a76:	bf15      	itete	ne
 8016a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a82:	81a3      	strheq	r3, [r4, #12]
 8016a84:	bf18      	it	ne
 8016a86:	81a3      	strhne	r3, [r4, #12]
 8016a88:	bd10      	pop	{r4, pc}

08016a8a <__sclose>:
 8016a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a8e:	f000 b813 	b.w	8016ab8 <_close_r>
	...

08016a94 <_write_r>:
 8016a94:	b538      	push	{r3, r4, r5, lr}
 8016a96:	4d07      	ldr	r5, [pc, #28]	; (8016ab4 <_write_r+0x20>)
 8016a98:	4604      	mov	r4, r0
 8016a9a:	4608      	mov	r0, r1
 8016a9c:	4611      	mov	r1, r2
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	602a      	str	r2, [r5, #0]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	f7f1 f995 	bl	8007dd2 <_write>
 8016aa8:	1c43      	adds	r3, r0, #1
 8016aaa:	d102      	bne.n	8016ab2 <_write_r+0x1e>
 8016aac:	682b      	ldr	r3, [r5, #0]
 8016aae:	b103      	cbz	r3, 8016ab2 <_write_r+0x1e>
 8016ab0:	6023      	str	r3, [r4, #0]
 8016ab2:	bd38      	pop	{r3, r4, r5, pc}
 8016ab4:	20003edc 	.word	0x20003edc

08016ab8 <_close_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	4d06      	ldr	r5, [pc, #24]	; (8016ad4 <_close_r+0x1c>)
 8016abc:	2300      	movs	r3, #0
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4608      	mov	r0, r1
 8016ac2:	602b      	str	r3, [r5, #0]
 8016ac4:	f7f1 f9a1 	bl	8007e0a <_close>
 8016ac8:	1c43      	adds	r3, r0, #1
 8016aca:	d102      	bne.n	8016ad2 <_close_r+0x1a>
 8016acc:	682b      	ldr	r3, [r5, #0]
 8016ace:	b103      	cbz	r3, 8016ad2 <_close_r+0x1a>
 8016ad0:	6023      	str	r3, [r4, #0]
 8016ad2:	bd38      	pop	{r3, r4, r5, pc}
 8016ad4:	20003edc 	.word	0x20003edc

08016ad8 <_fstat_r>:
 8016ad8:	b538      	push	{r3, r4, r5, lr}
 8016ada:	4d07      	ldr	r5, [pc, #28]	; (8016af8 <_fstat_r+0x20>)
 8016adc:	2300      	movs	r3, #0
 8016ade:	4604      	mov	r4, r0
 8016ae0:	4608      	mov	r0, r1
 8016ae2:	4611      	mov	r1, r2
 8016ae4:	602b      	str	r3, [r5, #0]
 8016ae6:	f7f1 f99c 	bl	8007e22 <_fstat>
 8016aea:	1c43      	adds	r3, r0, #1
 8016aec:	d102      	bne.n	8016af4 <_fstat_r+0x1c>
 8016aee:	682b      	ldr	r3, [r5, #0]
 8016af0:	b103      	cbz	r3, 8016af4 <_fstat_r+0x1c>
 8016af2:	6023      	str	r3, [r4, #0]
 8016af4:	bd38      	pop	{r3, r4, r5, pc}
 8016af6:	bf00      	nop
 8016af8:	20003edc 	.word	0x20003edc

08016afc <_isatty_r>:
 8016afc:	b538      	push	{r3, r4, r5, lr}
 8016afe:	4d06      	ldr	r5, [pc, #24]	; (8016b18 <_isatty_r+0x1c>)
 8016b00:	2300      	movs	r3, #0
 8016b02:	4604      	mov	r4, r0
 8016b04:	4608      	mov	r0, r1
 8016b06:	602b      	str	r3, [r5, #0]
 8016b08:	f7f1 f99b 	bl	8007e42 <_isatty>
 8016b0c:	1c43      	adds	r3, r0, #1
 8016b0e:	d102      	bne.n	8016b16 <_isatty_r+0x1a>
 8016b10:	682b      	ldr	r3, [r5, #0]
 8016b12:	b103      	cbz	r3, 8016b16 <_isatty_r+0x1a>
 8016b14:	6023      	str	r3, [r4, #0]
 8016b16:	bd38      	pop	{r3, r4, r5, pc}
 8016b18:	20003edc 	.word	0x20003edc

08016b1c <_lseek_r>:
 8016b1c:	b538      	push	{r3, r4, r5, lr}
 8016b1e:	4d07      	ldr	r5, [pc, #28]	; (8016b3c <_lseek_r+0x20>)
 8016b20:	4604      	mov	r4, r0
 8016b22:	4608      	mov	r0, r1
 8016b24:	4611      	mov	r1, r2
 8016b26:	2200      	movs	r2, #0
 8016b28:	602a      	str	r2, [r5, #0]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	f7f1 f994 	bl	8007e58 <_lseek>
 8016b30:	1c43      	adds	r3, r0, #1
 8016b32:	d102      	bne.n	8016b3a <_lseek_r+0x1e>
 8016b34:	682b      	ldr	r3, [r5, #0]
 8016b36:	b103      	cbz	r3, 8016b3a <_lseek_r+0x1e>
 8016b38:	6023      	str	r3, [r4, #0]
 8016b3a:	bd38      	pop	{r3, r4, r5, pc}
 8016b3c:	20003edc 	.word	0x20003edc

08016b40 <_read_r>:
 8016b40:	b538      	push	{r3, r4, r5, lr}
 8016b42:	4d07      	ldr	r5, [pc, #28]	; (8016b60 <_read_r+0x20>)
 8016b44:	4604      	mov	r4, r0
 8016b46:	4608      	mov	r0, r1
 8016b48:	4611      	mov	r1, r2
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	602a      	str	r2, [r5, #0]
 8016b4e:	461a      	mov	r2, r3
 8016b50:	f7f1 f922 	bl	8007d98 <_read>
 8016b54:	1c43      	adds	r3, r0, #1
 8016b56:	d102      	bne.n	8016b5e <_read_r+0x1e>
 8016b58:	682b      	ldr	r3, [r5, #0]
 8016b5a:	b103      	cbz	r3, 8016b5e <_read_r+0x1e>
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	bd38      	pop	{r3, r4, r5, pc}
 8016b60:	20003edc 	.word	0x20003edc

08016b64 <_init>:
 8016b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b66:	bf00      	nop
 8016b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b6a:	bc08      	pop	{r3}
 8016b6c:	469e      	mov	lr, r3
 8016b6e:	4770      	bx	lr

08016b70 <_fini>:
 8016b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b72:	bf00      	nop
 8016b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b76:	bc08      	pop	{r3}
 8016b78:	469e      	mov	lr, r3
 8016b7a:	4770      	bx	lr
